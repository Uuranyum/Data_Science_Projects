{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "9c7a6dec",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "papermill": {
     "duration": 0.022072,
     "end_time": "2024-06-05T12:09:23.376817",
     "exception": false,
     "start_time": "2024-06-05T12:09:23.354745",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## ChatGPT Google Reviews Analysis ##"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "81aa929c",
   "metadata": {
    "papermill": {
     "duration": 0.021221,
     "end_time": "2024-06-05T12:09:23.419762",
     "exception": false,
     "start_time": "2024-06-05T12:09:23.398541",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Please upvote it if you are find this note book helpful. My deepest thanks for your all! ###\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "0324d98c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-05T12:09:23.465135Z",
     "iopub.status.busy": "2024-06-05T12:09:23.464602Z",
     "iopub.status.idle": "2024-06-05T12:10:21.808467Z",
     "shell.execute_reply": "2024-06-05T12:10:21.807083Z"
    },
    "papermill": {
     "duration": 58.370506,
     "end_time": "2024-06-05T12:10:21.811631",
     "exception": false,
     "start_time": "2024-06-05T12:09:23.441125",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2024-06-05 12:10:08.162939: E external/local_xla/xla/stream_executor/cuda/cuda_dnn.cc:9261] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "2024-06-05 12:10:08.163109: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:607] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "2024-06-05 12:10:08.323940: E external/local_xla/xla/stream_executor/cuda/cuda_blas.cc:1515] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "import re\n",
    "import string\n",
    "import emoji\n",
    "import nltk\n",
    "import spacy\n",
    "from tqdm import tqdm\n",
    "from sklearn.svm import SVC\n",
    "from nltk.corpus import stopwords\n",
    "from gensim.models import Word2Vec\n",
    "from tensorflow.keras.preprocessing.text import Tokenizer\n",
    "from sklearn.feature_extraction.text import CountVectorizer\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.tree import DecisionTreeClassifier\n",
    "from sklearn.metrics import classification_report\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay\n",
    "from sklearn.preprocessing import MinMaxScaler, LabelEncoder, OrdinalEncoder"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e7d124dd",
   "metadata": {
    "papermill": {
     "duration": 0.021449,
     "end_time": "2024-06-05T12:10:21.856090",
     "exception": false,
     "start_time": "2024-06-05T12:10:21.834641",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Importing Data ##"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "8c6fb81a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-05T12:10:21.904891Z",
     "iopub.status.busy": "2024-06-05T12:10:21.903883Z",
     "iopub.status.idle": "2024-06-05T12:10:23.157741Z",
     "shell.execute_reply": "2024-06-05T12:10:23.156163Z"
    },
    "papermill": {
     "duration": 1.281775,
     "end_time": "2024-06-05T12:10:23.160854",
     "exception": false,
     "start_time": "2024-06-05T12:10:21.879079",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "dx = pd.read_csv('/kaggle/input/chatgpt-reviews-daily-updated/chatgpt_reviews.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "ece75102",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-05T12:10:23.209041Z",
     "iopub.status.busy": "2024-06-05T12:10:23.208100Z",
     "iopub.status.idle": "2024-06-05T12:10:23.238612Z",
     "shell.execute_reply": "2024-06-05T12:10:23.237104Z"
    },
    "papermill": {
     "duration": 0.058301,
     "end_time": "2024-06-05T12:10:23.241582",
     "exception": false,
     "start_time": "2024-06-05T12:10:23.183281",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>reviewId</th>\n",
       "      <th>userName</th>\n",
       "      <th>content</th>\n",
       "      <th>score</th>\n",
       "      <th>thumbsUpCount</th>\n",
       "      <th>reviewCreatedVersion</th>\n",
       "      <th>at</th>\n",
       "      <th>appVersion</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>30e0315f-729a-4709-b26b-ed91d2842ce8</td>\n",
       "      <td>Marwan Mohamed</td>\n",
       "      <td>this app Very cool, but he does not remember i...</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>1.2024.143</td>\n",
       "      <td>2024-06-03 14:59:30</td>\n",
       "      <td>1.2024.143</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>cbb56939-c726-411d-a147-89c52b23c033</td>\n",
       "      <td>Murendeni Mulaudzi</td>\n",
       "      <td>i love it it is so historicalü•∫ü§ü</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>1.2024.143</td>\n",
       "      <td>2024-06-03 14:57:37</td>\n",
       "      <td>1.2024.143</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2fb70124-54a8-47b5-bcc6-acff14e88fe2</td>\n",
       "      <td>NEERAJ KUMAR</td>\n",
       "      <td>amazing</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>1.2024.143</td>\n",
       "      <td>2024-06-03 14:57:17</td>\n",
       "      <td>1.2024.143</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>5378c013-27d8-48cd-9043-05d2fa898eda</td>\n",
       "      <td>Ziaul Haque</td>\n",
       "      <td>this is the best app helpful üëç</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>1.2024.143</td>\n",
       "      <td>2024-06-03 14:55:52</td>\n",
       "      <td>1.2024.143</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>6478c49c-7499-4669-96f1-eea74c294b5d</td>\n",
       "      <td>Ifra Fariyal</td>\n",
       "      <td>excellent</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>1.2024.139</td>\n",
       "      <td>2024-06-03 14:55:37</td>\n",
       "      <td>1.2024.139</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                               reviewId            userName  \\\n",
       "0  30e0315f-729a-4709-b26b-ed91d2842ce8      Marwan Mohamed   \n",
       "1  cbb56939-c726-411d-a147-89c52b23c033  Murendeni Mulaudzi   \n",
       "2  2fb70124-54a8-47b5-bcc6-acff14e88fe2        NEERAJ KUMAR   \n",
       "3  5378c013-27d8-48cd-9043-05d2fa898eda         Ziaul Haque   \n",
       "4  6478c49c-7499-4669-96f1-eea74c294b5d        Ifra Fariyal   \n",
       "\n",
       "                                             content  score  thumbsUpCount  \\\n",
       "0  this app Very cool, but he does not remember i...      4              0   \n",
       "1                    i love it it is so historicalü•∫ü§ü      5              0   \n",
       "2                                            amazing      5              0   \n",
       "3                     this is the best app helpful üëç      5              0   \n",
       "4                                          excellent      4              0   \n",
       "\n",
       "  reviewCreatedVersion                   at  appVersion  \n",
       "0           1.2024.143  2024-06-03 14:59:30  1.2024.143  \n",
       "1           1.2024.143  2024-06-03 14:57:37  1.2024.143  \n",
       "2           1.2024.143  2024-06-03 14:57:17  1.2024.143  \n",
       "3           1.2024.143  2024-06-03 14:55:52  1.2024.143  \n",
       "4           1.2024.139  2024-06-03 14:55:37  1.2024.139  "
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dx.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "50e5fa1d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-05T12:10:23.289963Z",
     "iopub.status.busy": "2024-06-05T12:10:23.289465Z",
     "iopub.status.idle": "2024-06-05T12:10:23.299981Z",
     "shell.execute_reply": "2024-06-05T12:10:23.298433Z"
    },
    "papermill": {
     "duration": 0.039111,
     "end_time": "2024-06-05T12:10:23.303147",
     "exception": false,
     "start_time": "2024-06-05T12:10:23.264036",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1081224"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dx.size"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "85f49243",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-05T12:10:23.350698Z",
     "iopub.status.busy": "2024-06-05T12:10:23.349428Z",
     "iopub.status.idle": "2024-06-05T12:10:23.382605Z",
     "shell.execute_reply": "2024-06-05T12:10:23.381008Z"
    },
    "papermill": {
     "duration": 0.060542,
     "end_time": "2024-06-05T12:10:23.386194",
     "exception": false,
     "start_time": "2024-06-05T12:10:23.325652",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>reviewId</th>\n",
       "      <th>userName</th>\n",
       "      <th>content</th>\n",
       "      <th>score</th>\n",
       "      <th>thumbsUpCount</th>\n",
       "      <th>reviewCreatedVersion</th>\n",
       "      <th>at</th>\n",
       "      <th>appVersion</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>15816</th>\n",
       "      <td>2085e016-a045-44a2-9c6d-7fcb13223551</td>\n",
       "      <td>Sachin Kumar</td>\n",
       "      <td>that's very smart</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>1.2024.108</td>\n",
       "      <td>2024-05-18 17:11:52</td>\n",
       "      <td>1.2024.108</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>38158</th>\n",
       "      <td>626def8c-c4f4-4067-8b91-6dd3e119fb83</td>\n",
       "      <td>muhammed lazim</td>\n",
       "      <td>The conversational mode is amazing, thank you ...</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>1.2023.314</td>\n",
       "      <td>2023-11-26 03:10:57</td>\n",
       "      <td>1.2023.314</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>42089</th>\n",
       "      <td>cd4822eb-93d1-417c-b059-6ec48ef1a872</td>\n",
       "      <td>Bongekile Ngwaqa</td>\n",
       "      <td>useful and reliable ‚ú®Ô∏è</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>1.2024.108</td>\n",
       "      <td>2024-04-30 14:40:34</td>\n",
       "      <td>1.2024.108</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25064</th>\n",
       "      <td>aca09cd0-93de-4708-976d-97ed347b1054</td>\n",
       "      <td>XBreanna KillamX</td>\n",
       "      <td>The app opens but doesn't display anything for...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1.2024.080</td>\n",
       "      <td>2024-03-30 13:32:33</td>\n",
       "      <td>1.2024.080</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>133675</th>\n",
       "      <td>c1c3a6f9-694d-4c5e-8c9a-d787f0eafab6</td>\n",
       "      <td>Ajayakumar Nayak</td>\n",
       "      <td>Excellent</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2023-07-25 15:09:50</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                    reviewId          userName  \\\n",
       "15816   2085e016-a045-44a2-9c6d-7fcb13223551      Sachin Kumar   \n",
       "38158   626def8c-c4f4-4067-8b91-6dd3e119fb83    muhammed lazim   \n",
       "42089   cd4822eb-93d1-417c-b059-6ec48ef1a872  Bongekile Ngwaqa   \n",
       "25064   aca09cd0-93de-4708-976d-97ed347b1054  XBreanna KillamX   \n",
       "133675  c1c3a6f9-694d-4c5e-8c9a-d787f0eafab6  Ajayakumar Nayak   \n",
       "\n",
       "                                                  content  score  \\\n",
       "15816                                   that's very smart      5   \n",
       "38158   The conversational mode is amazing, thank you ...      5   \n",
       "42089                              useful and reliable ‚ú®Ô∏è      5   \n",
       "25064   The app opens but doesn't display anything for...      1   \n",
       "133675                                          Excellent      5   \n",
       "\n",
       "        thumbsUpCount reviewCreatedVersion                   at  appVersion  \n",
       "15816               0           1.2024.108  2024-05-18 17:11:52  1.2024.108  \n",
       "38158               0           1.2023.314  2023-11-26 03:10:57  1.2023.314  \n",
       "42089               0           1.2024.108  2024-04-30 14:40:34  1.2024.108  \n",
       "25064               0           1.2024.080  2024-03-30 13:32:33  1.2024.080  \n",
       "133675              0                  NaN  2023-07-25 15:09:50         NaN  "
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = dx.sample(10000)\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "6e8c6af2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-05T12:10:23.436497Z",
     "iopub.status.busy": "2024-06-05T12:10:23.434825Z",
     "iopub.status.idle": "2024-06-05T12:10:23.443193Z",
     "shell.execute_reply": "2024-06-05T12:10:23.441712Z"
    },
    "papermill": {
     "duration": 0.036689,
     "end_time": "2024-06-05T12:10:23.446120",
     "exception": false,
     "start_time": "2024-06-05T12:10:23.409431",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df.rename(columns={'reviewId': 'review_id',\n",
    "                  'userName':'user_name',\n",
    "                  'thumbsUpCount': 'thumbs_up_count',\n",
    "                  'reviewCreatedVersion':'review_created_version',\n",
    "                  'appVersion':'app_version'}, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "e433a31e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-05T12:10:23.495113Z",
     "iopub.status.busy": "2024-06-05T12:10:23.494699Z",
     "iopub.status.idle": "2024-06-05T12:10:23.503145Z",
     "shell.execute_reply": "2024-06-05T12:10:23.501747Z"
    },
    "papermill": {
     "duration": 0.035944,
     "end_time": "2024-06-05T12:10:23.505986",
     "exception": false,
     "start_time": "2024-06-05T12:10:23.470042",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['review_id', 'user_name', 'content', 'score', 'thumbs_up_count',\n",
       "       'review_created_version', 'at', 'app_version'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "e00b73d9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-05T12:10:23.554500Z",
     "iopub.status.busy": "2024-06-05T12:10:23.554051Z",
     "iopub.status.idle": "2024-06-05T12:10:23.562376Z",
     "shell.execute_reply": "2024-06-05T12:10:23.560970Z"
    },
    "papermill": {
     "duration": 0.035966,
     "end_time": "2024-06-05T12:10:23.565321",
     "exception": false,
     "start_time": "2024-06-05T12:10:23.529355",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(10000, 8)"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "378f9a4b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-05T12:10:23.614332Z",
     "iopub.status.busy": "2024-06-05T12:10:23.613432Z",
     "iopub.status.idle": "2024-06-05T12:10:23.646597Z",
     "shell.execute_reply": "2024-06-05T12:10:23.645282Z"
    },
    "papermill": {
     "duration": 0.060995,
     "end_time": "2024-06-05T12:10:23.649806",
     "exception": false,
     "start_time": "2024-06-05T12:10:23.588811",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Index: 10000 entries, 15816 to 77745\n",
      "Data columns (total 8 columns):\n",
      " #   Column                  Non-Null Count  Dtype \n",
      "---  ------                  --------------  ----- \n",
      " 0   review_id               10000 non-null  object\n",
      " 1   user_name               10000 non-null  object\n",
      " 2   content                 10000 non-null  object\n",
      " 3   score                   10000 non-null  int64 \n",
      " 4   thumbs_up_count         10000 non-null  int64 \n",
      " 5   review_created_version  9128 non-null   object\n",
      " 6   at                      10000 non-null  object\n",
      " 7   app_version             9128 non-null   object\n",
      "dtypes: int64(2), object(6)\n",
      "memory usage: 703.1+ KB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "963d735a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-05T12:10:23.700149Z",
     "iopub.status.busy": "2024-06-05T12:10:23.699682Z",
     "iopub.status.idle": "2024-06-05T12:10:23.722270Z",
     "shell.execute_reply": "2024-06-05T12:10:23.720932Z"
    },
    "papermill": {
     "duration": 0.050911,
     "end_time": "2024-06-05T12:10:23.725236",
     "exception": false,
     "start_time": "2024-06-05T12:10:23.674325",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "review_id                   0\n",
       "user_name                   0\n",
       "content                     0\n",
       "score                       0\n",
       "thumbs_up_count             0\n",
       "review_created_version    872\n",
       "at                          0\n",
       "app_version               872\n",
       "dtype: int64"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "1339fee6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-05T12:10:23.774825Z",
     "iopub.status.busy": "2024-06-05T12:10:23.774261Z",
     "iopub.status.idle": "2024-06-05T12:10:23.807131Z",
     "shell.execute_reply": "2024-06-05T12:10:23.805678Z"
    },
    "papermill": {
     "duration": 0.061212,
     "end_time": "2024-06-05T12:10:23.809958",
     "exception": false,
     "start_time": "2024-06-05T12:10:23.748746",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>count</th>\n",
       "      <th>mean</th>\n",
       "      <th>std</th>\n",
       "      <th>min</th>\n",
       "      <th>25%</th>\n",
       "      <th>50%</th>\n",
       "      <th>75%</th>\n",
       "      <th>max</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>score</th>\n",
       "      <td>10000.0</td>\n",
       "      <td>4.5047</td>\n",
       "      <td>1.075776</td>\n",
       "      <td>1.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>thumbs_up_count</th>\n",
       "      <td>10000.0</td>\n",
       "      <td>0.7934</td>\n",
       "      <td>17.487501</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>893.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                   count    mean        std  min  25%  50%  75%    max\n",
       "score            10000.0  4.5047   1.075776  1.0  5.0  5.0  5.0    5.0\n",
       "thumbs_up_count  10000.0  0.7934  17.487501  0.0  0.0  0.0  0.0  893.0"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.describe().T"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "e509e4bd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-05T12:10:23.860157Z",
     "iopub.status.busy": "2024-06-05T12:10:23.859691Z",
     "iopub.status.idle": "2024-06-05T12:10:23.897692Z",
     "shell.execute_reply": "2024-06-05T12:10:23.895777Z"
    },
    "papermill": {
     "duration": 0.06693,
     "end_time": "2024-06-05T12:10:23.901008",
     "exception": false,
     "start_time": "2024-06-05T12:10:23.834078",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df = df.drop_duplicates()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "c92809f2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-05T12:10:23.953670Z",
     "iopub.status.busy": "2024-06-05T12:10:23.953125Z",
     "iopub.status.idle": "2024-06-05T12:10:23.976605Z",
     "shell.execute_reply": "2024-06-05T12:10:23.975128Z"
    },
    "papermill": {
     "duration": 0.055039,
     "end_time": "2024-06-05T12:10:23.980382",
     "exception": false,
     "start_time": "2024-06-05T12:10:23.925343",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df = df.dropna()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "8eef5eea",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-05T12:10:24.032534Z",
     "iopub.status.busy": "2024-06-05T12:10:24.032056Z",
     "iopub.status.idle": "2024-06-05T12:10:24.040136Z",
     "shell.execute_reply": "2024-06-05T12:10:24.038829Z"
    },
    "papermill": {
     "duration": 0.037916,
     "end_time": "2024-06-05T12:10:24.043163",
     "exception": false,
     "start_time": "2024-06-05T12:10:24.005247",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(9103, 8)"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "ce7e0f04",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-05T12:10:24.093791Z",
     "iopub.status.busy": "2024-06-05T12:10:24.092680Z",
     "iopub.status.idle": "2024-06-05T12:10:24.110952Z",
     "shell.execute_reply": "2024-06-05T12:10:24.109287Z"
    },
    "papermill": {
     "duration": 0.046955,
     "end_time": "2024-06-05T12:10:24.114075",
     "exception": false,
     "start_time": "2024-06-05T12:10:24.067120",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>review_id</th>\n",
       "      <th>user_name</th>\n",
       "      <th>content</th>\n",
       "      <th>score</th>\n",
       "      <th>thumbs_up_count</th>\n",
       "      <th>review_created_version</th>\n",
       "      <th>at</th>\n",
       "      <th>app_version</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>15816</th>\n",
       "      <td>2085e016-a045-44a2-9c6d-7fcb13223551</td>\n",
       "      <td>Sachin Kumar</td>\n",
       "      <td>that's very smart</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>1.2024.108</td>\n",
       "      <td>2024-05-18 17:11:52</td>\n",
       "      <td>1.2024.108</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>38158</th>\n",
       "      <td>626def8c-c4f4-4067-8b91-6dd3e119fb83</td>\n",
       "      <td>muhammed lazim</td>\n",
       "      <td>The conversational mode is amazing, thank you ...</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>1.2023.314</td>\n",
       "      <td>2023-11-26 03:10:57</td>\n",
       "      <td>1.2023.314</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>42089</th>\n",
       "      <td>cd4822eb-93d1-417c-b059-6ec48ef1a872</td>\n",
       "      <td>Bongekile Ngwaqa</td>\n",
       "      <td>useful and reliable ‚ú®Ô∏è</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>1.2024.108</td>\n",
       "      <td>2024-04-30 14:40:34</td>\n",
       "      <td>1.2024.108</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25064</th>\n",
       "      <td>aca09cd0-93de-4708-976d-97ed347b1054</td>\n",
       "      <td>XBreanna KillamX</td>\n",
       "      <td>The app opens but doesn't display anything for...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1.2024.080</td>\n",
       "      <td>2024-03-30 13:32:33</td>\n",
       "      <td>1.2024.080</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>771</th>\n",
       "      <td>e2650a74-af00-46f0-93e0-a25836b4d69d</td>\n",
       "      <td>Abhishek Ram</td>\n",
       "      <td>best üíØüí•ü´Ö</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>1.2024.143</td>\n",
       "      <td>2024-06-02 16:24:03</td>\n",
       "      <td>1.2024.143</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                  review_id         user_name  \\\n",
       "15816  2085e016-a045-44a2-9c6d-7fcb13223551      Sachin Kumar   \n",
       "38158  626def8c-c4f4-4067-8b91-6dd3e119fb83    muhammed lazim   \n",
       "42089  cd4822eb-93d1-417c-b059-6ec48ef1a872  Bongekile Ngwaqa   \n",
       "25064  aca09cd0-93de-4708-976d-97ed347b1054  XBreanna KillamX   \n",
       "771    e2650a74-af00-46f0-93e0-a25836b4d69d      Abhishek Ram   \n",
       "\n",
       "                                                 content  score  \\\n",
       "15816                                  that's very smart      5   \n",
       "38158  The conversational mode is amazing, thank you ...      5   \n",
       "42089                             useful and reliable ‚ú®Ô∏è      5   \n",
       "25064  The app opens but doesn't display anything for...      1   \n",
       "771                                             best üíØüí•ü´Ö      5   \n",
       "\n",
       "       thumbs_up_count review_created_version                   at app_version  \n",
       "15816                0             1.2024.108  2024-05-18 17:11:52  1.2024.108  \n",
       "38158                0             1.2023.314  2023-11-26 03:10:57  1.2023.314  \n",
       "42089                0             1.2024.108  2024-04-30 14:40:34  1.2024.108  \n",
       "25064                0             1.2024.080  2024-03-30 13:32:33  1.2024.080  \n",
       "771                  0             1.2024.143  2024-06-02 16:24:03  1.2024.143  "
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "dccb6ce9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-05T12:10:24.164498Z",
     "iopub.status.busy": "2024-06-05T12:10:24.164043Z",
     "iopub.status.idle": "2024-06-05T12:10:24.176460Z",
     "shell.execute_reply": "2024-06-05T12:10:24.174991Z"
    },
    "papermill": {
     "duration": 0.040939,
     "end_time": "2024-06-05T12:10:24.179318",
     "exception": false,
     "start_time": "2024-06-05T12:10:24.138379",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "score\n",
       "5    6989\n",
       "4    1123\n",
       "1     471\n",
       "3     377\n",
       "2     143\n",
       "Name: count, dtype: int64"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['score'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "5d0322c3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-05T12:10:24.232154Z",
     "iopub.status.busy": "2024-06-05T12:10:24.231705Z",
     "iopub.status.idle": "2024-06-05T12:10:24.242786Z",
     "shell.execute_reply": "2024-06-05T12:10:24.241496Z"
    },
    "papermill": {
     "duration": 0.040609,
     "end_time": "2024-06-05T12:10:24.245230",
     "exception": false,
     "start_time": "2024-06-05T12:10:24.204621",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "thumbs_up_count\n",
       "0      8758\n",
       "1       194\n",
       "2        47\n",
       "3        16\n",
       "9         7\n",
       "4         6\n",
       "5         6\n",
       "6         5\n",
       "10        5\n",
       "7         4\n",
       "8         4\n",
       "11        3\n",
       "14        3\n",
       "13        2\n",
       "20        2\n",
       "60        2\n",
       "435       1\n",
       "479       1\n",
       "48        1\n",
       "43        1\n",
       "422       1\n",
       "79        1\n",
       "111       1\n",
       "28        1\n",
       "17        1\n",
       "122       1\n",
       "152       1\n",
       "68        1\n",
       "12        1\n",
       "249       1\n",
       "16        1\n",
       "277       1\n",
       "36        1\n",
       "24        1\n",
       "50        1\n",
       "85        1\n",
       "29        1\n",
       "503       1\n",
       "65        1\n",
       "744       1\n",
       "151       1\n",
       "344       1\n",
       "18        1\n",
       "53        1\n",
       "893       1\n",
       "91        1\n",
       "25        1\n",
       "30        1\n",
       "535       1\n",
       "150       1\n",
       "339       1\n",
       "15        1\n",
       "214       1\n",
       "64        1\n",
       "39        1\n",
       "Name: count, dtype: int64"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['thumbs_up_count'].value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "718b308f",
   "metadata": {
    "papermill": {
     "duration": 0.128659,
     "end_time": "2024-06-05T12:10:24.398639",
     "exception": false,
     "start_time": "2024-06-05T12:10:24.269980",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Data Viz ##"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "00ba0b74",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-05T12:10:24.450266Z",
     "iopub.status.busy": "2024-06-05T12:10:24.449851Z",
     "iopub.status.idle": "2024-06-05T12:10:25.085692Z",
     "shell.execute_reply": "2024-06-05T12:10:25.083974Z"
    },
    "papermill": {
     "duration": 0.664968,
     "end_time": "2024-06-05T12:10:25.088789",
     "exception": false,
     "start_time": "2024-06-05T12:10:24.423821",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1500x500 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "df.hist(figsize=(15,5))\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "9635e332",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-05T12:10:25.144224Z",
     "iopub.status.busy": "2024-06-05T12:10:25.143161Z",
     "iopub.status.idle": "2024-06-05T12:10:25.473399Z",
     "shell.execute_reply": "2024-06-05T12:10:25.472039Z"
    },
    "papermill": {
     "duration": 0.36146,
     "end_time": "2024-06-05T12:10:25.477077",
     "exception": false,
     "start_time": "2024-06-05T12:10:25.115617",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.scatterplot(x = 'score', y='thumbs_up_count',data=df)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "34da7521",
   "metadata": {
    "papermill": {
     "duration": 0.026817,
     "end_time": "2024-06-05T12:10:25.531711",
     "exception": false,
     "start_time": "2024-06-05T12:10:25.504894",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Feature Engineering ##"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "53e98655",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-05T12:10:25.589588Z",
     "iopub.status.busy": "2024-06-05T12:10:25.589083Z",
     "iopub.status.idle": "2024-06-05T12:10:25.599978Z",
     "shell.execute_reply": "2024-06-05T12:10:25.598664Z"
    },
    "papermill": {
     "duration": 0.044801,
     "end_time": "2024-06-05T12:10:25.602984",
     "exception": false,
     "start_time": "2024-06-05T12:10:25.558183",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df.drop(columns=['review_id','user_name','at'], inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "1fc8449f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-05T12:10:25.661769Z",
     "iopub.status.busy": "2024-06-05T12:10:25.661198Z",
     "iopub.status.idle": "2024-06-05T12:10:25.678553Z",
     "shell.execute_reply": "2024-06-05T12:10:25.676916Z"
    },
    "papermill": {
     "duration": 0.04995,
     "end_time": "2024-06-05T12:10:25.681875",
     "exception": false,
     "start_time": "2024-06-05T12:10:25.631925",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>content</th>\n",
       "      <th>score</th>\n",
       "      <th>thumbs_up_count</th>\n",
       "      <th>review_created_version</th>\n",
       "      <th>app_version</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>15816</th>\n",
       "      <td>that's very smart</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>1.2024.108</td>\n",
       "      <td>1.2024.108</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>38158</th>\n",
       "      <td>The conversational mode is amazing, thank you ...</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>1.2023.314</td>\n",
       "      <td>1.2023.314</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>42089</th>\n",
       "      <td>useful and reliable ‚ú®Ô∏è</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>1.2024.108</td>\n",
       "      <td>1.2024.108</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25064</th>\n",
       "      <td>The app opens but doesn't display anything for...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1.2024.080</td>\n",
       "      <td>1.2024.080</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>771</th>\n",
       "      <td>best üíØüí•ü´Ö</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>1.2024.143</td>\n",
       "      <td>1.2024.143</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                 content  score  \\\n",
       "15816                                  that's very smart      5   \n",
       "38158  The conversational mode is amazing, thank you ...      5   \n",
       "42089                             useful and reliable ‚ú®Ô∏è      5   \n",
       "25064  The app opens but doesn't display anything for...      1   \n",
       "771                                             best üíØüí•ü´Ö      5   \n",
       "\n",
       "       thumbs_up_count review_created_version app_version  \n",
       "15816                0             1.2024.108  1.2024.108  \n",
       "38158                0             1.2023.314  1.2023.314  \n",
       "42089                0             1.2024.108  1.2024.108  \n",
       "25064                0             1.2024.080  1.2024.080  \n",
       "771                  0             1.2024.143  1.2024.143  "
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2a3f0d7f",
   "metadata": {
    "papermill": {
     "duration": 0.026784,
     "end_time": "2024-06-05T12:10:25.741335",
     "exception": false,
     "start_time": "2024-06-05T12:10:25.714551",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Encoding ##"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "6ffd6883",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-05T12:10:25.801359Z",
     "iopub.status.busy": "2024-06-05T12:10:25.800862Z",
     "iopub.status.idle": "2024-06-05T12:10:25.815324Z",
     "shell.execute_reply": "2024-06-05T12:10:25.813249Z"
    },
    "papermill": {
     "duration": 0.048479,
     "end_time": "2024-06-05T12:10:25.819021",
     "exception": false,
     "start_time": "2024-06-05T12:10:25.770542",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "le = LabelEncoder()\n",
    "df['review_created_version'] = le.fit_transform(df['review_created_version'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "310f0d92",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-05T12:10:25.885533Z",
     "iopub.status.busy": "2024-06-05T12:10:25.884950Z",
     "iopub.status.idle": "2024-06-05T12:10:25.899440Z",
     "shell.execute_reply": "2024-06-05T12:10:25.897650Z"
    },
    "papermill": {
     "duration": 0.049497,
     "end_time": "2024-06-05T12:10:25.902858",
     "exception": false,
     "start_time": "2024-06-05T12:10:25.853361",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "oe = OrdinalEncoder()\n",
    "df['app_version'] = oe.fit_transform(df[['app_version']]) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "a1709ef1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-05T12:10:25.959294Z",
     "iopub.status.busy": "2024-06-05T12:10:25.958903Z",
     "iopub.status.idle": "2024-06-05T12:10:25.974447Z",
     "shell.execute_reply": "2024-06-05T12:10:25.973138Z"
    },
    "papermill": {
     "duration": 0.046344,
     "end_time": "2024-06-05T12:10:25.977095",
     "exception": false,
     "start_time": "2024-06-05T12:10:25.930751",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>content</th>\n",
       "      <th>score</th>\n",
       "      <th>thumbs_up_count</th>\n",
       "      <th>review_created_version</th>\n",
       "      <th>app_version</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>15816</th>\n",
       "      <td>that's very smart</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>46</td>\n",
       "      <td>46.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>38158</th>\n",
       "      <td>The conversational mode is amazing, thank you ...</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>23</td>\n",
       "      <td>23.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>42089</th>\n",
       "      <td>useful and reliable ‚ú®Ô∏è</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>46</td>\n",
       "      <td>46.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25064</th>\n",
       "      <td>The app opens but doesn't display anything for...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>42</td>\n",
       "      <td>42.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>771</th>\n",
       "      <td>best üíØüí•ü´Ö</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>54</td>\n",
       "      <td>54.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                 content  score  \\\n",
       "15816                                  that's very smart      5   \n",
       "38158  The conversational mode is amazing, thank you ...      5   \n",
       "42089                             useful and reliable ‚ú®Ô∏è      5   \n",
       "25064  The app opens but doesn't display anything for...      1   \n",
       "771                                             best üíØüí•ü´Ö      5   \n",
       "\n",
       "       thumbs_up_count  review_created_version  app_version  \n",
       "15816                0                      46         46.0  \n",
       "38158                0                      23         23.0  \n",
       "42089                0                      46         46.0  \n",
       "25064                0                      42         42.0  \n",
       "771                  0                      54         54.0  "
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "531a1b6e",
   "metadata": {
    "papermill": {
     "duration": 0.027455,
     "end_time": "2024-06-05T12:10:26.031792",
     "exception": false,
     "start_time": "2024-06-05T12:10:26.004337",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Applying NLP to Analyze Content ##"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "8b9a5f3c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-05T12:10:26.091262Z",
     "iopub.status.busy": "2024-06-05T12:10:26.089698Z",
     "iopub.status.idle": "2024-06-05T12:10:26.106078Z",
     "shell.execute_reply": "2024-06-05T12:10:26.104155Z"
    },
    "papermill": {
     "duration": 0.048716,
     "end_time": "2024-06-05T12:10:26.109031",
     "exception": false,
     "start_time": "2024-06-05T12:10:26.060315",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "15816                                    that's very smart\n",
       "38158    The conversational mode is amazing, thank you ...\n",
       "42089                               useful and reliable ‚ú®Ô∏è\n",
       "25064    The app opens but doesn't display anything for...\n",
       "771                                               best üíØüí•ü´Ö\n",
       "                               ...                        \n",
       "17126    the most recent update took away the conversat...\n",
       "42524    the best app ever like it helps me out on almo...\n",
       "80238                                  very good very najs\n",
       "70302                           It is too fast. I like it.\n",
       "77745    You already have my Google account, I don't ha...\n",
       "Name: content, Length: 9103, dtype: object"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['content']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "8469a5cb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-05T12:10:26.165253Z",
     "iopub.status.busy": "2024-06-05T12:10:26.164755Z",
     "iopub.status.idle": "2024-06-05T12:10:26.186835Z",
     "shell.execute_reply": "2024-06-05T12:10:26.185029Z"
    },
    "papermill": {
     "duration": 0.054377,
     "end_time": "2024-06-05T12:10:26.190305",
     "exception": false,
     "start_time": "2024-06-05T12:10:26.135928",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "15816                                    that's very smart\n",
       "38158    the conversational mode is amazing, thank you ...\n",
       "42089                               useful and reliable ‚ú®Ô∏è\n",
       "25064    the app opens but doesn't display anything for...\n",
       "771                                               best üíØüí•ü´Ö\n",
       "                               ...                        \n",
       "17126    the most recent update took away the conversat...\n",
       "42524    the best app ever like it helps me out on almo...\n",
       "80238                                  very good very najs\n",
       "70302                           it is too fast. i like it.\n",
       "77745    you already have my google account, i don't ha...\n",
       "Name: content, Length: 9103, dtype: object"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['content'] = df['content'].str.lower()\n",
    "df['content']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "ecb3e396",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-05T12:10:26.249229Z",
     "iopub.status.busy": "2024-06-05T12:10:26.248724Z",
     "iopub.status.idle": "2024-06-05T12:10:26.281123Z",
     "shell.execute_reply": "2024-06-05T12:10:26.279661Z"
    },
    "papermill": {
     "duration": 0.064521,
     "end_time": "2024-06-05T12:10:26.284138",
     "exception": false,
     "start_time": "2024-06-05T12:10:26.219617",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "15816                                     that's very smart\n",
       "38158     the conversational mode is amazing, thank you ...\n",
       "42089                                useful and reliable ‚ú®Ô∏è\n",
       "25064     the app opens but doesn't display anything for...\n",
       "771                                                best üíØüí•ü´Ö\n",
       "112217                                        good platform\n",
       "94531                                          very helpful\n",
       "26870     it,s amazing i love it but one problem i feel ...\n",
       "24243     unable to use the app, getting error \"request ...\n",
       "5482                                    it's improving guys\n",
       "93667                                                  good\n",
       "42122                         it is a best app for learning\n",
       "126190                                              awesome\n",
       "33284                     need to be more fast and accurate\n",
       "71516     nice app. this app will help everyone for lear...\n",
       "73757               source of information and productivity.\n",
       "123929    ‡¶è‡¶ü‡¶ø ‡¶Æ‡¶æ‡¶®‡ßÅ‡¶∑‡ßá‡¶∞ ‡¶Æ‡¶∏‡ßç‡¶§‡¶ø‡¶∑‡ßç‡¶ï‡ßá‡¶∞ ‡¶¶‡ßç‡¶¨‡¶æ‡¶∞‡¶æ‡¶á ‡¶ï‡ßá‡¶¨‡¶≤ ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ ‡¶è‡¶ï‡¶ü‡¶æ...\n",
       "3981                                              great app\n",
       "119425                                                 good\n",
       "85438                                         best app ever\n",
       "Name: content, dtype: object"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def remove_html_tags(text):\n",
    "    clean_text = re.sub('<.*>', '', text)\n",
    "    return clean_text\n",
    "\n",
    "df['content'] = df['content'].apply(remove_html_tags)\n",
    "df['content'].head(20)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "16f9cae3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-05T12:10:26.344066Z",
     "iopub.status.busy": "2024-06-05T12:10:26.343527Z",
     "iopub.status.idle": "2024-06-05T12:10:26.408064Z",
     "shell.execute_reply": "2024-06-05T12:10:26.406534Z"
    },
    "papermill": {
     "duration": 0.097242,
     "end_time": "2024-06-05T12:10:26.411440",
     "exception": false,
     "start_time": "2024-06-05T12:10:26.314198",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "15816                                     that's very smart\n",
       "38158     the conversational mode is amazing, thank you ...\n",
       "42089                                useful and reliable ‚ú®Ô∏è\n",
       "25064     the app opens but doesn't display anything for...\n",
       "771                                                best üíØüí•ü´Ö\n",
       "112217                                        good platform\n",
       "94531                                          very helpful\n",
       "26870     it,s amazing i love it but one problem i feel ...\n",
       "24243     unable to use the app, getting error \"request ...\n",
       "5482                                    it's improving guys\n",
       "93667                                                  good\n",
       "42122                         it is a best app for learning\n",
       "126190                                              awesome\n",
       "33284                     need to be more fast and accurate\n",
       "71516     nice app. this app will help everyone for lear...\n",
       "73757               source of information and productivity.\n",
       "123929    ‡¶è‡¶ü‡¶ø ‡¶Æ‡¶æ‡¶®‡ßÅ‡¶∑‡ßá‡¶∞ ‡¶Æ‡¶∏‡ßç‡¶§‡¶ø‡¶∑‡ßç‡¶ï‡ßá‡¶∞ ‡¶¶‡ßç‡¶¨‡¶æ‡¶∞‡¶æ‡¶á ‡¶ï‡ßá‡¶¨‡¶≤ ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ ‡¶è‡¶ï‡¶ü‡¶æ...\n",
       "3981                                              great app\n",
       "119425                                                 good\n",
       "85438                                         best app ever\n",
       "Name: content, dtype: object"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def remove_urls(text):\n",
    "    url_pattern = re.compile(r'https?://\\S+|www\\.\\S+')\n",
    "    clean_text = re.sub(url_pattern, '', text)\n",
    "    return clean_text\n",
    "\n",
    "df['content'] = df['content'].apply(remove_urls)\n",
    "df['content'].head(20)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "1e64deeb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-05T12:10:26.474356Z",
     "iopub.status.busy": "2024-06-05T12:10:26.473928Z",
     "iopub.status.idle": "2024-06-05T12:10:26.534914Z",
     "shell.execute_reply": "2024-06-05T12:10:26.533814Z"
    },
    "papermill": {
     "duration": 0.09507,
     "end_time": "2024-06-05T12:10:26.537610",
     "exception": false,
     "start_time": "2024-06-05T12:10:26.442540",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "15816                                      thats very smart\n",
       "38158     the conversational mode is amazing thank you f...\n",
       "42089                                useful and reliable ‚ú®Ô∏è\n",
       "25064     the app opens but doesnt display anything for ...\n",
       "771                                                best üíØüí•ü´Ö\n",
       "112217                                        good platform\n",
       "94531                                          very helpful\n",
       "26870     its amazing i love it but one problem i feel l...\n",
       "24243     unable to use the app getting error request no...\n",
       "5482                                     its improving guys\n",
       "93667                                                  good\n",
       "42122                         it is a best app for learning\n",
       "126190                                              awesome\n",
       "33284                     need to be more fast and accurate\n",
       "71516     nice app this app will help everyone for learn...\n",
       "73757                source of information and productivity\n",
       "123929    ‡¶è‡¶ü‡¶ø ‡¶Æ‡¶æ‡¶®‡ßÅ‡¶∑‡ßá‡¶∞ ‡¶Æ‡¶∏‡ßç‡¶§‡¶ø‡¶∑‡ßç‡¶ï‡ßá‡¶∞ ‡¶¶‡ßç‡¶¨‡¶æ‡¶∞‡¶æ‡¶á ‡¶ï‡ßá‡¶¨‡¶≤ ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ ‡¶è‡¶ï‡¶ü‡¶æ...\n",
       "3981                                              great app\n",
       "119425                                                 good\n",
       "85438                                         best app ever\n",
       "Name: content, dtype: object"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def remove_punc(text):\n",
    "    punc = string.punctuation\n",
    "    clean_text = text.translate(str.maketrans('','', punc))\n",
    "    return clean_text\n",
    "\n",
    "df['content'] = df['content'].apply(remove_punc)\n",
    "df['content'].head(20)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "a6f9bc66",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-05T12:10:26.596369Z",
     "iopub.status.busy": "2024-06-05T12:10:26.595888Z",
     "iopub.status.idle": "2024-06-05T12:10:26.669647Z",
     "shell.execute_reply": "2024-06-05T12:10:26.668437Z"
    },
    "papermill": {
     "duration": 0.106491,
     "end_time": "2024-06-05T12:10:26.672780",
     "exception": false,
     "start_time": "2024-06-05T12:10:26.566289",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "15816                                      thats very smart\n",
       "38158     the conversational mode is amazing thank you f...\n",
       "42089                                useful and reliable ‚ú®Ô∏è\n",
       "25064     the app opens but doesnt display anything for ...\n",
       "771                                                best üíØüí•ü´Ö\n",
       "112217                                        good platform\n",
       "94531                                          very helpful\n",
       "26870     its amazing i love it but one problem i feel l...\n",
       "24243     unable to use the app getting error request no...\n",
       "5482                                     its improving guys\n",
       "93667                                                  good\n",
       "42122                         it is a best app for learning\n",
       "126190                                              awesome\n",
       "33284                     need to be more fast and accurate\n",
       "71516     nice app this app will help everyone for learn...\n",
       "73757                source of information and productivity\n",
       "123929    ‡¶è‡¶ü‡¶ø ‡¶Æ‡¶æ‡¶®‡ßÅ‡¶∑‡ßá‡¶∞ ‡¶Æ‡¶∏‡ßç‡¶§‡¶ø‡¶∑‡ßç‡¶ï‡ßá‡¶∞ ‡¶¶‡ßç‡¶¨‡¶æ‡¶∞‡¶æ‡¶á ‡¶ï‡ßá‡¶¨‡¶≤ ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ ‡¶è‡¶ï‡¶ü‡¶æ...\n",
       "3981                                              great app\n",
       "119425                                                 good\n",
       "85438                                         best app ever\n",
       "Name: content, dtype: object"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "chat_words_mapping = {\n",
    "    \"lol\": \"laughing out loud\",\n",
    "    \"brb\": \"be right back\",\n",
    "    \"btw\": \"by the way\",\n",
    "    \"afk\": \"away from keyboard\",\n",
    "    \"rofl\": \"rolling on the floor laughing\",\n",
    "    \"ttyl\": \"talk to you later\",\n",
    "    \"np\": \"no problem\",\n",
    "    \"thx\": \"thanks\",\n",
    "    \"omg\": \"oh my god\",\n",
    "    \"idk\": \"I don't know\",\n",
    "    \"np\": \"no problem\",\n",
    "    \"gg\": \"good game\",\n",
    "    \"g2g\": \"got to go\",\n",
    "    \"b4\": \"before\",\n",
    "    \"cu\": \"see you\",\n",
    "    \"yw\": \"you're welcome\",\n",
    "    \"wtf\": \"what the f*ck\",\n",
    "    \"imho\": \"in my humble opinion\",\n",
    "    \"jk\": \"just kidding\",\n",
    "    \"gf\": \"girlfriend\",\n",
    "    \"bf\": \"boyfriend\",\n",
    "    \"u\": \"you\",\n",
    "    \"r\": \"are\",\n",
    "    \"2\": \"to\",\n",
    "    \"4\": \"for\",\n",
    "    \"b\": \"be\",\n",
    "    \"c\": \"see\",\n",
    "    \"y\": \"why\",\n",
    "    \"tho\": \"though\",\n",
    "    \"smh\": \"shaking my head\",\n",
    "    \"lolz\": \"laughing out loud\",\n",
    "    \"h8\": \"hate\",\n",
    "    \"luv\": \"love\",\n",
    "    \"pls\": \"please\",\n",
    "    \"sry\": \"sorry\",\n",
    "    \"tbh\": \"to be honest\",\n",
    "    \"omw\": \"on my way\",\n",
    "    \"omw2syg\": \"on my way to see your girlfriend\",\n",
    "}\n",
    "\n",
    "def expand_chat_words(text):\n",
    "    words = text.split()\n",
    "    expanded_words = [chat_words_mapping.get(word.lower(), word) for word in words]\n",
    "    return ' '.join(expanded_words)\n",
    "\n",
    "df['content'] = df['content'].apply(expand_chat_words)\n",
    "df['content'].head(20)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "14f34d89",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-05T12:10:26.732230Z",
     "iopub.status.busy": "2024-06-05T12:10:26.731724Z",
     "iopub.status.idle": "2024-06-05T12:10:26.738942Z",
     "shell.execute_reply": "2024-06-05T12:10:26.737657Z"
    },
    "papermill": {
     "duration": 0.04069,
     "end_time": "2024-06-05T12:10:26.741724",
     "exception": false,
     "start_time": "2024-06-05T12:10:26.701034",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def remove_stop_words(text):\n",
    "    tokens = nltk.word_tokenize(text)\n",
    "    stop_words = set(stopwords.words('english'))\n",
    "    filtered_tokens = [token for token in tokens if token not in stop_words]\n",
    "    preprocessed_text = ''.join(filtered_tokens)\n",
    "    return preprocessed_text"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "897536a9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-05T12:10:26.800192Z",
     "iopub.status.busy": "2024-06-05T12:10:26.799673Z",
     "iopub.status.idle": "2024-06-05T12:10:30.292078Z",
     "shell.execute_reply": "2024-06-05T12:10:30.290694Z"
    },
    "papermill": {
     "duration": 3.524702,
     "end_time": "2024-06-05T12:10:30.295500",
     "exception": false,
     "start_time": "2024-06-05T12:10:26.770798",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "15816                                           thatssmart\n",
       "38158    conversationalmodeamazingthankincludingfreever...\n",
       "42089                                     usefulreliable‚ú®Ô∏è\n",
       "25064    appopensdoesntdisplayanythingsecondssayserrort...\n",
       "771                                                bestüíØüí•ü´Ö\n",
       "                               ...                        \n",
       "17126               recentupdatetookawayconversationoption\n",
       "42524            bestappeverlikehelpsalmosteverythingkudos\n",
       "80238                                             goodnajs\n",
       "70302                                             fastlike\n",
       "77745      alreadygoogleaccountdontcellphonenumbergivewell\n",
       "Name: content, Length: 9103, dtype: object"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['content'] = df['content'].apply(remove_stop_words)\n",
    "df['content']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "d9fb3a38",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-05T12:10:30.364289Z",
     "iopub.status.busy": "2024-06-05T12:10:30.363520Z",
     "iopub.status.idle": "2024-06-05T12:10:30.377169Z",
     "shell.execute_reply": "2024-06-05T12:10:30.374398Z"
    },
    "papermill": {
     "duration": 0.054153,
     "end_time": "2024-06-05T12:10:30.382210",
     "exception": false,
     "start_time": "2024-06-05T12:10:30.328057",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def replace_emojis_with_meanings(text):\n",
    "    def replace(match):\n",
    "        emoji_char = match.group()\n",
    "        emoji_meaning = emoji.demojize(emoji_char)\n",
    "        return emoji_meaning\n",
    "\n",
    "    emoji_pattern = re.compile(\"[\"\n",
    "                            u\"\\U0001F600-\\U0001F64F\"\n",
    "                            u\"\\U0001F300-\\U0001F5FF\"\n",
    "                            u\"\\U0001F680-\\U0001F6FF\"\n",
    "                            u\"\\U0001F1E0-\\U0001F1FF\"\n",
    "                            u\"\\U00002500-\\U00002BEF\"\n",
    "                            u\"\\U00002702-\\U000027B0\"\n",
    "                            u\"\\U00002702-\\U000027B0\"\n",
    "                            u\"\\U000024C2-\\U0001F251\"\n",
    "                            u\"\\U0001f926-\\U0001f937\"\n",
    "                            u\"\\U00010000-\\U0010ffff\"\n",
    "                            u\"\\u2640-\\u2642\"\n",
    "                            u\"\\u2600-\\u2B55\"\n",
    "                            u\"\\u200d\"\n",
    "                            u\"\\u23cf\"\n",
    "                            u\"\\u23e9\"\n",
    "                            u\"\\u231a\"\n",
    "                            u\"\\ufe0f\"\n",
    "                            u\"\\u3030\"\n",
    "                            \"]+\", flags=re.UNICODE)\n",
    "    text_with_meanings = emoji_pattern.sub(replace, text)\n",
    "    return text_with_meanings"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "278557ee",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-05T12:10:30.443465Z",
     "iopub.status.busy": "2024-06-05T12:10:30.443046Z",
     "iopub.status.idle": "2024-06-05T12:10:30.553782Z",
     "shell.execute_reply": "2024-06-05T12:10:30.552085Z"
    },
    "papermill": {
     "duration": 0.145161,
     "end_time": "2024-06-05T12:10:30.557966",
     "exception": false,
     "start_time": "2024-06-05T12:10:30.412805",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "15816                                           thatssmart\n",
       "38158    conversationalmodeamazingthankincludingfreever...\n",
       "42089                             usefulreliable:sparkles:\n",
       "25064    appopensdoesntdisplayanythingsecondssayserrort...\n",
       "771      best:hundred_points::collision::person_with_cr...\n",
       "                               ...                        \n",
       "17126               recentupdatetookawayconversationoption\n",
       "42524            bestappeverlikehelpsalmosteverythingkudos\n",
       "80238                                             goodnajs\n",
       "70302                                             fastlike\n",
       "77745      alreadygoogleaccountdontcellphonenumbergivewell\n",
       "Name: content, Length: 9103, dtype: object"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['content'] = df['content'].apply(replace_emojis_with_meanings)\n",
    "df['content']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "0ca3dc66",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-05T12:10:30.616470Z",
     "iopub.status.busy": "2024-06-05T12:10:30.616079Z",
     "iopub.status.idle": "2024-06-05T12:10:30.622784Z",
     "shell.execute_reply": "2024-06-05T12:10:30.620877Z"
    },
    "papermill": {
     "duration": 0.039469,
     "end_time": "2024-06-05T12:10:30.625839",
     "exception": false,
     "start_time": "2024-06-05T12:10:30.586370",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def word_tokenization(text):\n",
    "    return nltk.word_tokenize(text)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "60cd1654",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-05T12:10:30.689063Z",
     "iopub.status.busy": "2024-06-05T12:10:30.688489Z",
     "iopub.status.idle": "2024-06-05T12:10:32.719411Z",
     "shell.execute_reply": "2024-06-05T12:10:32.718215Z"
    },
    "papermill": {
     "duration": 2.067924,
     "end_time": "2024-06-05T12:10:32.722235",
     "exception": false,
     "start_time": "2024-06-05T12:10:30.654311",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "15816                                         [thatssmart]\n",
       "38158    [conversationalmodeamazingthankincludingfreeve...\n",
       "42089                     [usefulreliable, :, sparkles, :]\n",
       "25064    [appopensdoesntdisplayanythingsecondssayserror...\n",
       "771      [best, :, hundred_points, :, :collision, :, :p...\n",
       "                               ...                        \n",
       "17126             [recentupdatetookawayconversationoption]\n",
       "42524          [bestappeverlikehelpsalmosteverythingkudos]\n",
       "80238                                           [goodnajs]\n",
       "70302                                           [fastlike]\n",
       "77745    [alreadygoogleaccountdontcellphonenumbergivewell]\n",
       "Name: token_content, Length: 9103, dtype: object"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['token_content'] = df['content'].apply(word_tokenization)\n",
    "df['token_content']"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6a118c39",
   "metadata": {
    "papermill": {
     "duration": 0.029708,
     "end_time": "2024-06-05T12:10:32.782773",
     "exception": false,
     "start_time": "2024-06-05T12:10:32.753065",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Part of Speech Tagging (POS Tagging) ##"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "ec859ac6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-05T12:10:32.847062Z",
     "iopub.status.busy": "2024-06-05T12:10:32.845369Z",
     "iopub.status.idle": "2024-06-05T12:10:41.505759Z",
     "shell.execute_reply": "2024-06-05T12:10:41.503151Z"
    },
    "papermill": {
     "duration": 8.697031,
     "end_time": "2024-06-05T12:10:41.509923",
     "exception": false,
     "start_time": "2024-06-05T12:10:32.812892",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| 183/183 [00:07<00:00, 25.80it/s]\n"
     ]
    }
   ],
   "source": [
    "nlp = spacy.load('en_core_web_sm', disable=['ner', 'textcat'])\n",
    "\n",
    "def batch_pos_tagging(texts):\n",
    "    docs = list(nlp.pipe(texts, batch_size=50))\n",
    "    return [[(token.text, token.pos_) for token in doc] for doc in docs]\n",
    "\n",
    "batch_size = 50\n",
    "num_batches = len(df) // batch_size + 1\n",
    "\n",
    "pos_tags = []\n",
    "for i in tqdm(range(num_batches)):\n",
    "    start = i * batch_size\n",
    "    end = start + batch_size\n",
    "    batch_texts = df['content'][start:end].tolist()\n",
    "    pos_tags.extend(batch_pos_tagging(batch_texts))\n",
    "\n",
    "df['POS_Tags'] = pos_tags"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "c6181f8d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-05T12:10:41.587954Z",
     "iopub.status.busy": "2024-06-05T12:10:41.587202Z",
     "iopub.status.idle": "2024-06-05T12:10:41.598205Z",
     "shell.execute_reply": "2024-06-05T12:10:41.596683Z"
    },
    "papermill": {
     "duration": 0.053168,
     "end_time": "2024-06-05T12:10:41.601713",
     "exception": false,
     "start_time": "2024-06-05T12:10:41.548545",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df.rename(columns={'POS_Tags': 'pos_tags'}, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "5f4a0157",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-05T12:10:41.685340Z",
     "iopub.status.busy": "2024-06-05T12:10:41.684928Z",
     "iopub.status.idle": "2024-06-05T12:10:41.704319Z",
     "shell.execute_reply": "2024-06-05T12:10:41.702907Z"
    },
    "papermill": {
     "duration": 0.059856,
     "end_time": "2024-06-05T12:10:41.707215",
     "exception": false,
     "start_time": "2024-06-05T12:10:41.647359",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "15816                                 [(thatssmart, VERB)]\n",
       "38158    [(conversationalmodeamazingthankincludingfreev...\n",
       "42089    [(usefulreliable, ADJ), (:, PUNCT), (sparkles,...\n",
       "25064    [(appopensdoesntdisplayanythingsecondssayserro...\n",
       "771      [(best, ADJ), (:, PUNCT), (hundred_points::col...\n",
       "                               ...                        \n",
       "17126     [(recentupdatetookawayconversationoption, NOUN)]\n",
       "42524    [(bestappeverlikehelpsalmosteverythingkudos, N...\n",
       "80238                                   [(goodnajs, NOUN)]\n",
       "70302                                   [(fastlike, VERB)]\n",
       "77745    [(alreadygoogleaccountdontcellphonenumbergivew...\n",
       "Name: pos_tags, Length: 9103, dtype: object"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['pos_tags']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "fec70116",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-05T12:10:41.779444Z",
     "iopub.status.busy": "2024-06-05T12:10:41.779032Z",
     "iopub.status.idle": "2024-06-05T12:10:41.831407Z",
     "shell.execute_reply": "2024-06-05T12:10:41.829746Z"
    },
    "papermill": {
     "duration": 0.092392,
     "end_time": "2024-06-05T12:10:41.834375",
     "exception": false,
     "start_time": "2024-06-05T12:10:41.741983",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>content</th>\n",
       "      <th>score</th>\n",
       "      <th>thumbs_up_count</th>\n",
       "      <th>review_created_version</th>\n",
       "      <th>app_version</th>\n",
       "      <th>token_content</th>\n",
       "      <th>pos_tags</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>15816</th>\n",
       "      <td>thatssmart</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>46</td>\n",
       "      <td>46.0</td>\n",
       "      <td>[thatssmart]</td>\n",
       "      <td>[(thatssmart, VERB)]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>38158</th>\n",
       "      <td>conversationalmodeamazingthankincludingfreever...</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>23</td>\n",
       "      <td>23.0</td>\n",
       "      <td>[conversationalmodeamazingthankincludingfreeve...</td>\n",
       "      <td>[(conversationalmodeamazingthankincludingfreev...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>42089</th>\n",
       "      <td>usefulreliable:sparkles:</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>46</td>\n",
       "      <td>46.0</td>\n",
       "      <td>[usefulreliable, :, sparkles, :]</td>\n",
       "      <td>[(usefulreliable, ADJ), (:, PUNCT), (sparkles,...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25064</th>\n",
       "      <td>appopensdoesntdisplayanythingsecondssayserrort...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>42</td>\n",
       "      <td>42.0</td>\n",
       "      <td>[appopensdoesntdisplayanythingsecondssayserror...</td>\n",
       "      <td>[(appopensdoesntdisplayanythingsecondssayserro...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>771</th>\n",
       "      <td>best:hundred_points::collision::person_with_cr...</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>54</td>\n",
       "      <td>54.0</td>\n",
       "      <td>[best, :, hundred_points, :, :collision, :, :p...</td>\n",
       "      <td>[(best, ADJ), (:, PUNCT), (hundred_points::col...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>112217</th>\n",
       "      <td>goodplatform</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>33</td>\n",
       "      <td>33.0</td>\n",
       "      <td>[goodplatform]</td>\n",
       "      <td>[(goodplatform, VERB)]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>94531</th>\n",
       "      <td>helpful</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>45</td>\n",
       "      <td>45.0</td>\n",
       "      <td>[helpful]</td>\n",
       "      <td>[(helpful, ADJ)]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26870</th>\n",
       "      <td>amazingloveoneproblemfeellikeapplikechatgptabl...</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>44</td>\n",
       "      <td>44.0</td>\n",
       "      <td>[amazingloveoneproblemfeellikeapplikechatgptab...</td>\n",
       "      <td>[(amazingloveoneproblemfeellikeapplikechatgpta...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24243</th>\n",
       "      <td>unableuseappgettingerrorrequestallowedpleasetr...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>47</td>\n",
       "      <td>47.0</td>\n",
       "      <td>[unableuseappgettingerrorrequestallowedpleaset...</td>\n",
       "      <td>[(unableuseappgettingerrorrequestallowedplease...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5482</th>\n",
       "      <td>improvingguys</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>53</td>\n",
       "      <td>53.0</td>\n",
       "      <td>[improvingguys]</td>\n",
       "      <td>[(improvingguys, NOUN)]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>93667</th>\n",
       "      <td>good</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>46</td>\n",
       "      <td>46.0</td>\n",
       "      <td>[good]</td>\n",
       "      <td>[(good, ADJ)]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>42122</th>\n",
       "      <td>bestapplearning</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>45</td>\n",
       "      <td>45.0</td>\n",
       "      <td>[bestapplearning]</td>\n",
       "      <td>[(bestapplearning, VERB)]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>126190</th>\n",
       "      <td>awesome</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>9</td>\n",
       "      <td>9.0</td>\n",
       "      <td>[awesome]</td>\n",
       "      <td>[(awesome, ADJ)]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33284</th>\n",
       "      <td>needfastaccurate</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>41</td>\n",
       "      <td>41.0</td>\n",
       "      <td>[needfastaccurate]</td>\n",
       "      <td>[(needfastaccurate, VERB)]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>71516</th>\n",
       "      <td>niceappapphelpeveryonelearningthanksmakingapp</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>[niceappapphelpeveryonelearningthanksmakingapp]</td>\n",
       "      <td>[(niceappapphelpeveryonelearningthanksmakingap...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>73757</th>\n",
       "      <td>sourceinformationproductivity</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>2.0</td>\n",
       "      <td>[sourceinformationproductivity]</td>\n",
       "      <td>[(sourceinformationproductivity, NOUN)]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>123929</th>\n",
       "      <td>‡¶è‡¶ü‡¶ø‡¶Æ‡¶æ‡¶®‡ßÅ‡¶∑‡ßá‡¶∞‡¶Æ‡¶∏‡ßç‡¶§‡¶ø‡¶∑‡ßç‡¶ï‡ßá‡¶∞‡¶¶‡ßç‡¶¨‡¶æ‡¶∞‡¶æ‡¶á‡¶ï‡ßá‡¶¨‡¶≤‡¶Æ‡¶æ‡¶§‡ßç‡¶∞‡¶è‡¶ï‡¶ü‡¶æ‡¶Ü‡¶¨‡¶ø‡¶∏‡ßç‡¶ï...</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>12.0</td>\n",
       "      <td>[‡¶è‡¶ü‡¶ø‡¶Æ‡¶æ‡¶®‡ßÅ‡¶∑‡ßá‡¶∞‡¶Æ‡¶∏‡ßç‡¶§‡¶ø‡¶∑‡ßç‡¶ï‡ßá‡¶∞‡¶¶‡ßç‡¶¨‡¶æ‡¶∞‡¶æ‡¶á‡¶ï‡ßá‡¶¨‡¶≤‡¶Æ‡¶æ‡¶§‡ßç‡¶∞‡¶è‡¶ï‡¶ü‡¶æ‡¶Ü‡¶¨‡¶ø‡¶∏‡ßç...</td>\n",
       "      <td>[(‡¶è‡¶ü‡¶ø‡¶Æ‡¶æ‡¶®‡ßÅ‡¶∑‡ßá‡¶∞‡¶Æ‡¶∏‡ßç‡¶§‡¶ø‡¶∑‡ßç‡¶ï‡ßá‡¶∞‡¶¶‡ßç‡¶¨‡¶æ‡¶∞‡¶æ‡¶á‡¶ï‡ßá‡¶¨‡¶≤‡¶Æ‡¶æ‡¶§‡ßç‡¶∞‡¶è‡¶ï‡¶ü‡¶æ‡¶Ü‡¶¨‡¶ø‡¶∏...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3981</th>\n",
       "      <td>greatapp</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>53</td>\n",
       "      <td>53.0</td>\n",
       "      <td>[greatapp]</td>\n",
       "      <td>[(greatapp, PROPN)]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>119425</th>\n",
       "      <td>good</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>23</td>\n",
       "      <td>23.0</td>\n",
       "      <td>[good]</td>\n",
       "      <td>[(good, ADJ)]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>85438</th>\n",
       "      <td>bestappever</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>9</td>\n",
       "      <td>9.0</td>\n",
       "      <td>[bestappever]</td>\n",
       "      <td>[(bestappever, VERB)]</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                  content  score  \\\n",
       "15816                                          thatssmart      5   \n",
       "38158   conversationalmodeamazingthankincludingfreever...      5   \n",
       "42089                            usefulreliable:sparkles:      5   \n",
       "25064   appopensdoesntdisplayanythingsecondssayserrort...      1   \n",
       "771     best:hundred_points::collision::person_with_cr...      5   \n",
       "112217                                       goodplatform      5   \n",
       "94531                                             helpful      2   \n",
       "26870   amazingloveoneproblemfeellikeapplikechatgptabl...      5   \n",
       "24243   unableuseappgettingerrorrequestallowedpleasetr...      1   \n",
       "5482                                        improvingguys      3   \n",
       "93667                                                good      5   \n",
       "42122                                     bestapplearning      5   \n",
       "126190                                            awesome      4   \n",
       "33284                                    needfastaccurate      4   \n",
       "71516       niceappapphelpeveryonelearningthanksmakingapp      5   \n",
       "73757                       sourceinformationproductivity      5   \n",
       "123929  ‡¶è‡¶ü‡¶ø‡¶Æ‡¶æ‡¶®‡ßÅ‡¶∑‡ßá‡¶∞‡¶Æ‡¶∏‡ßç‡¶§‡¶ø‡¶∑‡ßç‡¶ï‡ßá‡¶∞‡¶¶‡ßç‡¶¨‡¶æ‡¶∞‡¶æ‡¶á‡¶ï‡ßá‡¶¨‡¶≤‡¶Æ‡¶æ‡¶§‡ßç‡¶∞‡¶è‡¶ï‡¶ü‡¶æ‡¶Ü‡¶¨‡¶ø‡¶∏‡ßç‡¶ï...      3   \n",
       "3981                                             greatapp      5   \n",
       "119425                                               good      5   \n",
       "85438                                         bestappever      5   \n",
       "\n",
       "        thumbs_up_count  review_created_version  app_version  \\\n",
       "15816                 0                      46         46.0   \n",
       "38158                 0                      23         23.0   \n",
       "42089                 0                      46         46.0   \n",
       "25064                 0                      42         42.0   \n",
       "771                   0                      54         54.0   \n",
       "112217                0                      33         33.0   \n",
       "94531                 0                      45         45.0   \n",
       "26870                 0                      44         44.0   \n",
       "24243                 0                      47         47.0   \n",
       "5482                  0                      53         53.0   \n",
       "93667                 0                      46         46.0   \n",
       "42122                 0                      45         45.0   \n",
       "126190                0                       9          9.0   \n",
       "33284                 0                      41         41.0   \n",
       "71516                 0                       0          0.0   \n",
       "73757                 0                       2          2.0   \n",
       "123929                0                      12         12.0   \n",
       "3981                  0                      53         53.0   \n",
       "119425                0                      23         23.0   \n",
       "85438                 0                       9          9.0   \n",
       "\n",
       "                                            token_content  \\\n",
       "15816                                        [thatssmart]   \n",
       "38158   [conversationalmodeamazingthankincludingfreeve...   \n",
       "42089                    [usefulreliable, :, sparkles, :]   \n",
       "25064   [appopensdoesntdisplayanythingsecondssayserror...   \n",
       "771     [best, :, hundred_points, :, :collision, :, :p...   \n",
       "112217                                     [goodplatform]   \n",
       "94531                                           [helpful]   \n",
       "26870   [amazingloveoneproblemfeellikeapplikechatgptab...   \n",
       "24243   [unableuseappgettingerrorrequestallowedpleaset...   \n",
       "5482                                      [improvingguys]   \n",
       "93667                                              [good]   \n",
       "42122                                   [bestapplearning]   \n",
       "126190                                          [awesome]   \n",
       "33284                                  [needfastaccurate]   \n",
       "71516     [niceappapphelpeveryonelearningthanksmakingapp]   \n",
       "73757                     [sourceinformationproductivity]   \n",
       "123929  [‡¶è‡¶ü‡¶ø‡¶Æ‡¶æ‡¶®‡ßÅ‡¶∑‡ßá‡¶∞‡¶Æ‡¶∏‡ßç‡¶§‡¶ø‡¶∑‡ßç‡¶ï‡ßá‡¶∞‡¶¶‡ßç‡¶¨‡¶æ‡¶∞‡¶æ‡¶á‡¶ï‡ßá‡¶¨‡¶≤‡¶Æ‡¶æ‡¶§‡ßç‡¶∞‡¶è‡¶ï‡¶ü‡¶æ‡¶Ü‡¶¨‡¶ø‡¶∏‡ßç...   \n",
       "3981                                           [greatapp]   \n",
       "119425                                             [good]   \n",
       "85438                                       [bestappever]   \n",
       "\n",
       "                                                 pos_tags  \n",
       "15816                                [(thatssmart, VERB)]  \n",
       "38158   [(conversationalmodeamazingthankincludingfreev...  \n",
       "42089   [(usefulreliable, ADJ), (:, PUNCT), (sparkles,...  \n",
       "25064   [(appopensdoesntdisplayanythingsecondssayserro...  \n",
       "771     [(best, ADJ), (:, PUNCT), (hundred_points::col...  \n",
       "112217                             [(goodplatform, VERB)]  \n",
       "94531                                    [(helpful, ADJ)]  \n",
       "26870   [(amazingloveoneproblemfeellikeapplikechatgpta...  \n",
       "24243   [(unableuseappgettingerrorrequestallowedplease...  \n",
       "5482                              [(improvingguys, NOUN)]  \n",
       "93667                                       [(good, ADJ)]  \n",
       "42122                           [(bestapplearning, VERB)]  \n",
       "126190                                   [(awesome, ADJ)]  \n",
       "33284                          [(needfastaccurate, VERB)]  \n",
       "71516   [(niceappapphelpeveryonelearningthanksmakingap...  \n",
       "73757             [(sourceinformationproductivity, NOUN)]  \n",
       "123929  [(‡¶è‡¶ü‡¶ø‡¶Æ‡¶æ‡¶®‡ßÅ‡¶∑‡ßá‡¶∞‡¶Æ‡¶∏‡ßç‡¶§‡¶ø‡¶∑‡ßç‡¶ï‡ßá‡¶∞‡¶¶‡ßç‡¶¨‡¶æ‡¶∞‡¶æ‡¶á‡¶ï‡ßá‡¶¨‡¶≤‡¶Æ‡¶æ‡¶§‡ßç‡¶∞‡¶è‡¶ï‡¶ü‡¶æ‡¶Ü‡¶¨‡¶ø‡¶∏...  \n",
       "3981                                  [(greatapp, PROPN)]  \n",
       "119425                                      [(good, ADJ)]  \n",
       "85438                               [(bestappever, VERB)]  "
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head(20)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "869f608b",
   "metadata": {
    "papermill": {
     "duration": 0.035237,
     "end_time": "2024-06-05T12:10:41.907817",
     "exception": false,
     "start_time": "2024-06-05T12:10:41.872580",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Bag of Words ##"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "e2570512",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-05T12:10:41.980767Z",
     "iopub.status.busy": "2024-06-05T12:10:41.980335Z",
     "iopub.status.idle": "2024-06-05T12:10:43.363127Z",
     "shell.execute_reply": "2024-06-05T12:10:43.361616Z"
    },
    "papermill": {
     "duration": 1.424152,
     "end_time": "2024-06-05T12:10:43.366586",
     "exception": false,
     "start_time": "2024-06-05T12:10:41.942434",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df['content'] = df['content'].apply(lambda x: ' '.join(x) \n",
    "                                    if isinstance(x, list) \n",
    "                                    else x)\n",
    "df['token_content'] = df['token_content'].apply(lambda x: ' '.join(x) \n",
    "                                                if isinstance(x, list) \n",
    "                                                else x)\n",
    "df['pos_tags'] = df['pos_tags'].apply(lambda x: ' '.join(str(i) for i in x) \n",
    "                                      if isinstance(x, list) \n",
    "                                      else x)\n",
    "\n",
    "vectorizer = CountVectorizer(ngram_range = (2,2))\n",
    "\n",
    "bow_c = vectorizer.fit_transform(df['content'])\n",
    "bow_t = vectorizer.fit_transform(df['token_content'])\n",
    "bow_p = vectorizer.fit_transform(df['pos_tags'])\n",
    "\n",
    "df['content'] = bow_c.toarray()\n",
    "df['token_content'] = bow_t.toarray()\n",
    "df['pos_tags'] = bow_p.toarray()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "65e0b740",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-05T12:10:43.441635Z",
     "iopub.status.busy": "2024-06-05T12:10:43.441149Z",
     "iopub.status.idle": "2024-06-05T12:10:43.462711Z",
     "shell.execute_reply": "2024-06-05T12:10:43.461190Z"
    },
    "papermill": {
     "duration": 0.064559,
     "end_time": "2024-06-05T12:10:43.466485",
     "exception": false,
     "start_time": "2024-06-05T12:10:43.401926",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>content</th>\n",
       "      <th>score</th>\n",
       "      <th>thumbs_up_count</th>\n",
       "      <th>review_created_version</th>\n",
       "      <th>app_version</th>\n",
       "      <th>token_content</th>\n",
       "      <th>pos_tags</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>15816</th>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>46</td>\n",
       "      <td>46.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>38158</th>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>23</td>\n",
       "      <td>23.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>42089</th>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>46</td>\n",
       "      <td>46.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25064</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>42</td>\n",
       "      <td>42.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>771</th>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>54</td>\n",
       "      <td>54.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>112217</th>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>33</td>\n",
       "      <td>33.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>94531</th>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>45</td>\n",
       "      <td>45.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26870</th>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>44</td>\n",
       "      <td>44.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24243</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>47</td>\n",
       "      <td>47.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5482</th>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>53</td>\n",
       "      <td>53.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>93667</th>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>46</td>\n",
       "      <td>46.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>42122</th>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>45</td>\n",
       "      <td>45.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>126190</th>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>9</td>\n",
       "      <td>9.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33284</th>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>41</td>\n",
       "      <td>41.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>71516</th>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>73757</th>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>123929</th>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>12.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3981</th>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>53</td>\n",
       "      <td>53.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>119425</th>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>23</td>\n",
       "      <td>23.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>85438</th>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>9</td>\n",
       "      <td>9.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        content  score  thumbs_up_count  review_created_version  app_version  \\\n",
       "15816         0      5                0                      46         46.0   \n",
       "38158         0      5                0                      23         23.0   \n",
       "42089         0      5                0                      46         46.0   \n",
       "25064         0      1                0                      42         42.0   \n",
       "771           0      5                0                      54         54.0   \n",
       "112217        0      5                0                      33         33.0   \n",
       "94531         0      2                0                      45         45.0   \n",
       "26870         0      5                0                      44         44.0   \n",
       "24243         0      1                0                      47         47.0   \n",
       "5482          0      3                0                      53         53.0   \n",
       "93667         0      5                0                      46         46.0   \n",
       "42122         0      5                0                      45         45.0   \n",
       "126190        0      4                0                       9          9.0   \n",
       "33284         0      4                0                      41         41.0   \n",
       "71516         0      5                0                       0          0.0   \n",
       "73757         0      5                0                       2          2.0   \n",
       "123929        0      3                0                      12         12.0   \n",
       "3981          0      5                0                      53         53.0   \n",
       "119425        0      5                0                      23         23.0   \n",
       "85438         0      5                0                       9          9.0   \n",
       "\n",
       "        token_content  pos_tags  \n",
       "15816               0         0  \n",
       "38158               0         0  \n",
       "42089               0         0  \n",
       "25064               0         0  \n",
       "771                 0         0  \n",
       "112217              0         0  \n",
       "94531               0         0  \n",
       "26870               0         0  \n",
       "24243               0         0  \n",
       "5482                0         0  \n",
       "93667               0         0  \n",
       "42122               0         0  \n",
       "126190              0         0  \n",
       "33284               0         0  \n",
       "71516               0         0  \n",
       "73757               0         0  \n",
       "123929              0         0  \n",
       "3981                0         0  \n",
       "119425              0         0  \n",
       "85438               0         0  "
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head(20)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "55338fba",
   "metadata": {
    "papermill": {
     "duration": 0.034674,
     "end_time": "2024-06-05T12:10:43.539094",
     "exception": false,
     "start_time": "2024-06-05T12:10:43.504420",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Test Train Split ##"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "23427eb0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-05T12:10:43.610778Z",
     "iopub.status.busy": "2024-06-05T12:10:43.610276Z",
     "iopub.status.idle": "2024-06-05T12:10:43.620220Z",
     "shell.execute_reply": "2024-06-05T12:10:43.618850Z"
    },
    "papermill": {
     "duration": 0.04971,
     "end_time": "2024-06-05T12:10:43.623442",
     "exception": false,
     "start_time": "2024-06-05T12:10:43.573732",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "X = df.drop(columns=['score'])\n",
    "y = df['score']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "9fad395f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-05T12:10:43.701972Z",
     "iopub.status.busy": "2024-06-05T12:10:43.701037Z",
     "iopub.status.idle": "2024-06-05T12:10:43.714549Z",
     "shell.execute_reply": "2024-06-05T12:10:43.713013Z"
    },
    "papermill": {
     "duration": 0.057272,
     "end_time": "2024-06-05T12:10:43.718085",
     "exception": false,
     "start_time": "2024-06-05T12:10:43.660813",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "X_train, X_test, y_train, y_test = train_test_split(X, y,\n",
    "                                                   test_size = 0.2,\n",
    "                                                   random_state = 42)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "794ee976",
   "metadata": {
    "papermill": {
     "duration": 0.036405,
     "end_time": "2024-06-05T12:10:43.794325",
     "exception": false,
     "start_time": "2024-06-05T12:10:43.757920",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Decision Tree Classifier ##"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "09eb5a82",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-05T12:10:43.865522Z",
     "iopub.status.busy": "2024-06-05T12:10:43.865105Z",
     "iopub.status.idle": "2024-06-05T12:10:43.872166Z",
     "shell.execute_reply": "2024-06-05T12:10:43.870478Z"
    },
    "papermill": {
     "duration": 0.046116,
     "end_time": "2024-06-05T12:10:43.875161",
     "exception": false,
     "start_time": "2024-06-05T12:10:43.829045",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "dt = DecisionTreeClassifier()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "23b31278",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-05T12:10:43.948623Z",
     "iopub.status.busy": "2024-06-05T12:10:43.948117Z",
     "iopub.status.idle": "2024-06-05T12:10:43.974348Z",
     "shell.execute_reply": "2024-06-05T12:10:43.972937Z"
    },
    "papermill": {
     "duration": 0.065699,
     "end_time": "2024-06-05T12:10:43.977509",
     "exception": false,
     "start_time": "2024-06-05T12:10:43.911810",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"‚ñ∏\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"‚ñæ\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>DecisionTreeClassifier()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">DecisionTreeClassifier</label><div class=\"sk-toggleable__content\"><pre>DecisionTreeClassifier()</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "DecisionTreeClassifier()"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dt.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "83d465df",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-05T12:10:44.056885Z",
     "iopub.status.busy": "2024-06-05T12:10:44.056201Z",
     "iopub.status.idle": "2024-06-05T12:10:44.066717Z",
     "shell.execute_reply": "2024-06-05T12:10:44.065260Z"
    },
    "papermill": {
     "duration": 0.052745,
     "end_time": "2024-06-05T12:10:44.069610",
     "exception": false,
     "start_time": "2024-06-05T12:10:44.016865",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "y_pred = dt.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "afb37376",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-05T12:10:44.147395Z",
     "iopub.status.busy": "2024-06-05T12:10:44.146896Z",
     "iopub.status.idle": "2024-06-05T12:10:44.167513Z",
     "shell.execute_reply": "2024-06-05T12:10:44.165660Z"
    },
    "papermill": {
     "duration": 0.063876,
     "end_time": "2024-06-05T12:10:44.171393",
     "exception": false,
     "start_time": "2024-06-05T12:10:44.107517",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "           1       0.31      0.04      0.07       104\n",
      "           2       0.00      0.00      0.00        26\n",
      "           3       0.00      0.00      0.00        70\n",
      "           4       0.33      0.00      0.01       210\n",
      "           5       0.78      0.99      0.87      1411\n",
      "\n",
      "    accuracy                           0.77      1821\n",
      "   macro avg       0.28      0.21      0.19      1821\n",
      "weighted avg       0.66      0.77      0.68      1821\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(classification_report(y_test, y_pred, zero_division = 0))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "966dd130",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-05T12:10:44.249099Z",
     "iopub.status.busy": "2024-06-05T12:10:44.248652Z",
     "iopub.status.idle": "2024-06-05T12:10:44.693309Z",
     "shell.execute_reply": "2024-06-05T12:10:44.691810Z"
    },
    "papermill": {
     "duration": 0.487231,
     "end_time": "2024-06-05T12:10:44.696741",
     "exception": false,
     "start_time": "2024-06-05T12:10:44.209510",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 500x500 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "cm = confusion_matrix(y_test, y_pred)\n",
    "cm_display = ConfusionMatrixDisplay(confusion_matrix = cm)\n",
    "\n",
    "fig, ax = plt.subplots(figsize = (5,5))\n",
    "cm_display.plot(ax = ax)\n",
    "plt.title('Confusion Matrix')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f51b438b",
   "metadata": {
    "papermill": {
     "duration": 0.036847,
     "end_time": "2024-06-05T12:10:44.772800",
     "exception": false,
     "start_time": "2024-06-05T12:10:44.735953",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Random Forest Classifier ###"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "8e0a0ff0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-05T12:10:44.857040Z",
     "iopub.status.busy": "2024-06-05T12:10:44.856471Z",
     "iopub.status.idle": "2024-06-05T12:10:44.863330Z",
     "shell.execute_reply": "2024-06-05T12:10:44.861679Z"
    },
    "papermill": {
     "duration": 0.055147,
     "end_time": "2024-06-05T12:10:44.866579",
     "exception": false,
     "start_time": "2024-06-05T12:10:44.811432",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "rf = RandomForestClassifier()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "ff0edbd4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-05T12:10:44.944581Z",
     "iopub.status.busy": "2024-06-05T12:10:44.944050Z",
     "iopub.status.idle": "2024-06-05T12:10:45.576206Z",
     "shell.execute_reply": "2024-06-05T12:10:45.574695Z"
    },
    "papermill": {
     "duration": 0.675426,
     "end_time": "2024-06-05T12:10:45.579399",
     "exception": false,
     "start_time": "2024-06-05T12:10:44.903973",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-2 {color: black;background-color: white;}#sk-container-id-2 pre{padding: 0;}#sk-container-id-2 div.sk-toggleable {background-color: white;}#sk-container-id-2 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-2 label.sk-toggleable__label-arrow:before {content: \"‚ñ∏\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-2 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-2 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-2 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"‚ñæ\";}#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-2 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-2 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-2 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-2 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-2 div.sk-item {position: relative;z-index: 1;}#sk-container-id-2 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-2 div.sk-item::before, #sk-container-id-2 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-2 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-2 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-2 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-2 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-2 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-2 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-2 div.sk-label-container {text-align: center;}#sk-container-id-2 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-2 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>RandomForestClassifier()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" checked><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">RandomForestClassifier</label><div class=\"sk-toggleable__content\"><pre>RandomForestClassifier()</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "RandomForestClassifier()"
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rf.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "a4feeaad",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-05T12:10:45.660723Z",
     "iopub.status.busy": "2024-06-05T12:10:45.660067Z",
     "iopub.status.idle": "2024-06-05T12:10:45.707943Z",
     "shell.execute_reply": "2024-06-05T12:10:45.706297Z"
    },
    "papermill": {
     "duration": 0.093209,
     "end_time": "2024-06-05T12:10:45.711431",
     "exception": false,
     "start_time": "2024-06-05T12:10:45.618222",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "y_pred = rf.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "93e64e72",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-05T12:10:45.794957Z",
     "iopub.status.busy": "2024-06-05T12:10:45.793798Z",
     "iopub.status.idle": "2024-06-05T12:10:45.814638Z",
     "shell.execute_reply": "2024-06-05T12:10:45.812766Z"
    },
    "papermill": {
     "duration": 0.066799,
     "end_time": "2024-06-05T12:10:45.818235",
     "exception": false,
     "start_time": "2024-06-05T12:10:45.751436",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "           1       0.44      0.04      0.07       104\n",
      "           2       0.00      0.00      0.00        26\n",
      "           3       0.00      0.00      0.00        70\n",
      "           4       0.17      0.00      0.01       210\n",
      "           5       0.78      1.00      0.87      1411\n",
      "\n",
      "    accuracy                           0.77      1821\n",
      "   macro avg       0.28      0.21      0.19      1821\n",
      "weighted avg       0.65      0.77      0.68      1821\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(classification_report(y_test, y_pred, zero_division=0))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "b72acb5e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-05T12:10:45.896640Z",
     "iopub.status.busy": "2024-06-05T12:10:45.896164Z",
     "iopub.status.idle": "2024-06-05T12:10:46.302703Z",
     "shell.execute_reply": "2024-06-05T12:10:46.301073Z"
    },
    "papermill": {
     "duration": 0.450279,
     "end_time": "2024-06-05T12:10:46.306257",
     "exception": false,
     "start_time": "2024-06-05T12:10:45.855978",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 500x500 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "cm1 = confusion_matrix(y_test, y_pred)\n",
    "cm1_display = ConfusionMatrixDisplay(confusion_matrix = cm1)\n",
    "\n",
    "fig, ax = plt.subplots(figsize = (5,5))\n",
    "cm1_display.plot(ax=ax)\n",
    "plt.title('Confusion Matrix')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "daaef064",
   "metadata": {
    "papermill": {
     "duration": 0.039007,
     "end_time": "2024-06-05T12:10:46.389161",
     "exception": false,
     "start_time": "2024-06-05T12:10:46.350154",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Support Vector Machines ###"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "88dc8b13",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-05T12:10:46.474877Z",
     "iopub.status.busy": "2024-06-05T12:10:46.474363Z",
     "iopub.status.idle": "2024-06-05T12:10:46.480814Z",
     "shell.execute_reply": "2024-06-05T12:10:46.479443Z"
    },
    "papermill": {
     "duration": 0.053213,
     "end_time": "2024-06-05T12:10:46.483595",
     "exception": false,
     "start_time": "2024-06-05T12:10:46.430382",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "svm = SVC()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "3145eb11",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-05T12:10:46.560678Z",
     "iopub.status.busy": "2024-06-05T12:10:46.560156Z",
     "iopub.status.idle": "2024-06-05T12:10:48.026749Z",
     "shell.execute_reply": "2024-06-05T12:10:48.025011Z"
    },
    "papermill": {
     "duration": 1.509021,
     "end_time": "2024-06-05T12:10:48.029811",
     "exception": false,
     "start_time": "2024-06-05T12:10:46.520790",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-3 {color: black;background-color: white;}#sk-container-id-3 pre{padding: 0;}#sk-container-id-3 div.sk-toggleable {background-color: white;}#sk-container-id-3 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-3 label.sk-toggleable__label-arrow:before {content: \"‚ñ∏\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-3 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-3 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-3 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-3 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-3 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-3 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"‚ñæ\";}#sk-container-id-3 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-3 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-3 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-3 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-3 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-3 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-3 div.sk-item {position: relative;z-index: 1;}#sk-container-id-3 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-3 div.sk-item::before, #sk-container-id-3 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-3 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-3 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-3 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-3 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-3 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-3 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-3 div.sk-label-container {text-align: center;}#sk-container-id-3 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-3 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-3\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>SVC()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-3\" type=\"checkbox\" checked><label for=\"sk-estimator-id-3\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">SVC</label><div class=\"sk-toggleable__content\"><pre>SVC()</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "SVC()"
      ]
     },
     "execution_count": 56,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "svm.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "9d8ff9fd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-05T12:10:48.113532Z",
     "iopub.status.busy": "2024-06-05T12:10:48.112684Z",
     "iopub.status.idle": "2024-06-05T12:10:48.454709Z",
     "shell.execute_reply": "2024-06-05T12:10:48.452604Z"
    },
    "papermill": {
     "duration": 0.388881,
     "end_time": "2024-06-05T12:10:48.458607",
     "exception": false,
     "start_time": "2024-06-05T12:10:48.069726",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "y_pred = svm.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "11531574",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-05T12:10:48.540182Z",
     "iopub.status.busy": "2024-06-05T12:10:48.538798Z",
     "iopub.status.idle": "2024-06-05T12:10:48.558708Z",
     "shell.execute_reply": "2024-06-05T12:10:48.557472Z"
    },
    "papermill": {
     "duration": 0.063557,
     "end_time": "2024-06-05T12:10:48.562157",
     "exception": false,
     "start_time": "2024-06-05T12:10:48.498600",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "           1       0.00      0.00      0.00       104\n",
      "           2       0.00      0.00      0.00        26\n",
      "           3       0.00      0.00      0.00        70\n",
      "           4       0.50      0.00      0.01       210\n",
      "           5       0.78      1.00      0.87      1411\n",
      "\n",
      "    accuracy                           0.78      1821\n",
      "   macro avg       0.26      0.20      0.18      1821\n",
      "weighted avg       0.66      0.78      0.68      1821\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(classification_report(y_test, y_pred, zero_division=0))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "020b6087",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-05T12:10:48.647082Z",
     "iopub.status.busy": "2024-06-05T12:10:48.646523Z",
     "iopub.status.idle": "2024-06-05T12:10:49.677360Z",
     "shell.execute_reply": "2024-06-05T12:10:49.675809Z"
    },
    "papermill": {
     "duration": 1.077021,
     "end_time": "2024-06-05T12:10:49.680351",
     "exception": false,
     "start_time": "2024-06-05T12:10:48.603330",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 500x500 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "cm2 = confusion_matrix(y_test, y_pred)\n",
    "cm2_display = ConfusionMatrixDisplay(confusion_matrix = cm2)\n",
    "\n",
    "fig, ax = plt.subplots(figsize = (5,5))\n",
    "cm2_display.plot(ax=ax)\n",
    "plt.title('Confusion Matrix')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "07af5ec9",
   "metadata": {
    "papermill": {
     "duration": 0.039143,
     "end_time": "2024-06-05T12:10:49.759529",
     "exception": false,
     "start_time": "2024-06-05T12:10:49.720386",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### KNN ###"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "20626a64",
   "metadata": {
    "papermill": {
     "duration": 0.040356,
     "end_time": "2024-06-05T12:10:49.840318",
     "exception": false,
     "start_time": "2024-06-05T12:10:49.799962",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 4997049,
     "sourceId": 8607697,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30715,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 93.612698,
   "end_time": "2024-06-05T12:10:53.442342",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-06-05T12:09:19.829644",
   "version": "2.5.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
