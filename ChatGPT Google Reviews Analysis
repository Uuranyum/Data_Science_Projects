{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "0704a6e7",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "papermill": {
     "duration": 0.016955,
     "end_time": "2024-06-05T12:22:40.505461",
     "exception": false,
     "start_time": "2024-06-05T12:22:40.488506",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## ChatGPT Google Reviews Analysis ##"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "70c0ced0",
   "metadata": {
    "papermill": {
     "duration": 0.016319,
     "end_time": "2024-06-05T12:22:40.538532",
     "exception": false,
     "start_time": "2024-06-05T12:22:40.522213",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Please upvote it if you are find this note book helpful. My deepest thanks for all! ###\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "75ee5745",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-05T12:22:40.575319Z",
     "iopub.status.busy": "2024-06-05T12:22:40.574911Z",
     "iopub.status.idle": "2024-06-05T12:23:24.915121Z",
     "shell.execute_reply": "2024-06-05T12:23:24.914005Z"
    },
    "papermill": {
     "duration": 44.361711,
     "end_time": "2024-06-05T12:23:24.917823",
     "exception": false,
     "start_time": "2024-06-05T12:22:40.556112",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2024-06-05 12:23:12.808074: E external/local_xla/xla/stream_executor/cuda/cuda_dnn.cc:9261] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "2024-06-05 12:23:12.808276: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:607] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "2024-06-05 12:23:12.998463: E external/local_xla/xla/stream_executor/cuda/cuda_blas.cc:1515] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "import re\n",
    "import string\n",
    "import emoji\n",
    "import nltk\n",
    "import spacy\n",
    "from tqdm import tqdm\n",
    "from nltk.corpus import stopwords\n",
    "from gensim.models import Word2Vec\n",
    "from tensorflow.keras.preprocessing.text import Tokenizer\n",
    "from sklearn.feature_extraction.text import CountVectorizer\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.tree import DecisionTreeClassifier\n",
    "from sklearn.metrics import classification_report\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay\n",
    "from sklearn.preprocessing import MinMaxScaler, LabelEncoder, OrdinalEncoder\n",
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "from sklearn.svm import SVC\n",
    "from sklearn.model_selection import GridSearchCV"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1da22833",
   "metadata": {
    "papermill": {
     "duration": 0.016188,
     "end_time": "2024-06-05T12:23:24.952673",
     "exception": false,
     "start_time": "2024-06-05T12:23:24.936485",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Importing Data ##"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "8e5de6eb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-05T12:23:24.989701Z",
     "iopub.status.busy": "2024-06-05T12:23:24.988973Z",
     "iopub.status.idle": "2024-06-05T12:23:26.173239Z",
     "shell.execute_reply": "2024-06-05T12:23:26.171190Z"
    },
    "papermill": {
     "duration": 1.207406,
     "end_time": "2024-06-05T12:23:26.176952",
     "exception": false,
     "start_time": "2024-06-05T12:23:24.969546",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "dx = pd.read_csv('/kaggle/input/chatgpt-reviews-daily-updated/chatgpt_reviews.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "646569a4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-05T12:23:26.219942Z",
     "iopub.status.busy": "2024-06-05T12:23:26.219375Z",
     "iopub.status.idle": "2024-06-05T12:23:26.255059Z",
     "shell.execute_reply": "2024-06-05T12:23:26.253664Z"
    },
    "papermill": {
     "duration": 0.059275,
     "end_time": "2024-06-05T12:23:26.257940",
     "exception": false,
     "start_time": "2024-06-05T12:23:26.198665",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>reviewId</th>\n",
       "      <th>userName</th>\n",
       "      <th>content</th>\n",
       "      <th>score</th>\n",
       "      <th>thumbsUpCount</th>\n",
       "      <th>reviewCreatedVersion</th>\n",
       "      <th>at</th>\n",
       "      <th>appVersion</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>30e0315f-729a-4709-b26b-ed91d2842ce8</td>\n",
       "      <td>Marwan Mohamed</td>\n",
       "      <td>this app Very cool, but he does not remember i...</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>1.2024.143</td>\n",
       "      <td>2024-06-03 14:59:30</td>\n",
       "      <td>1.2024.143</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>cbb56939-c726-411d-a147-89c52b23c033</td>\n",
       "      <td>Murendeni Mulaudzi</td>\n",
       "      <td>i love it it is so historicalü•∫ü§ü</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>1.2024.143</td>\n",
       "      <td>2024-06-03 14:57:37</td>\n",
       "      <td>1.2024.143</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2fb70124-54a8-47b5-bcc6-acff14e88fe2</td>\n",
       "      <td>NEERAJ KUMAR</td>\n",
       "      <td>amazing</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>1.2024.143</td>\n",
       "      <td>2024-06-03 14:57:17</td>\n",
       "      <td>1.2024.143</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>5378c013-27d8-48cd-9043-05d2fa898eda</td>\n",
       "      <td>Ziaul Haque</td>\n",
       "      <td>this is the best app helpful üëç</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>1.2024.143</td>\n",
       "      <td>2024-06-03 14:55:52</td>\n",
       "      <td>1.2024.143</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>6478c49c-7499-4669-96f1-eea74c294b5d</td>\n",
       "      <td>Ifra Fariyal</td>\n",
       "      <td>excellent</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>1.2024.139</td>\n",
       "      <td>2024-06-03 14:55:37</td>\n",
       "      <td>1.2024.139</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                               reviewId            userName  \\\n",
       "0  30e0315f-729a-4709-b26b-ed91d2842ce8      Marwan Mohamed   \n",
       "1  cbb56939-c726-411d-a147-89c52b23c033  Murendeni Mulaudzi   \n",
       "2  2fb70124-54a8-47b5-bcc6-acff14e88fe2        NEERAJ KUMAR   \n",
       "3  5378c013-27d8-48cd-9043-05d2fa898eda         Ziaul Haque   \n",
       "4  6478c49c-7499-4669-96f1-eea74c294b5d        Ifra Fariyal   \n",
       "\n",
       "                                             content  score  thumbsUpCount  \\\n",
       "0  this app Very cool, but he does not remember i...      4              0   \n",
       "1                    i love it it is so historicalü•∫ü§ü      5              0   \n",
       "2                                            amazing      5              0   \n",
       "3                     this is the best app helpful üëç      5              0   \n",
       "4                                          excellent      4              0   \n",
       "\n",
       "  reviewCreatedVersion                   at  appVersion  \n",
       "0           1.2024.143  2024-06-03 14:59:30  1.2024.143  \n",
       "1           1.2024.143  2024-06-03 14:57:37  1.2024.143  \n",
       "2           1.2024.143  2024-06-03 14:57:17  1.2024.143  \n",
       "3           1.2024.143  2024-06-03 14:55:52  1.2024.143  \n",
       "4           1.2024.139  2024-06-03 14:55:37  1.2024.139  "
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dx.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "b5a52963",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-05T12:23:26.299893Z",
     "iopub.status.busy": "2024-06-05T12:23:26.299380Z",
     "iopub.status.idle": "2024-06-05T12:23:26.308883Z",
     "shell.execute_reply": "2024-06-05T12:23:26.307570Z"
    },
    "papermill": {
     "duration": 0.031078,
     "end_time": "2024-06-05T12:23:26.311531",
     "exception": false,
     "start_time": "2024-06-05T12:23:26.280453",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1081224"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dx.size"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "1fdc83e3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-05T12:23:26.355978Z",
     "iopub.status.busy": "2024-06-05T12:23:26.355474Z",
     "iopub.status.idle": "2024-06-05T12:23:26.393603Z",
     "shell.execute_reply": "2024-06-05T12:23:26.392489Z"
    },
    "papermill": {
     "duration": 0.060983,
     "end_time": "2024-06-05T12:23:26.396714",
     "exception": false,
     "start_time": "2024-06-05T12:23:26.335731",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>reviewId</th>\n",
       "      <th>userName</th>\n",
       "      <th>content</th>\n",
       "      <th>score</th>\n",
       "      <th>thumbsUpCount</th>\n",
       "      <th>reviewCreatedVersion</th>\n",
       "      <th>at</th>\n",
       "      <th>appVersion</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>25836</th>\n",
       "      <td>c28edc3e-6e95-42f1-8326-14b407a5712d</td>\n",
       "      <td>Kashan Raza</td>\n",
       "      <td>To be honest, its a very very helpful app, you...</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>1.2024.073</td>\n",
       "      <td>2024-03-25 19:40:02</td>\n",
       "      <td>1.2024.073</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20089</th>\n",
       "      <td>d9370369-98e4-4eb1-8e93-bf8b78c71964</td>\n",
       "      <td>Maryam Wazeer</td>\n",
       "      <td>great</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1.2024.122</td>\n",
       "      <td>2024-05-14 08:48:22</td>\n",
       "      <td>1.2024.122</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>42620</th>\n",
       "      <td>5c1c05c5-d7af-478d-94a6-8ccde546a1ed</td>\n",
       "      <td>Naqibullah Saeed</td>\n",
       "      <td>I found this app very useful that I have never...</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>1.2024.080</td>\n",
       "      <td>2024-03-29 10:20:14</td>\n",
       "      <td>1.2024.080</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>93775</th>\n",
       "      <td>e44aab9c-ed87-4785-b9bf-4076c3853c69</td>\n",
       "      <td>NAZEER</td>\n",
       "      <td>wonderful</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>1.2024.108</td>\n",
       "      <td>2024-04-26 22:37:14</td>\n",
       "      <td>1.2024.108</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>130376</th>\n",
       "      <td>e440739a-f4de-4777-9b9e-0e850bd438df</td>\n",
       "      <td>Harshil Thakor</td>\n",
       "      <td>Great experience</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>1.0.0022</td>\n",
       "      <td>2023-07-26 14:59:54</td>\n",
       "      <td>1.0.0022</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                    reviewId          userName  \\\n",
       "25836   c28edc3e-6e95-42f1-8326-14b407a5712d       Kashan Raza   \n",
       "20089   d9370369-98e4-4eb1-8e93-bf8b78c71964     Maryam Wazeer   \n",
       "42620   5c1c05c5-d7af-478d-94a6-8ccde546a1ed  Naqibullah Saeed   \n",
       "93775   e44aab9c-ed87-4785-b9bf-4076c3853c69            NAZEER   \n",
       "130376  e440739a-f4de-4777-9b9e-0e850bd438df    Harshil Thakor   \n",
       "\n",
       "                                                  content  score  \\\n",
       "25836   To be honest, its a very very helpful app, you...      5   \n",
       "20089                                               great      1   \n",
       "42620   I found this app very useful that I have never...      5   \n",
       "93775                                           wonderful      5   \n",
       "130376                                   Great experience      5   \n",
       "\n",
       "        thumbsUpCount reviewCreatedVersion                   at  appVersion  \n",
       "25836               0           1.2024.073  2024-03-25 19:40:02  1.2024.073  \n",
       "20089               0           1.2024.122  2024-05-14 08:48:22  1.2024.122  \n",
       "42620               0           1.2024.080  2024-03-29 10:20:14  1.2024.080  \n",
       "93775               0           1.2024.108  2024-04-26 22:37:14  1.2024.108  \n",
       "130376              0             1.0.0022  2023-07-26 14:59:54    1.0.0022  "
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = dx.sample(10000)\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "9caefd2f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-05T12:23:26.439534Z",
     "iopub.status.busy": "2024-06-05T12:23:26.438868Z",
     "iopub.status.idle": "2024-06-05T12:23:26.446846Z",
     "shell.execute_reply": "2024-06-05T12:23:26.445196Z"
    },
    "papermill": {
     "duration": 0.030566,
     "end_time": "2024-06-05T12:23:26.449794",
     "exception": false,
     "start_time": "2024-06-05T12:23:26.419228",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df.rename(columns={'reviewId': 'review_id',\n",
    "                  'userName':'user_name',\n",
    "                  'thumbsUpCount': 'thumbs_up_count',\n",
    "                  'reviewCreatedVersion':'review_created_version',\n",
    "                  'appVersion':'app_version'}, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "de809297",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-05T12:23:26.495293Z",
     "iopub.status.busy": "2024-06-05T12:23:26.494343Z",
     "iopub.status.idle": "2024-06-05T12:23:26.501368Z",
     "shell.execute_reply": "2024-06-05T12:23:26.500312Z"
    },
    "papermill": {
     "duration": 0.028817,
     "end_time": "2024-06-05T12:23:26.503686",
     "exception": false,
     "start_time": "2024-06-05T12:23:26.474869",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['review_id', 'user_name', 'content', 'score', 'thumbs_up_count',\n",
       "       'review_created_version', 'at', 'app_version'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "85e6778f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-05T12:23:26.541371Z",
     "iopub.status.busy": "2024-06-05T12:23:26.540985Z",
     "iopub.status.idle": "2024-06-05T12:23:26.548445Z",
     "shell.execute_reply": "2024-06-05T12:23:26.547088Z"
    },
    "papermill": {
     "duration": 0.029348,
     "end_time": "2024-06-05T12:23:26.550865",
     "exception": false,
     "start_time": "2024-06-05T12:23:26.521517",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(10000, 8)"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "26a7bb4e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-05T12:23:26.589619Z",
     "iopub.status.busy": "2024-06-05T12:23:26.589220Z",
     "iopub.status.idle": "2024-06-05T12:23:26.622593Z",
     "shell.execute_reply": "2024-06-05T12:23:26.621266Z"
    },
    "papermill": {
     "duration": 0.055163,
     "end_time": "2024-06-05T12:23:26.625064",
     "exception": false,
     "start_time": "2024-06-05T12:23:26.569901",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Index: 10000 entries, 25836 to 13348\n",
      "Data columns (total 8 columns):\n",
      " #   Column                  Non-Null Count  Dtype \n",
      "---  ------                  --------------  ----- \n",
      " 0   review_id               10000 non-null  object\n",
      " 1   user_name               10000 non-null  object\n",
      " 2   content                 10000 non-null  object\n",
      " 3   score                   10000 non-null  int64 \n",
      " 4   thumbs_up_count         10000 non-null  int64 \n",
      " 5   review_created_version  9190 non-null   object\n",
      " 6   at                      10000 non-null  object\n",
      " 7   app_version             9190 non-null   object\n",
      "dtypes: int64(2), object(6)\n",
      "memory usage: 703.1+ KB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "14bd2ff7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-05T12:23:26.663201Z",
     "iopub.status.busy": "2024-06-05T12:23:26.662343Z",
     "iopub.status.idle": "2024-06-05T12:23:26.678739Z",
     "shell.execute_reply": "2024-06-05T12:23:26.677558Z"
    },
    "papermill": {
     "duration": 0.038028,
     "end_time": "2024-06-05T12:23:26.681326",
     "exception": false,
     "start_time": "2024-06-05T12:23:26.643298",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "review_id                   0\n",
       "user_name                   0\n",
       "content                     0\n",
       "score                       0\n",
       "thumbs_up_count             0\n",
       "review_created_version    810\n",
       "at                          0\n",
       "app_version               810\n",
       "dtype: int64"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "f018fecb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-05T12:23:26.721178Z",
     "iopub.status.busy": "2024-06-05T12:23:26.720726Z",
     "iopub.status.idle": "2024-06-05T12:23:26.746216Z",
     "shell.execute_reply": "2024-06-05T12:23:26.745134Z"
    },
    "papermill": {
     "duration": 0.048129,
     "end_time": "2024-06-05T12:23:26.748671",
     "exception": false,
     "start_time": "2024-06-05T12:23:26.700542",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>count</th>\n",
       "      <th>mean</th>\n",
       "      <th>std</th>\n",
       "      <th>min</th>\n",
       "      <th>25%</th>\n",
       "      <th>50%</th>\n",
       "      <th>75%</th>\n",
       "      <th>max</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>score</th>\n",
       "      <td>10000.0</td>\n",
       "      <td>4.4910</td>\n",
       "      <td>1.099564</td>\n",
       "      <td>1.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>thumbs_up_count</th>\n",
       "      <td>10000.0</td>\n",
       "      <td>0.5045</td>\n",
       "      <td>10.666844</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>614.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                   count    mean        std  min  25%  50%  75%    max\n",
       "score            10000.0  4.4910   1.099564  1.0  5.0  5.0  5.0    5.0\n",
       "thumbs_up_count  10000.0  0.5045  10.666844  0.0  0.0  0.0  0.0  614.0"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.describe().T"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "8e1bd087",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-05T12:23:26.788273Z",
     "iopub.status.busy": "2024-06-05T12:23:26.787898Z",
     "iopub.status.idle": "2024-06-05T12:23:26.814168Z",
     "shell.execute_reply": "2024-06-05T12:23:26.812517Z"
    },
    "papermill": {
     "duration": 0.050114,
     "end_time": "2024-06-05T12:23:26.817311",
     "exception": false,
     "start_time": "2024-06-05T12:23:26.767197",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df = df.drop_duplicates()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "5e367508",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-05T12:23:26.856374Z",
     "iopub.status.busy": "2024-06-05T12:23:26.855972Z",
     "iopub.status.idle": "2024-06-05T12:23:26.870930Z",
     "shell.execute_reply": "2024-06-05T12:23:26.869824Z"
    },
    "papermill": {
     "duration": 0.037018,
     "end_time": "2024-06-05T12:23:26.873534",
     "exception": false,
     "start_time": "2024-06-05T12:23:26.836516",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df = df.dropna()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "dedc3971",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-05T12:23:26.974616Z",
     "iopub.status.busy": "2024-06-05T12:23:26.974176Z",
     "iopub.status.idle": "2024-06-05T12:23:26.981418Z",
     "shell.execute_reply": "2024-06-05T12:23:26.980285Z"
    },
    "papermill": {
     "duration": 0.030461,
     "end_time": "2024-06-05T12:23:26.983725",
     "exception": false,
     "start_time": "2024-06-05T12:23:26.953264",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(9164, 8)"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "0978ca4a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-05T12:23:27.024383Z",
     "iopub.status.busy": "2024-06-05T12:23:27.023987Z",
     "iopub.status.idle": "2024-06-05T12:23:27.038219Z",
     "shell.execute_reply": "2024-06-05T12:23:27.036987Z"
    },
    "papermill": {
     "duration": 0.036659,
     "end_time": "2024-06-05T12:23:27.040593",
     "exception": false,
     "start_time": "2024-06-05T12:23:27.003934",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>review_id</th>\n",
       "      <th>user_name</th>\n",
       "      <th>content</th>\n",
       "      <th>score</th>\n",
       "      <th>thumbs_up_count</th>\n",
       "      <th>review_created_version</th>\n",
       "      <th>at</th>\n",
       "      <th>app_version</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>25836</th>\n",
       "      <td>c28edc3e-6e95-42f1-8326-14b407a5712d</td>\n",
       "      <td>Kashan Raza</td>\n",
       "      <td>To be honest, its a very very helpful app, you...</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>1.2024.073</td>\n",
       "      <td>2024-03-25 19:40:02</td>\n",
       "      <td>1.2024.073</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20089</th>\n",
       "      <td>d9370369-98e4-4eb1-8e93-bf8b78c71964</td>\n",
       "      <td>Maryam Wazeer</td>\n",
       "      <td>great</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1.2024.122</td>\n",
       "      <td>2024-05-14 08:48:22</td>\n",
       "      <td>1.2024.122</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>42620</th>\n",
       "      <td>5c1c05c5-d7af-478d-94a6-8ccde546a1ed</td>\n",
       "      <td>Naqibullah Saeed</td>\n",
       "      <td>I found this app very useful that I have never...</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>1.2024.080</td>\n",
       "      <td>2024-03-29 10:20:14</td>\n",
       "      <td>1.2024.080</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>93775</th>\n",
       "      <td>e44aab9c-ed87-4785-b9bf-4076c3853c69</td>\n",
       "      <td>NAZEER</td>\n",
       "      <td>wonderful</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>1.2024.108</td>\n",
       "      <td>2024-04-26 22:37:14</td>\n",
       "      <td>1.2024.108</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>130376</th>\n",
       "      <td>e440739a-f4de-4777-9b9e-0e850bd438df</td>\n",
       "      <td>Harshil Thakor</td>\n",
       "      <td>Great experience</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>1.0.0022</td>\n",
       "      <td>2023-07-26 14:59:54</td>\n",
       "      <td>1.0.0022</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                   review_id         user_name  \\\n",
       "25836   c28edc3e-6e95-42f1-8326-14b407a5712d       Kashan Raza   \n",
       "20089   d9370369-98e4-4eb1-8e93-bf8b78c71964     Maryam Wazeer   \n",
       "42620   5c1c05c5-d7af-478d-94a6-8ccde546a1ed  Naqibullah Saeed   \n",
       "93775   e44aab9c-ed87-4785-b9bf-4076c3853c69            NAZEER   \n",
       "130376  e440739a-f4de-4777-9b9e-0e850bd438df    Harshil Thakor   \n",
       "\n",
       "                                                  content  score  \\\n",
       "25836   To be honest, its a very very helpful app, you...      5   \n",
       "20089                                               great      1   \n",
       "42620   I found this app very useful that I have never...      5   \n",
       "93775                                           wonderful      5   \n",
       "130376                                   Great experience      5   \n",
       "\n",
       "        thumbs_up_count review_created_version                   at  \\\n",
       "25836                 0             1.2024.073  2024-03-25 19:40:02   \n",
       "20089                 0             1.2024.122  2024-05-14 08:48:22   \n",
       "42620                 0             1.2024.080  2024-03-29 10:20:14   \n",
       "93775                 0             1.2024.108  2024-04-26 22:37:14   \n",
       "130376                0               1.0.0022  2023-07-26 14:59:54   \n",
       "\n",
       "       app_version  \n",
       "25836   1.2024.073  \n",
       "20089   1.2024.122  \n",
       "42620   1.2024.080  \n",
       "93775   1.2024.108  \n",
       "130376    1.0.0022  "
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "096c6518",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-05T12:23:27.081300Z",
     "iopub.status.busy": "2024-06-05T12:23:27.080304Z",
     "iopub.status.idle": "2024-06-05T12:23:27.090953Z",
     "shell.execute_reply": "2024-06-05T12:23:27.089560Z"
    },
    "papermill": {
     "duration": 0.03408,
     "end_time": "2024-06-05T12:23:27.093288",
     "exception": false,
     "start_time": "2024-06-05T12:23:27.059208",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "score\n",
       "5    7065\n",
       "4    1095\n",
       "1     483\n",
       "3     376\n",
       "2     145\n",
       "Name: count, dtype: int64"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['score'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "55e6a164",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-05T12:23:27.133306Z",
     "iopub.status.busy": "2024-06-05T12:23:27.132941Z",
     "iopub.status.idle": "2024-06-05T12:23:27.142161Z",
     "shell.execute_reply": "2024-06-05T12:23:27.140971Z"
    },
    "papermill": {
     "duration": 0.0326,
     "end_time": "2024-06-05T12:23:27.144883",
     "exception": false,
     "start_time": "2024-06-05T12:23:27.112283",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "thumbs_up_count\n",
       "0      8848\n",
       "1       179\n",
       "2        40\n",
       "3        21\n",
       "4         7\n",
       "5         7\n",
       "12        3\n",
       "16        3\n",
       "13        3\n",
       "9         3\n",
       "7         3\n",
       "6         3\n",
       "70        2\n",
       "10        2\n",
       "65        2\n",
       "11        2\n",
       "14        2\n",
       "15        2\n",
       "8         2\n",
       "159       1\n",
       "73        1\n",
       "37        1\n",
       "186       1\n",
       "614       1\n",
       "45        1\n",
       "19        1\n",
       "232       1\n",
       "139       1\n",
       "24        1\n",
       "47        1\n",
       "43        1\n",
       "25        1\n",
       "34        1\n",
       "30        1\n",
       "303       1\n",
       "447       1\n",
       "79        1\n",
       "113       1\n",
       "314       1\n",
       "152       1\n",
       "231       1\n",
       "265       1\n",
       "118       1\n",
       "50        1\n",
       "38        1\n",
       "23        1\n",
       "61        1\n",
       "92        1\n",
       "68        1\n",
       "Name: count, dtype: int64"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['thumbs_up_count'].value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c8225a6e",
   "metadata": {
    "papermill": {
     "duration": 0.019424,
     "end_time": "2024-06-05T12:23:27.183318",
     "exception": false,
     "start_time": "2024-06-05T12:23:27.163894",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Data Viz ##"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "77e202eb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-05T12:23:27.224709Z",
     "iopub.status.busy": "2024-06-05T12:23:27.224132Z",
     "iopub.status.idle": "2024-06-05T12:23:27.707622Z",
     "shell.execute_reply": "2024-06-05T12:23:27.706330Z"
    },
    "papermill": {
     "duration": 0.506989,
     "end_time": "2024-06-05T12:23:27.710094",
     "exception": false,
     "start_time": "2024-06-05T12:23:27.203105",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1500x500 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "df.hist(figsize=(15,5))\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "657ef69e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-05T12:23:27.751756Z",
     "iopub.status.busy": "2024-06-05T12:23:27.751318Z",
     "iopub.status.idle": "2024-06-05T12:23:28.047568Z",
     "shell.execute_reply": "2024-06-05T12:23:28.046551Z"
    },
    "papermill": {
     "duration": 0.319802,
     "end_time": "2024-06-05T12:23:28.050092",
     "exception": false,
     "start_time": "2024-06-05T12:23:27.730290",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.scatterplot(x = 'score', y='thumbs_up_count',data=df)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "75dbf420",
   "metadata": {
    "papermill": {
     "duration": 0.019426,
     "end_time": "2024-06-05T12:23:28.089585",
     "exception": false,
     "start_time": "2024-06-05T12:23:28.070159",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Feature Engineering ##"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "36c02c0f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-05T12:23:28.130688Z",
     "iopub.status.busy": "2024-06-05T12:23:28.130264Z",
     "iopub.status.idle": "2024-06-05T12:23:28.139254Z",
     "shell.execute_reply": "2024-06-05T12:23:28.137962Z"
    },
    "papermill": {
     "duration": 0.032678,
     "end_time": "2024-06-05T12:23:28.141911",
     "exception": false,
     "start_time": "2024-06-05T12:23:28.109233",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df.drop(columns=['review_id','user_name','at'], inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "dea2383e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-05T12:23:28.185229Z",
     "iopub.status.busy": "2024-06-05T12:23:28.184304Z",
     "iopub.status.idle": "2024-06-05T12:23:28.197232Z",
     "shell.execute_reply": "2024-06-05T12:23:28.196088Z"
    },
    "papermill": {
     "duration": 0.037208,
     "end_time": "2024-06-05T12:23:28.199553",
     "exception": false,
     "start_time": "2024-06-05T12:23:28.162345",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>content</th>\n",
       "      <th>score</th>\n",
       "      <th>thumbs_up_count</th>\n",
       "      <th>review_created_version</th>\n",
       "      <th>app_version</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>25836</th>\n",
       "      <td>To be honest, its a very very helpful app, you...</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>1.2024.073</td>\n",
       "      <td>1.2024.073</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20089</th>\n",
       "      <td>great</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1.2024.122</td>\n",
       "      <td>1.2024.122</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>42620</th>\n",
       "      <td>I found this app very useful that I have never...</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>1.2024.080</td>\n",
       "      <td>1.2024.080</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>93775</th>\n",
       "      <td>wonderful</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>1.2024.108</td>\n",
       "      <td>1.2024.108</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>130376</th>\n",
       "      <td>Great experience</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>1.0.0022</td>\n",
       "      <td>1.0.0022</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                  content  score  \\\n",
       "25836   To be honest, its a very very helpful app, you...      5   \n",
       "20089                                               great      1   \n",
       "42620   I found this app very useful that I have never...      5   \n",
       "93775                                           wonderful      5   \n",
       "130376                                   Great experience      5   \n",
       "\n",
       "        thumbs_up_count review_created_version app_version  \n",
       "25836                 0             1.2024.073  1.2024.073  \n",
       "20089                 0             1.2024.122  1.2024.122  \n",
       "42620                 0             1.2024.080  1.2024.080  \n",
       "93775                 0             1.2024.108  1.2024.108  \n",
       "130376                0               1.0.0022    1.0.0022  "
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cf32fa42",
   "metadata": {
    "papermill": {
     "duration": 0.020522,
     "end_time": "2024-06-05T12:23:28.240660",
     "exception": false,
     "start_time": "2024-06-05T12:23:28.220138",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Encoding ##"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "7745ec86",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-05T12:23:28.284126Z",
     "iopub.status.busy": "2024-06-05T12:23:28.283701Z",
     "iopub.status.idle": "2024-06-05T12:23:28.292415Z",
     "shell.execute_reply": "2024-06-05T12:23:28.291090Z"
    },
    "papermill": {
     "duration": 0.033457,
     "end_time": "2024-06-05T12:23:28.294924",
     "exception": false,
     "start_time": "2024-06-05T12:23:28.261467",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "le = LabelEncoder()\n",
    "df['review_created_version'] = le.fit_transform(df['review_created_version'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "c483155b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-05T12:23:28.339018Z",
     "iopub.status.busy": "2024-06-05T12:23:28.338602Z",
     "iopub.status.idle": "2024-06-05T12:23:28.349992Z",
     "shell.execute_reply": "2024-06-05T12:23:28.348604Z"
    },
    "papermill": {
     "duration": 0.036236,
     "end_time": "2024-06-05T12:23:28.352334",
     "exception": false,
     "start_time": "2024-06-05T12:23:28.316098",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "oe = OrdinalEncoder()\n",
    "df['app_version'] = oe.fit_transform(df[['app_version']]) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "7e560561",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-05T12:23:28.396576Z",
     "iopub.status.busy": "2024-06-05T12:23:28.396124Z",
     "iopub.status.idle": "2024-06-05T12:23:28.409861Z",
     "shell.execute_reply": "2024-06-05T12:23:28.408677Z"
    },
    "papermill": {
     "duration": 0.039088,
     "end_time": "2024-06-05T12:23:28.412279",
     "exception": false,
     "start_time": "2024-06-05T12:23:28.373191",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>content</th>\n",
       "      <th>score</th>\n",
       "      <th>thumbs_up_count</th>\n",
       "      <th>review_created_version</th>\n",
       "      <th>app_version</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>25836</th>\n",
       "      <td>To be honest, its a very very helpful app, you...</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>38</td>\n",
       "      <td>38.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20089</th>\n",
       "      <td>great</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>45</td>\n",
       "      <td>45.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>42620</th>\n",
       "      <td>I found this app very useful that I have never...</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>39</td>\n",
       "      <td>39.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>93775</th>\n",
       "      <td>wonderful</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>43</td>\n",
       "      <td>43.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>130376</th>\n",
       "      <td>Great experience</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                  content  score  \\\n",
       "25836   To be honest, its a very very helpful app, you...      5   \n",
       "20089                                               great      1   \n",
       "42620   I found this app very useful that I have never...      5   \n",
       "93775                                           wonderful      5   \n",
       "130376                                   Great experience      5   \n",
       "\n",
       "        thumbs_up_count  review_created_version  app_version  \n",
       "25836                 0                      38         38.0  \n",
       "20089                 0                      45         45.0  \n",
       "42620                 0                      39         39.0  \n",
       "93775                 0                      43         43.0  \n",
       "130376                0                       1          1.0  "
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "98dcf370",
   "metadata": {
    "papermill": {
     "duration": 0.021517,
     "end_time": "2024-06-05T12:23:28.454659",
     "exception": false,
     "start_time": "2024-06-05T12:23:28.433142",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Applying NLP to Analyze Content ##"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "1fc190c8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-05T12:23:28.498641Z",
     "iopub.status.busy": "2024-06-05T12:23:28.498220Z",
     "iopub.status.idle": "2024-06-05T12:23:28.508803Z",
     "shell.execute_reply": "2024-06-05T12:23:28.507508Z"
    },
    "papermill": {
     "duration": 0.035784,
     "end_time": "2024-06-05T12:23:28.511735",
     "exception": false,
     "start_time": "2024-06-05T12:23:28.475951",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "25836     To be honest, its a very very helpful app, you...\n",
       "20089                                                 great\n",
       "42620     I found this app very useful that I have never...\n",
       "93775                                             wonderful\n",
       "130376                                     Great experience\n",
       "                                ...                        \n",
       "111882                                                   op\n",
       "75366                                         this app best\n",
       "900                         the best outcome out of bestü§§ü§§ü§§\n",
       "46750     One of the best AI app till now. I hope ChatGP...\n",
       "13348                                    really helps a lot\n",
       "Name: content, Length: 9164, dtype: object"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['content']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "bd6a20eb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-05T12:23:28.555092Z",
     "iopub.status.busy": "2024-06-05T12:23:28.554708Z",
     "iopub.status.idle": "2024-06-05T12:23:28.570137Z",
     "shell.execute_reply": "2024-06-05T12:23:28.568797Z"
    },
    "papermill": {
     "duration": 0.040067,
     "end_time": "2024-06-05T12:23:28.572539",
     "exception": false,
     "start_time": "2024-06-05T12:23:28.532472",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "25836     to be honest, its a very very helpful app, you...\n",
       "20089                                                 great\n",
       "42620     i found this app very useful that i have never...\n",
       "93775                                             wonderful\n",
       "130376                                     great experience\n",
       "                                ...                        \n",
       "111882                                                   op\n",
       "75366                                         this app best\n",
       "900                         the best outcome out of bestü§§ü§§ü§§\n",
       "46750     one of the best ai app till now. i hope chatgp...\n",
       "13348                                    really helps a lot\n",
       "Name: content, Length: 9164, dtype: object"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['content'] = df['content'].str.lower()\n",
    "df['content']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "bdbc24bd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-05T12:23:28.616603Z",
     "iopub.status.busy": "2024-06-05T12:23:28.615829Z",
     "iopub.status.idle": "2024-06-05T12:23:28.638352Z",
     "shell.execute_reply": "2024-06-05T12:23:28.637030Z"
    },
    "papermill": {
     "duration": 0.047976,
     "end_time": "2024-06-05T12:23:28.641375",
     "exception": false,
     "start_time": "2024-06-05T12:23:28.593399",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "25836     to be honest, its a very very helpful app, you...\n",
       "20089                                                 great\n",
       "42620     i found this app very useful that i have never...\n",
       "93775                                             wonderful\n",
       "130376                                     great experience\n",
       "88674          worest aap.this aap 100 time batter doubtnut\n",
       "70833                                not giving what i need\n",
       "3384      ·Ä°·Äô·Ä∫·Ä¨·Ä∏·ÇÄ·ÄÄ·ÄÆ·Ä∏·Ä±·Äô·Ä∏·Äú·Ä≠·ÄØ·Çî·Äô·Äõ·Äò·Ä∞·Ä∏ ·Ä°·Äª·ÄÅ·Ä¨·Ä∏·Äò·Ä¨·Äû·Ä¨·Äî·Ä≤·Çî·Ä±·Äõ·Ä∏·Äª·Äï·ÄÅ·Ä≠·ÄØ·ÄÑ·Äπ·Ä∏·Äú...\n",
       "90751                                                nice üëç\n",
       "21491                                         life-changing\n",
       "98988                                          excellent üëçüèª\n",
       "18710                                        heel veel goed\n",
       "36569     i gave to admitt that this app is really great...\n",
       "120126                                                  wow\n",
       "95279                                              nice all\n",
       "29382     that's really good for studying and working of...\n",
       "64619                                         we need photo\n",
       "121187                                             just wow\n",
       "10411                                           best ai app\n",
       "128351                                            very good\n",
       "Name: content, dtype: object"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def remove_html_tags(text):\n",
    "    clean_text = re.sub('<.*>', '', text)\n",
    "    return clean_text\n",
    "\n",
    "df['content'] = df['content'].apply(remove_html_tags)\n",
    "df['content'].head(20)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "df1ae37c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-05T12:23:28.685201Z",
     "iopub.status.busy": "2024-06-05T12:23:28.684255Z",
     "iopub.status.idle": "2024-06-05T12:23:28.722165Z",
     "shell.execute_reply": "2024-06-05T12:23:28.721003Z"
    },
    "papermill": {
     "duration": 0.06237,
     "end_time": "2024-06-05T12:23:28.724731",
     "exception": false,
     "start_time": "2024-06-05T12:23:28.662361",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "25836     to be honest, its a very very helpful app, you...\n",
       "20089                                                 great\n",
       "42620     i found this app very useful that i have never...\n",
       "93775                                             wonderful\n",
       "130376                                     great experience\n",
       "88674          worest aap.this aap 100 time batter doubtnut\n",
       "70833                                not giving what i need\n",
       "3384      ·Ä°·Äô·Ä∫·Ä¨·Ä∏·ÇÄ·ÄÄ·ÄÆ·Ä∏·Ä±·Äô·Ä∏·Äú·Ä≠·ÄØ·Çî·Äô·Äõ·Äò·Ä∞·Ä∏ ·Ä°·Äª·ÄÅ·Ä¨·Ä∏·Äò·Ä¨·Äû·Ä¨·Äî·Ä≤·Çî·Ä±·Äõ·Ä∏·Äª·Äï·ÄÅ·Ä≠·ÄØ·ÄÑ·Äπ·Ä∏·Äú...\n",
       "90751                                                nice üëç\n",
       "21491                                         life-changing\n",
       "98988                                          excellent üëçüèª\n",
       "18710                                        heel veel goed\n",
       "36569     i gave to admitt that this app is really great...\n",
       "120126                                                  wow\n",
       "95279                                              nice all\n",
       "29382     that's really good for studying and working of...\n",
       "64619                                         we need photo\n",
       "121187                                             just wow\n",
       "10411                                           best ai app\n",
       "128351                                            very good\n",
       "Name: content, dtype: object"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def remove_urls(text):\n",
    "    url_pattern = re.compile(r'https?://\\S+|www\\.\\S+')\n",
    "    clean_text = re.sub(url_pattern, '', text)\n",
    "    return clean_text\n",
    "\n",
    "df['content'] = df['content'].apply(remove_urls)\n",
    "df['content'].head(20)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "72d69083",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-05T12:23:28.770068Z",
     "iopub.status.busy": "2024-06-05T12:23:28.769673Z",
     "iopub.status.idle": "2024-06-05T12:23:28.821025Z",
     "shell.execute_reply": "2024-06-05T12:23:28.819830Z"
    },
    "papermill": {
     "duration": 0.076827,
     "end_time": "2024-06-05T12:23:28.823547",
     "exception": false,
     "start_time": "2024-06-05T12:23:28.746720",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "25836     to be honest its a very very helpful app you c...\n",
       "20089                                                 great\n",
       "42620     i found this app very useful that i have never...\n",
       "93775                                             wonderful\n",
       "130376                                     great experience\n",
       "88674           worest aapthis aap 100 time batter doubtnut\n",
       "70833                                not giving what i need\n",
       "3384      ·Ä°·Äô·Ä∫·Ä¨·Ä∏·ÇÄ·ÄÄ·ÄÆ·Ä∏·Ä±·Äô·Ä∏·Äú·Ä≠·ÄØ·Çî·Äô·Äõ·Äò·Ä∞·Ä∏ ·Ä°·Äª·ÄÅ·Ä¨·Ä∏·Äò·Ä¨·Äû·Ä¨·Äî·Ä≤·Çî·Ä±·Äõ·Ä∏·Äª·Äï·ÄÅ·Ä≠·ÄØ·ÄÑ·Äπ·Ä∏·Äú...\n",
       "90751                                                nice üëç\n",
       "21491                                          lifechanging\n",
       "98988                                          excellent üëçüèª\n",
       "18710                                        heel veel goed\n",
       "36569     i gave to admitt that this app is really great...\n",
       "120126                                                  wow\n",
       "95279                                              nice all\n",
       "29382     thats really good for studying and working of ...\n",
       "64619                                         we need photo\n",
       "121187                                             just wow\n",
       "10411                                           best ai app\n",
       "128351                                            very good\n",
       "Name: content, dtype: object"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def remove_punc(text):\n",
    "    punc = string.punctuation\n",
    "    clean_text = text.translate(str.maketrans('','', punc))\n",
    "    return clean_text\n",
    "\n",
    "df['content'] = df['content'].apply(remove_punc)\n",
    "df['content'].head(20)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "8facbfb9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-05T12:23:28.868864Z",
     "iopub.status.busy": "2024-06-05T12:23:28.868456Z",
     "iopub.status.idle": "2024-06-05T12:23:28.918483Z",
     "shell.execute_reply": "2024-06-05T12:23:28.917440Z"
    },
    "papermill": {
     "duration": 0.074864,
     "end_time": "2024-06-05T12:23:28.920763",
     "exception": false,
     "start_time": "2024-06-05T12:23:28.845899",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "25836     to be honest its a very very helpful app you c...\n",
       "20089                                                 great\n",
       "42620     i found this app very useful that i have never...\n",
       "93775                                             wonderful\n",
       "130376                                     great experience\n",
       "88674           worest aapthis aap 100 time batter doubtnut\n",
       "70833                                not giving what i need\n",
       "3384      ·Ä°·Äô·Ä∫·Ä¨·Ä∏·ÇÄ·ÄÄ·ÄÆ·Ä∏·Ä±·Äô·Ä∏·Äú·Ä≠·ÄØ·Çî·Äô·Äõ·Äò·Ä∞·Ä∏ ·Ä°·Äª·ÄÅ·Ä¨·Ä∏·Äò·Ä¨·Äû·Ä¨·Äî·Ä≤·Çî·Ä±·Äõ·Ä∏·Äª·Äï·ÄÅ·Ä≠·ÄØ·ÄÑ·Äπ·Ä∏·Äú...\n",
       "90751                                                nice üëç\n",
       "21491                                          lifechanging\n",
       "98988                                          excellent üëçüèª\n",
       "18710                                        heel veel goed\n",
       "36569     i gave to admitt that this app is really great...\n",
       "120126                                                  wow\n",
       "95279                                              nice all\n",
       "29382     thats really good for studying and working of ...\n",
       "64619                                         we need photo\n",
       "121187                                             just wow\n",
       "10411                                           best ai app\n",
       "128351                                            very good\n",
       "Name: content, dtype: object"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "chat_words_mapping = {\n",
    "    \"lol\": \"laughing out loud\",\n",
    "    \"brb\": \"be right back\",\n",
    "    \"btw\": \"by the way\",\n",
    "    \"afk\": \"away from keyboard\",\n",
    "    \"rofl\": \"rolling on the floor laughing\",\n",
    "    \"ttyl\": \"talk to you later\",\n",
    "    \"np\": \"no problem\",\n",
    "    \"thx\": \"thanks\",\n",
    "    \"omg\": \"oh my god\",\n",
    "    \"idk\": \"I don't know\",\n",
    "    \"np\": \"no problem\",\n",
    "    \"gg\": \"good game\",\n",
    "    \"g2g\": \"got to go\",\n",
    "    \"b4\": \"before\",\n",
    "    \"cu\": \"see you\",\n",
    "    \"yw\": \"you're welcome\",\n",
    "    \"wtf\": \"what the f*ck\",\n",
    "    \"imho\": \"in my humble opinion\",\n",
    "    \"jk\": \"just kidding\",\n",
    "    \"gf\": \"girlfriend\",\n",
    "    \"bf\": \"boyfriend\",\n",
    "    \"u\": \"you\",\n",
    "    \"r\": \"are\",\n",
    "    \"2\": \"to\",\n",
    "    \"4\": \"for\",\n",
    "    \"b\": \"be\",\n",
    "    \"c\": \"see\",\n",
    "    \"y\": \"why\",\n",
    "    \"tho\": \"though\",\n",
    "    \"smh\": \"shaking my head\",\n",
    "    \"lolz\": \"laughing out loud\",\n",
    "    \"h8\": \"hate\",\n",
    "    \"luv\": \"love\",\n",
    "    \"pls\": \"please\",\n",
    "    \"sry\": \"sorry\",\n",
    "    \"tbh\": \"to be honest\",\n",
    "    \"omw\": \"on my way\",\n",
    "    \"omw2syg\": \"on my way to see your girlfriend\",\n",
    "}\n",
    "\n",
    "def expand_chat_words(text):\n",
    "    words = text.split()\n",
    "    expanded_words = [chat_words_mapping.get(word.lower(), word) for word in words]\n",
    "    return ' '.join(expanded_words)\n",
    "\n",
    "df['content'] = df['content'].apply(expand_chat_words)\n",
    "df['content'].head(20)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "df36835b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-05T12:23:28.965616Z",
     "iopub.status.busy": "2024-06-05T12:23:28.965215Z",
     "iopub.status.idle": "2024-06-05T12:23:28.971264Z",
     "shell.execute_reply": "2024-06-05T12:23:28.970207Z"
    },
    "papermill": {
     "duration": 0.03153,
     "end_time": "2024-06-05T12:23:28.973601",
     "exception": false,
     "start_time": "2024-06-05T12:23:28.942071",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def remove_stop_words(text):\n",
    "    tokens = nltk.word_tokenize(text)\n",
    "    stop_words = set(stopwords.words('english'))\n",
    "    filtered_tokens = [token for token in tokens if token not in stop_words]\n",
    "    preprocessed_text = ''.join(filtered_tokens)\n",
    "    return preprocessed_text"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "e5a50152",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-05T12:23:29.021463Z",
     "iopub.status.busy": "2024-06-05T12:23:29.021076Z",
     "iopub.status.idle": "2024-06-05T12:23:31.734718Z",
     "shell.execute_reply": "2024-06-05T12:23:31.733655Z"
    },
    "papermill": {
     "duration": 2.741981,
     "end_time": "2024-06-05T12:23:31.737130",
     "exception": false,
     "start_time": "2024-06-05T12:23:28.995149",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "25836     honesthelpfulappaskquestionstudyrelatedeveryth...\n",
       "20089                                                 great\n",
       "42620                               foundappusefulneverseen\n",
       "93775                                             wonderful\n",
       "130376                                      greatexperience\n",
       "                                ...                        \n",
       "111882                                                   op\n",
       "75366                                               appbest\n",
       "900                                      bestoutcomebestü§§ü§§ü§§\n",
       "46750                   onebestaiapptillhopechatgptcomesoon\n",
       "13348                                        reallyhelpslot\n",
       "Name: content, Length: 9164, dtype: object"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['content'] = df['content'].apply(remove_stop_words)\n",
    "df['content']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "afab21f3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-05T12:23:31.789769Z",
     "iopub.status.busy": "2024-06-05T12:23:31.789049Z",
     "iopub.status.idle": "2024-06-05T12:23:31.796473Z",
     "shell.execute_reply": "2024-06-05T12:23:31.795151Z"
    },
    "papermill": {
     "duration": 0.037083,
     "end_time": "2024-06-05T12:23:31.798886",
     "exception": false,
     "start_time": "2024-06-05T12:23:31.761803",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def replace_emojis_with_meanings(text):\n",
    "    def replace(match):\n",
    "        emoji_char = match.group()\n",
    "        emoji_meaning = emoji.demojize(emoji_char)\n",
    "        return emoji_meaning\n",
    "\n",
    "    emoji_pattern = re.compile(\"[\"\n",
    "                            u\"\\U0001F600-\\U0001F64F\"\n",
    "                            u\"\\U0001F300-\\U0001F5FF\"\n",
    "                            u\"\\U0001F680-\\U0001F6FF\"\n",
    "                            u\"\\U0001F1E0-\\U0001F1FF\"\n",
    "                            u\"\\U00002500-\\U00002BEF\"\n",
    "                            u\"\\U00002702-\\U000027B0\"\n",
    "                            u\"\\U00002702-\\U000027B0\"\n",
    "                            u\"\\U000024C2-\\U0001F251\"\n",
    "                            u\"\\U0001f926-\\U0001f937\"\n",
    "                            u\"\\U00010000-\\U0010ffff\"\n",
    "                            u\"\\u2640-\\u2642\"\n",
    "                            u\"\\u2600-\\u2B55\"\n",
    "                            u\"\\u200d\"\n",
    "                            u\"\\u23cf\"\n",
    "                            u\"\\u23e9\"\n",
    "                            u\"\\u231a\"\n",
    "                            u\"\\ufe0f\"\n",
    "                            u\"\\u3030\"\n",
    "                            \"]+\", flags=re.UNICODE)\n",
    "    text_with_meanings = emoji_pattern.sub(replace, text)\n",
    "    return text_with_meanings"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "10d63fea",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-05T12:23:31.844057Z",
     "iopub.status.busy": "2024-06-05T12:23:31.843665Z",
     "iopub.status.idle": "2024-06-05T12:23:31.913053Z",
     "shell.execute_reply": "2024-06-05T12:23:31.911859Z"
    },
    "papermill": {
     "duration": 0.095069,
     "end_time": "2024-06-05T12:23:31.915695",
     "exception": false,
     "start_time": "2024-06-05T12:23:31.820626",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "25836     honesthelpfulappaskquestionstudyrelatedeveryth...\n",
       "20089                                                 great\n",
       "42620                               foundappusefulneverseen\n",
       "93775                                             wonderful\n",
       "130376                                      greatexperience\n",
       "                                ...                        \n",
       "111882                                                   op\n",
       "75366                                               appbest\n",
       "900       bestoutcomebest:drooling_face::drooling_face::...\n",
       "46750                   onebestaiapptillhopechatgptcomesoon\n",
       "13348                                        reallyhelpslot\n",
       "Name: content, Length: 9164, dtype: object"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['content'] = df['content'].apply(replace_emojis_with_meanings)\n",
    "df['content']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "56350a4b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-05T12:23:31.961589Z",
     "iopub.status.busy": "2024-06-05T12:23:31.960385Z",
     "iopub.status.idle": "2024-06-05T12:23:31.965937Z",
     "shell.execute_reply": "2024-06-05T12:23:31.964769Z"
    },
    "papermill": {
     "duration": 0.030783,
     "end_time": "2024-06-05T12:23:31.968224",
     "exception": false,
     "start_time": "2024-06-05T12:23:31.937441",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def word_tokenization(text):\n",
    "    return nltk.word_tokenize(text)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "89a1fd33",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-05T12:23:32.013180Z",
     "iopub.status.busy": "2024-06-05T12:23:32.012534Z",
     "iopub.status.idle": "2024-06-05T12:23:33.262008Z",
     "shell.execute_reply": "2024-06-05T12:23:33.260938Z"
    },
    "papermill": {
     "duration": 1.274857,
     "end_time": "2024-06-05T12:23:33.264532",
     "exception": false,
     "start_time": "2024-06-05T12:23:31.989675",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "25836     [honesthelpfulappaskquestionstudyrelatedeveryt...\n",
       "20089                                               [great]\n",
       "42620                             [foundappusefulneverseen]\n",
       "93775                                           [wonderful]\n",
       "130376                                    [greatexperience]\n",
       "                                ...                        \n",
       "111882                                                 [op]\n",
       "75366                                             [appbest]\n",
       "900       [bestoutcomebest, :, drooling_face, :, :drooli...\n",
       "46750                 [onebestaiapptillhopechatgptcomesoon]\n",
       "13348                                      [reallyhelpslot]\n",
       "Name: token_content, Length: 9164, dtype: object"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['token_content'] = df['content'].apply(word_tokenization)\n",
    "df['token_content']"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "064b1fea",
   "metadata": {
    "papermill": {
     "duration": 0.021407,
     "end_time": "2024-06-05T12:23:33.308102",
     "exception": false,
     "start_time": "2024-06-05T12:23:33.286695",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Part of Speech Tagging (POS Tagging) ##"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "6ca47211",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-05T12:23:33.355447Z",
     "iopub.status.busy": "2024-06-05T12:23:33.355037Z",
     "iopub.status.idle": "2024-06-05T12:23:39.560970Z",
     "shell.execute_reply": "2024-06-05T12:23:39.559677Z"
    },
    "papermill": {
     "duration": 6.233241,
     "end_time": "2024-06-05T12:23:39.563946",
     "exception": false,
     "start_time": "2024-06-05T12:23:33.330705",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| 184/184 [00:05<00:00, 35.88it/s]\n"
     ]
    }
   ],
   "source": [
    "nlp = spacy.load('en_core_web_sm', disable=['ner', 'textcat'])\n",
    "\n",
    "def batch_pos_tagging(texts):\n",
    "    docs = list(nlp.pipe(texts, batch_size=50))\n",
    "    return [[(token.text, token.pos_) for token in doc] for doc in docs]\n",
    "\n",
    "batch_size = 50\n",
    "num_batches = len(df) // batch_size + 1\n",
    "\n",
    "pos_tags = []\n",
    "for i in tqdm(range(num_batches)):\n",
    "    start = i * batch_size\n",
    "    end = start + batch_size\n",
    "    batch_texts = df['content'][start:end].tolist()\n",
    "    pos_tags.extend(batch_pos_tagging(batch_texts))\n",
    "\n",
    "df['POS_Tags'] = pos_tags"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "914d32bc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-05T12:23:39.617527Z",
     "iopub.status.busy": "2024-06-05T12:23:39.617092Z",
     "iopub.status.idle": "2024-06-05T12:23:39.623375Z",
     "shell.execute_reply": "2024-06-05T12:23:39.622240Z"
    },
    "papermill": {
     "duration": 0.035993,
     "end_time": "2024-06-05T12:23:39.625652",
     "exception": false,
     "start_time": "2024-06-05T12:23:39.589659",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df.rename(columns={'POS_Tags': 'pos_tags'}, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "ae291ee2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-05T12:23:39.677604Z",
     "iopub.status.busy": "2024-06-05T12:23:39.677180Z",
     "iopub.status.idle": "2024-06-05T12:23:39.688825Z",
     "shell.execute_reply": "2024-06-05T12:23:39.687748Z"
    },
    "papermill": {
     "duration": 0.040638,
     "end_time": "2024-06-05T12:23:39.691167",
     "exception": false,
     "start_time": "2024-06-05T12:23:39.650529",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "25836     [(honesthelpfulappaskquestionstudyrelatedevery...\n",
       "20089                                        [(great, ADJ)]\n",
       "42620                     [(foundappusefulneverseen, NOUN)]\n",
       "93775                                    [(wonderful, ADJ)]\n",
       "130376                            [(greatexperience, VERB)]\n",
       "                                ...                        \n",
       "111882                                         [(op, NOUN)]\n",
       "75366                                      [(appbest, ADJ)]\n",
       "900       [(bestoutcomebest, ADJ), (:, PUNCT), (drooling...\n",
       "46750         [(onebestaiapptillhopechatgptcomesoon, NOUN)]\n",
       "13348                              [(reallyhelpslot, NOUN)]\n",
       "Name: pos_tags, Length: 9164, dtype: object"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['pos_tags']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "22509150",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-05T12:23:39.745603Z",
     "iopub.status.busy": "2024-06-05T12:23:39.745165Z",
     "iopub.status.idle": "2024-06-05T12:23:39.781025Z",
     "shell.execute_reply": "2024-06-05T12:23:39.779792Z"
    },
    "papermill": {
     "duration": 0.065132,
     "end_time": "2024-06-05T12:23:39.783450",
     "exception": false,
     "start_time": "2024-06-05T12:23:39.718318",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>content</th>\n",
       "      <th>score</th>\n",
       "      <th>thumbs_up_count</th>\n",
       "      <th>review_created_version</th>\n",
       "      <th>app_version</th>\n",
       "      <th>token_content</th>\n",
       "      <th>pos_tags</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>25836</th>\n",
       "      <td>honesthelpfulappaskquestionstudyrelatedeveryth...</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>38</td>\n",
       "      <td>38.0</td>\n",
       "      <td>[honesthelpfulappaskquestionstudyrelatedeveryt...</td>\n",
       "      <td>[(honesthelpfulappaskquestionstudyrelatedevery...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20089</th>\n",
       "      <td>great</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>45</td>\n",
       "      <td>45.0</td>\n",
       "      <td>[great]</td>\n",
       "      <td>[(great, ADJ)]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>42620</th>\n",
       "      <td>foundappusefulneverseen</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>39</td>\n",
       "      <td>39.0</td>\n",
       "      <td>[foundappusefulneverseen]</td>\n",
       "      <td>[(foundappusefulneverseen, NOUN)]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>93775</th>\n",
       "      <td>wonderful</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>43</td>\n",
       "      <td>43.0</td>\n",
       "      <td>[wonderful]</td>\n",
       "      <td>[(wonderful, ADJ)]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>130376</th>\n",
       "      <td>greatexperience</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1.0</td>\n",
       "      <td>[greatexperience]</td>\n",
       "      <td>[(greatexperience, VERB)]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>88674</th>\n",
       "      <td>worestaapthisaap100timebatterdoubtnut</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>12.0</td>\n",
       "      <td>[worestaapthisaap100timebatterdoubtnut]</td>\n",
       "      <td>[(worestaapthisaap100timebatterdoubtnut, NUM)]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>70833</th>\n",
       "      <td>givingneed</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>38</td>\n",
       "      <td>38.0</td>\n",
       "      <td>[givingneed]</td>\n",
       "      <td>[(givingneed, VERB)]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3384</th>\n",
       "      <td>·Ä°·Äô·Ä∫·Ä¨·Ä∏·ÇÄ·ÄÄ·ÄÆ·Ä∏·Ä±·Äô·Ä∏·Äú·Ä≠·ÄØ·Çî·Äô·Äõ·Äò·Ä∞·Ä∏·Ä°·Äª·ÄÅ·Ä¨·Ä∏·Äò·Ä¨·Äû·Ä¨·Äî·Ä≤·Çî·Ä±·Äõ·Ä∏·Äª·Äï·ÄÅ·Ä≠·ÄØ·ÄÑ·Äπ·Ä∏·Äú·Ä≤...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>47</td>\n",
       "      <td>47.0</td>\n",
       "      <td>[·Ä°·Äô·Ä∫·Ä¨·Ä∏·ÇÄ·ÄÄ·ÄÆ·Ä∏·Ä±·Äô·Ä∏·Äú·Ä≠·ÄØ·Çî·Äô·Äõ·Äò·Ä∞·Ä∏·Ä°·Äª·ÄÅ·Ä¨·Ä∏·Äò·Ä¨·Äû·Ä¨·Äî·Ä≤·Çî·Ä±·Äõ·Ä∏·Äª·Äï·ÄÅ·Ä≠·ÄØ·ÄÑ·Äπ·Ä∏·Äú...</td>\n",
       "      <td>[(·Ä°·Äô·Ä∫·Ä¨·Ä∏·ÇÄ·ÄÄ·ÄÆ·Ä∏·Ä±·Äô·Ä∏·Äú·Ä≠·ÄØ·Çî·Äô·Äõ·Äò·Ä∞·Ä∏·Ä°·Äª·ÄÅ·Ä¨·Ä∏·Äò·Ä¨·Äû·Ä¨·Äî·Ä≤·Çî·Ä±·Äõ·Ä∏·Äª·Äï·ÄÅ·Ä≠·ÄØ·ÄÑ·Äπ·Ä∏...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>90751</th>\n",
       "      <td>nice:thumbs_up:</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>44</td>\n",
       "      <td>44.0</td>\n",
       "      <td>[nice, :, thumbs_up, :]</td>\n",
       "      <td>[(nice, ADJ), (:, PUNCT), (thumbs_up, ADJ), (:...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21491</th>\n",
       "      <td>lifechanging</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>45</td>\n",
       "      <td>45.0</td>\n",
       "      <td>[lifechanging]</td>\n",
       "      <td>[(lifechanging, VERB)]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>98988</th>\n",
       "      <td>excellent:thumbs_up_light_skin_tone:</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>40</td>\n",
       "      <td>40.0</td>\n",
       "      <td>[excellent, :, thumbs_up_light_skin_tone, :]</td>\n",
       "      <td>[(excellent, ADJ), (:, PUNCT), (thumbs_up_ligh...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18710</th>\n",
       "      <td>heelveelgoed</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>47</td>\n",
       "      <td>47.0</td>\n",
       "      <td>[heelveelgoed]</td>\n",
       "      <td>[(heelveelgoed, VERB)]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>36569</th>\n",
       "      <td>gaveadmittappreallygreatalwaysusefuleveryquest...</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>22</td>\n",
       "      <td>22.0</td>\n",
       "      <td>[gaveadmittappreallygreatalwaysusefuleveryques...</td>\n",
       "      <td>[(gaveadmittappreallygreatalwaysusefuleveryque...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>120126</th>\n",
       "      <td>wow</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>23</td>\n",
       "      <td>23.0</td>\n",
       "      <td>[wow]</td>\n",
       "      <td>[(wow, INTJ)]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>95279</th>\n",
       "      <td>nice</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>42</td>\n",
       "      <td>42.0</td>\n",
       "      <td>[nice]</td>\n",
       "      <td>[(nice, ADJ)]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29382</th>\n",
       "      <td>thatsreallygoodstudyingworkingassignmentalsofi...</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>30</td>\n",
       "      <td>30.0</td>\n",
       "      <td>[thatsreallygoodstudyingworkingassignmentalsof...</td>\n",
       "      <td>[(thatsreallygoodstudyingworkingassignmentalso...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>64619</th>\n",
       "      <td>needphoto</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>40</td>\n",
       "      <td>40.0</td>\n",
       "      <td>[needphoto]</td>\n",
       "      <td>[(needphoto, NOUN)]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>121187</th>\n",
       "      <td>wow</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>22</td>\n",
       "      <td>22.0</td>\n",
       "      <td>[wow]</td>\n",
       "      <td>[(wow, INTJ)]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10411</th>\n",
       "      <td>bestaiapp</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>47</td>\n",
       "      <td>47.0</td>\n",
       "      <td>[bestaiapp]</td>\n",
       "      <td>[(bestaiapp, NOUN)]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>128351</th>\n",
       "      <td>good</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "      <td>6.0</td>\n",
       "      <td>[good]</td>\n",
       "      <td>[(good, ADJ)]</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                  content  score  \\\n",
       "25836   honesthelpfulappaskquestionstudyrelatedeveryth...      5   \n",
       "20089                                               great      1   \n",
       "42620                             foundappusefulneverseen      5   \n",
       "93775                                           wonderful      5   \n",
       "130376                                    greatexperience      5   \n",
       "88674               worestaapthisaap100timebatterdoubtnut      1   \n",
       "70833                                          givingneed      1   \n",
       "3384    ·Ä°·Äô·Ä∫·Ä¨·Ä∏·ÇÄ·ÄÄ·ÄÆ·Ä∏·Ä±·Äô·Ä∏·Äú·Ä≠·ÄØ·Çî·Äô·Äõ·Äò·Ä∞·Ä∏·Ä°·Äª·ÄÅ·Ä¨·Ä∏·Äò·Ä¨·Äû·Ä¨·Äî·Ä≤·Çî·Ä±·Äõ·Ä∏·Äª·Äï·ÄÅ·Ä≠·ÄØ·ÄÑ·Äπ·Ä∏·Äú·Ä≤...      1   \n",
       "90751                                     nice:thumbs_up:      4   \n",
       "21491                                        lifechanging      5   \n",
       "98988                excellent:thumbs_up_light_skin_tone:      5   \n",
       "18710                                        heelveelgoed      5   \n",
       "36569   gaveadmittappreallygreatalwaysusefuleveryquest...      5   \n",
       "120126                                                wow      5   \n",
       "95279                                                nice      5   \n",
       "29382   thatsreallygoodstudyingworkingassignmentalsofi...      5   \n",
       "64619                                           needphoto      4   \n",
       "121187                                                wow      5   \n",
       "10411                                           bestaiapp      5   \n",
       "128351                                               good      5   \n",
       "\n",
       "        thumbs_up_count  review_created_version  app_version  \\\n",
       "25836                 0                      38         38.0   \n",
       "20089                 0                      45         45.0   \n",
       "42620                 0                      39         39.0   \n",
       "93775                 0                      43         43.0   \n",
       "130376                0                       1          1.0   \n",
       "88674                 0                      12         12.0   \n",
       "70833                 0                      38         38.0   \n",
       "3384                  0                      47         47.0   \n",
       "90751                 0                      44         44.0   \n",
       "21491                 0                      45         45.0   \n",
       "98988                 0                      40         40.0   \n",
       "18710                 0                      47         47.0   \n",
       "36569                 0                      22         22.0   \n",
       "120126                0                      23         23.0   \n",
       "95279                 0                      42         42.0   \n",
       "29382                 0                      30         30.0   \n",
       "64619                 0                      40         40.0   \n",
       "121187                0                      22         22.0   \n",
       "10411                 0                      47         47.0   \n",
       "128351                0                       6          6.0   \n",
       "\n",
       "                                            token_content  \\\n",
       "25836   [honesthelpfulappaskquestionstudyrelatedeveryt...   \n",
       "20089                                             [great]   \n",
       "42620                           [foundappusefulneverseen]   \n",
       "93775                                         [wonderful]   \n",
       "130376                                  [greatexperience]   \n",
       "88674             [worestaapthisaap100timebatterdoubtnut]   \n",
       "70833                                        [givingneed]   \n",
       "3384    [·Ä°·Äô·Ä∫·Ä¨·Ä∏·ÇÄ·ÄÄ·ÄÆ·Ä∏·Ä±·Äô·Ä∏·Äú·Ä≠·ÄØ·Çî·Äô·Äõ·Äò·Ä∞·Ä∏·Ä°·Äª·ÄÅ·Ä¨·Ä∏·Äò·Ä¨·Äû·Ä¨·Äî·Ä≤·Çî·Ä±·Äõ·Ä∏·Äª·Äï·ÄÅ·Ä≠·ÄØ·ÄÑ·Äπ·Ä∏·Äú...   \n",
       "90751                             [nice, :, thumbs_up, :]   \n",
       "21491                                      [lifechanging]   \n",
       "98988        [excellent, :, thumbs_up_light_skin_tone, :]   \n",
       "18710                                      [heelveelgoed]   \n",
       "36569   [gaveadmittappreallygreatalwaysusefuleveryques...   \n",
       "120126                                              [wow]   \n",
       "95279                                              [nice]   \n",
       "29382   [thatsreallygoodstudyingworkingassignmentalsof...   \n",
       "64619                                         [needphoto]   \n",
       "121187                                              [wow]   \n",
       "10411                                         [bestaiapp]   \n",
       "128351                                             [good]   \n",
       "\n",
       "                                                 pos_tags  \n",
       "25836   [(honesthelpfulappaskquestionstudyrelatedevery...  \n",
       "20089                                      [(great, ADJ)]  \n",
       "42620                   [(foundappusefulneverseen, NOUN)]  \n",
       "93775                                  [(wonderful, ADJ)]  \n",
       "130376                          [(greatexperience, VERB)]  \n",
       "88674      [(worestaapthisaap100timebatterdoubtnut, NUM)]  \n",
       "70833                                [(givingneed, VERB)]  \n",
       "3384    [(·Ä°·Äô·Ä∫·Ä¨·Ä∏·ÇÄ·ÄÄ·ÄÆ·Ä∏·Ä±·Äô·Ä∏·Äú·Ä≠·ÄØ·Çî·Äô·Äõ·Äò·Ä∞·Ä∏·Ä°·Äª·ÄÅ·Ä¨·Ä∏·Äò·Ä¨·Äû·Ä¨·Äî·Ä≤·Çî·Ä±·Äõ·Ä∏·Äª·Äï·ÄÅ·Ä≠·ÄØ·ÄÑ·Äπ·Ä∏...  \n",
       "90751   [(nice, ADJ), (:, PUNCT), (thumbs_up, ADJ), (:...  \n",
       "21491                              [(lifechanging, VERB)]  \n",
       "98988   [(excellent, ADJ), (:, PUNCT), (thumbs_up_ligh...  \n",
       "18710                              [(heelveelgoed, VERB)]  \n",
       "36569   [(gaveadmittappreallygreatalwaysusefuleveryque...  \n",
       "120126                                      [(wow, INTJ)]  \n",
       "95279                                       [(nice, ADJ)]  \n",
       "29382   [(thatsreallygoodstudyingworkingassignmentalso...  \n",
       "64619                                 [(needphoto, NOUN)]  \n",
       "121187                                      [(wow, INTJ)]  \n",
       "10411                                 [(bestaiapp, NOUN)]  \n",
       "128351                                      [(good, ADJ)]  "
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head(20)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2f4af9e1",
   "metadata": {
    "papermill": {
     "duration": 0.025289,
     "end_time": "2024-06-05T12:23:39.834446",
     "exception": false,
     "start_time": "2024-06-05T12:23:39.809157",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Bag of Words ##"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "162e46f8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-05T12:23:39.889912Z",
     "iopub.status.busy": "2024-06-05T12:23:39.889482Z",
     "iopub.status.idle": "2024-06-05T12:23:40.891198Z",
     "shell.execute_reply": "2024-06-05T12:23:40.889545Z"
    },
    "papermill": {
     "duration": 1.032824,
     "end_time": "2024-06-05T12:23:40.893988",
     "exception": false,
     "start_time": "2024-06-05T12:23:39.861164",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df['content'] = df['content'].apply(lambda x: ' '.join(x) \n",
    "                                    if isinstance(x, list) \n",
    "                                    else x)\n",
    "df['token_content'] = df['token_content'].apply(lambda x: ' '.join(x) \n",
    "                                                if isinstance(x, list) \n",
    "                                                else x)\n",
    "df['pos_tags'] = df['pos_tags'].apply(lambda x: ' '.join(str(i) for i in x) \n",
    "                                      if isinstance(x, list) \n",
    "                                      else x)\n",
    "\n",
    "vectorizer = CountVectorizer(ngram_range = (2,2))\n",
    "\n",
    "bow_c = vectorizer.fit_transform(df['content'])\n",
    "bow_t = vectorizer.fit_transform(df['token_content'])\n",
    "bow_p = vectorizer.fit_transform(df['pos_tags'])\n",
    "\n",
    "df['content'] = bow_c.toarray()\n",
    "df['token_content'] = bow_t.toarray()\n",
    "df['pos_tags'] = bow_p.toarray()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "258f42b9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-05T12:23:40.946291Z",
     "iopub.status.busy": "2024-06-05T12:23:40.945894Z",
     "iopub.status.idle": "2024-06-05T12:23:40.962186Z",
     "shell.execute_reply": "2024-06-05T12:23:40.960815Z"
    },
    "papermill": {
     "duration": 0.045156,
     "end_time": "2024-06-05T12:23:40.964494",
     "exception": false,
     "start_time": "2024-06-05T12:23:40.919338",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>content</th>\n",
       "      <th>score</th>\n",
       "      <th>thumbs_up_count</th>\n",
       "      <th>review_created_version</th>\n",
       "      <th>app_version</th>\n",
       "      <th>token_content</th>\n",
       "      <th>pos_tags</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>25836</th>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>38</td>\n",
       "      <td>38.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20089</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>45</td>\n",
       "      <td>45.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>42620</th>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>39</td>\n",
       "      <td>39.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>93775</th>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>43</td>\n",
       "      <td>43.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>130376</th>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>88674</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>12.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>70833</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>38</td>\n",
       "      <td>38.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3384</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>47</td>\n",
       "      <td>47.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>90751</th>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>44</td>\n",
       "      <td>44.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21491</th>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>45</td>\n",
       "      <td>45.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>98988</th>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>40</td>\n",
       "      <td>40.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18710</th>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>47</td>\n",
       "      <td>47.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>36569</th>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>22</td>\n",
       "      <td>22.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>120126</th>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>23</td>\n",
       "      <td>23.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>95279</th>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>42</td>\n",
       "      <td>42.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29382</th>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>30</td>\n",
       "      <td>30.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>64619</th>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>40</td>\n",
       "      <td>40.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>121187</th>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>22</td>\n",
       "      <td>22.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10411</th>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>47</td>\n",
       "      <td>47.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>128351</th>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "      <td>6.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        content  score  thumbs_up_count  review_created_version  app_version  \\\n",
       "25836         0      5                0                      38         38.0   \n",
       "20089         0      1                0                      45         45.0   \n",
       "42620         0      5                0                      39         39.0   \n",
       "93775         0      5                0                      43         43.0   \n",
       "130376        0      5                0                       1          1.0   \n",
       "88674         0      1                0                      12         12.0   \n",
       "70833         0      1                0                      38         38.0   \n",
       "3384          0      1                0                      47         47.0   \n",
       "90751         0      4                0                      44         44.0   \n",
       "21491         0      5                0                      45         45.0   \n",
       "98988         0      5                0                      40         40.0   \n",
       "18710         0      5                0                      47         47.0   \n",
       "36569         0      5                0                      22         22.0   \n",
       "120126        0      5                0                      23         23.0   \n",
       "95279         0      5                0                      42         42.0   \n",
       "29382         0      5                0                      30         30.0   \n",
       "64619         0      4                0                      40         40.0   \n",
       "121187        0      5                0                      22         22.0   \n",
       "10411         0      5                0                      47         47.0   \n",
       "128351        0      5                0                       6          6.0   \n",
       "\n",
       "        token_content  pos_tags  \n",
       "25836               0         0  \n",
       "20089               0         0  \n",
       "42620               0         0  \n",
       "93775               0         0  \n",
       "130376              0         0  \n",
       "88674               0         0  \n",
       "70833               0         0  \n",
       "3384                0         0  \n",
       "90751               0         0  \n",
       "21491               0         0  \n",
       "98988               0         0  \n",
       "18710               0         0  \n",
       "36569               0         0  \n",
       "120126              0         0  \n",
       "95279               0         0  \n",
       "29382               0         0  \n",
       "64619               0         0  \n",
       "121187              0         0  \n",
       "10411               0         0  \n",
       "128351              0         0  "
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head(20)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "604e1a9f",
   "metadata": {
    "papermill": {
     "duration": 0.026645,
     "end_time": "2024-06-05T12:23:41.016708",
     "exception": false,
     "start_time": "2024-06-05T12:23:40.990063",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Test Train Split ##"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "850587ea",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-05T12:23:41.073996Z",
     "iopub.status.busy": "2024-06-05T12:23:41.073511Z",
     "iopub.status.idle": "2024-06-05T12:23:41.081108Z",
     "shell.execute_reply": "2024-06-05T12:23:41.079936Z"
    },
    "papermill": {
     "duration": 0.039482,
     "end_time": "2024-06-05T12:23:41.083529",
     "exception": false,
     "start_time": "2024-06-05T12:23:41.044047",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "X = df.drop(columns=['score'])\n",
    "y = df['score']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "f517a63f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-05T12:23:41.141095Z",
     "iopub.status.busy": "2024-06-05T12:23:41.140545Z",
     "iopub.status.idle": "2024-06-05T12:23:41.151790Z",
     "shell.execute_reply": "2024-06-05T12:23:41.150216Z"
    },
    "papermill": {
     "duration": 0.04335,
     "end_time": "2024-06-05T12:23:41.154204",
     "exception": false,
     "start_time": "2024-06-05T12:23:41.110854",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "X_train, X_test, y_train, y_test = train_test_split(X, y,\n",
    "                                                   test_size = 0.2,\n",
    "                                                   random_state = 42)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4b562084",
   "metadata": {
    "papermill": {
     "duration": 0.029044,
     "end_time": "2024-06-05T12:23:41.209491",
     "exception": false,
     "start_time": "2024-06-05T12:23:41.180447",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Decision Tree Classifier ##"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "2b9e75e7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-05T12:23:41.266138Z",
     "iopub.status.busy": "2024-06-05T12:23:41.265768Z",
     "iopub.status.idle": "2024-06-05T12:23:41.270743Z",
     "shell.execute_reply": "2024-06-05T12:23:41.269648Z"
    },
    "papermill": {
     "duration": 0.035052,
     "end_time": "2024-06-05T12:23:41.273174",
     "exception": false,
     "start_time": "2024-06-05T12:23:41.238122",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "dt = DecisionTreeClassifier()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "3987512f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-05T12:23:41.326960Z",
     "iopub.status.busy": "2024-06-05T12:23:41.326546Z",
     "iopub.status.idle": "2024-06-05T12:23:41.346268Z",
     "shell.execute_reply": "2024-06-05T12:23:41.345122Z"
    },
    "papermill": {
     "duration": 0.04948,
     "end_time": "2024-06-05T12:23:41.348696",
     "exception": false,
     "start_time": "2024-06-05T12:23:41.299216",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"‚ñ∏\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"‚ñæ\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>DecisionTreeClassifier()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">DecisionTreeClassifier</label><div class=\"sk-toggleable__content\"><pre>DecisionTreeClassifier()</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "DecisionTreeClassifier()"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dt.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "d309954e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-05T12:23:41.405616Z",
     "iopub.status.busy": "2024-06-05T12:23:41.405183Z",
     "iopub.status.idle": "2024-06-05T12:23:41.413332Z",
     "shell.execute_reply": "2024-06-05T12:23:41.412115Z"
    },
    "papermill": {
     "duration": 0.039306,
     "end_time": "2024-06-05T12:23:41.415859",
     "exception": false,
     "start_time": "2024-06-05T12:23:41.376553",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "y_pred = dt.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "3d64b566",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-05T12:23:41.470680Z",
     "iopub.status.busy": "2024-06-05T12:23:41.470245Z",
     "iopub.status.idle": "2024-06-05T12:23:41.486675Z",
     "shell.execute_reply": "2024-06-05T12:23:41.485309Z"
    },
    "papermill": {
     "duration": 0.04618,
     "end_time": "2024-06-05T12:23:41.489104",
     "exception": false,
     "start_time": "2024-06-05T12:23:41.442924",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "           1       0.50      0.05      0.08       108\n",
      "           2       0.00      0.00      0.00        25\n",
      "           3       0.00      0.00      0.00        74\n",
      "           4       0.08      0.00      0.01       228\n",
      "           5       0.77      0.99      0.87      1398\n",
      "\n",
      "    accuracy                           0.76      1833\n",
      "   macro avg       0.27      0.21      0.19      1833\n",
      "weighted avg       0.63      0.76      0.67      1833\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(classification_report(y_test, y_pred, zero_division = 0))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "aca8861c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-05T12:23:41.544361Z",
     "iopub.status.busy": "2024-06-05T12:23:41.543954Z",
     "iopub.status.idle": "2024-06-05T12:23:41.865947Z",
     "shell.execute_reply": "2024-06-05T12:23:41.864797Z"
    },
    "papermill": {
     "duration": 0.352796,
     "end_time": "2024-06-05T12:23:41.868385",
     "exception": false,
     "start_time": "2024-06-05T12:23:41.515589",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 500x500 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "cm = confusion_matrix(y_test, y_pred)\n",
    "cm_display = ConfusionMatrixDisplay(confusion_matrix = cm)\n",
    "\n",
    "fig, ax = plt.subplots(figsize = (5,5))\n",
    "cm_display.plot(ax = ax)\n",
    "plt.title('Confusion Matrix')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "679960f2",
   "metadata": {
    "papermill": {
     "duration": 0.026448,
     "end_time": "2024-06-05T12:23:41.921520",
     "exception": false,
     "start_time": "2024-06-05T12:23:41.895072",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Random Forest Classifier ###"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "010f16ef",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-05T12:23:41.978493Z",
     "iopub.status.busy": "2024-06-05T12:23:41.978062Z",
     "iopub.status.idle": "2024-06-05T12:23:41.983350Z",
     "shell.execute_reply": "2024-06-05T12:23:41.982083Z"
    },
    "papermill": {
     "duration": 0.037827,
     "end_time": "2024-06-05T12:23:41.985960",
     "exception": false,
     "start_time": "2024-06-05T12:23:41.948133",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "rf = RandomForestClassifier()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "10e74b2f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-05T12:23:42.042218Z",
     "iopub.status.busy": "2024-06-05T12:23:42.041824Z",
     "iopub.status.idle": "2024-06-05T12:23:42.552165Z",
     "shell.execute_reply": "2024-06-05T12:23:42.550362Z"
    },
    "papermill": {
     "duration": 0.541464,
     "end_time": "2024-06-05T12:23:42.554838",
     "exception": false,
     "start_time": "2024-06-05T12:23:42.013374",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-2 {color: black;background-color: white;}#sk-container-id-2 pre{padding: 0;}#sk-container-id-2 div.sk-toggleable {background-color: white;}#sk-container-id-2 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-2 label.sk-toggleable__label-arrow:before {content: \"‚ñ∏\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-2 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-2 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-2 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"‚ñæ\";}#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-2 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-2 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-2 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-2 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-2 div.sk-item {position: relative;z-index: 1;}#sk-container-id-2 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-2 div.sk-item::before, #sk-container-id-2 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-2 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-2 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-2 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-2 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-2 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-2 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-2 div.sk-label-container {text-align: center;}#sk-container-id-2 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-2 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>RandomForestClassifier()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" checked><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">RandomForestClassifier</label><div class=\"sk-toggleable__content\"><pre>RandomForestClassifier()</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "RandomForestClassifier()"
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rf.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "8348a85c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-05T12:23:42.613059Z",
     "iopub.status.busy": "2024-06-05T12:23:42.612675Z",
     "iopub.status.idle": "2024-06-05T12:23:42.650310Z",
     "shell.execute_reply": "2024-06-05T12:23:42.648512Z"
    },
    "papermill": {
     "duration": 0.072343,
     "end_time": "2024-06-05T12:23:42.654298",
     "exception": false,
     "start_time": "2024-06-05T12:23:42.581955",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "y_pred = rf.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "d586f039",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-05T12:23:42.721179Z",
     "iopub.status.busy": "2024-06-05T12:23:42.719458Z",
     "iopub.status.idle": "2024-06-05T12:23:42.738642Z",
     "shell.execute_reply": "2024-06-05T12:23:42.736126Z"
    },
    "papermill": {
     "duration": 0.056449,
     "end_time": "2024-06-05T12:23:42.741948",
     "exception": false,
     "start_time": "2024-06-05T12:23:42.685499",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "           1       0.30      0.03      0.05       108\n",
      "           2       0.00      0.00      0.00        25\n",
      "           3       0.00      0.00      0.00        74\n",
      "           4       0.00      0.00      0.00       228\n",
      "           5       0.77      0.99      0.86      1398\n",
      "\n",
      "    accuracy                           0.76      1833\n",
      "   macro avg       0.21      0.20      0.18      1833\n",
      "weighted avg       0.60      0.76      0.66      1833\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(classification_report(y_test, y_pred, zero_division=0))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "4be11f75",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-05T12:23:42.801315Z",
     "iopub.status.busy": "2024-06-05T12:23:42.800901Z",
     "iopub.status.idle": "2024-06-05T12:23:43.495588Z",
     "shell.execute_reply": "2024-06-05T12:23:43.494513Z"
    },
    "papermill": {
     "duration": 0.727783,
     "end_time": "2024-06-05T12:23:43.498041",
     "exception": false,
     "start_time": "2024-06-05T12:23:42.770258",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAcMAAAGdCAYAAABuAhhZAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuNSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/xnp5ZAAAACXBIWXMAAA9hAAAPYQGoP6dpAABXUUlEQVR4nO3deVxUVf8H8M8MywzbDCACooi4ay7kGu4mSWqmWY+ZlGguLVAu5Za5YUq5L7mXWz9MqyctLReSkkxyQXEXd8UFUJEZ9mXm/v7gYWoCJ8aZYWDu5/163VfNuWfufA8IX85y75EIgiCAiIhIxKTWDoCIiMjamAyJiEj0mAyJiEj0mAyJiEj0mAyJiEj0mAyJiEj0mAyJiEj0mAyJiEj07K0dABERWVZ+fj4KCwvNci1HR0fI5XKzXKsqYTIkIrJh+fn5CAxwRWq6xizX8/X1xfXr120uITIZEhHZsMLCQqSma3A9MQAKN9NmxtRZWgS2vYnCwkImQyIiqn4UblKTk6EtYzIkIhIBjaCFxsRtGTSC1jzBVEFMhkREIqCFAC1My4amvr8qY5+ZiIhEjz1DIiIR0EILUwc5Tb9C1cVkSEQkAhpBgMbEvdxNfX9VxmFSIiISPfYMiYhEgAtoDGMyJCISAS0EaJgMH4vDpEREJHrsGRIRiQCHSQ1jMiQiEgGuJjWMw6RERCR6TIZUZV2+fBm9e/eGUqmERCLBzp07zXr9GzduQCKRYNOmTWa9bnXWo0cP9OjRw9phkAVozXTYKiZDMujq1at46623UL9+fcjlcigUCnTu3BnLli1DXl6eRT87PDwcZ86cwdy5c/HVV1+hXbt2Fv28yjR8+HBIJBIoFIpyv46XL1+GRCKBRCLBwoULjb7+3bt3MWvWLCQlJZkhWrIFmv+tJjX1sFWcM6TH+umnn/Cf//wHMpkMw4YNQ4sWLVBYWIhDhw5h4sSJOHfuHNatW2eRz87Ly0NCQgKmTZuGyMhIi3xGQEAA8vLy4ODgYJHr/xt7e3vk5uZi165dGDx4sN65mJgYyOVy5OfnP9G17969i9mzZ6NevXoICgqq8Pv279//RJ9HVN0xGVK5rl+/jiFDhiAgIABxcXGoVauW7lxERASuXLmCn376yWKff//+fQCAu7u7xT5DIpFYdYNSmUyGzp074+uvvy6TDLdu3Yp+/frhv//9b6XEkpubC2dnZzg6OlbK51Hl0wgwwxZO5omlKuIwKZVr/vz5yM7OxpdffqmXCEs1bNgQY8eO1b0uLi7GnDlz0KBBA8hkMtSrVw8fffQRCgoK9N5Xr149vPDCCzh06BA6dOgAuVyO+vXrY8uWLbo6s2bNQkBAAABg4sSJkEgkqFevHoCS4cXS//+7WbNmQSKR6JXFxsaiS5cucHd3h6urK5o0aYKPPvpId/5xc4ZxcXHo2rUrXFxc4O7ujgEDBuDChQvlft6VK1cwfPhwuLu7Q6lUYsSIEcjNzX38F/Yfhg4dij179iAzM1NXduzYMVy+fBlDhw4tUz8jIwMffvghWrZsCVdXVygUCvTp0wenTp3S1fntt9/Qvn17AMCIESN0w62l7ezRowdatGiBxMREdOvWDc7Ozrqvyz/nDMPDwyGXy8u0PzQ0FB4eHrh7926F20rWxTlDw5gMqVy7du1C/fr10alTpwrVHzVqFGbMmIE2bdpgyZIl6N69O6KjozFkyJAyda9cuYJXXnkFzz33HBYtWgQPDw8MHz4c586dAwAMGjQIS5YsAQC89tpr+Oqrr7B06VKj4j937hxeeOEFFBQUICoqCosWLcKLL76IP/74w+D7fvnlF4SGhiI9PR2zZs3ChAkTcPjwYXTu3Bk3btwoU3/w4MHIyspCdHQ0Bg8ejE2bNmH27NkVjnPQoEGQSCT4/vvvdWVbt25F06ZN0aZNmzL1r127hp07d+KFF17A4sWLMXHiRJw5cwbdu3fXJaZmzZohKioKADBmzBh89dVX+Oqrr9CtWzfddR4+fIg+ffogKCgIS5cuRc+ePcuNb9myZahZsybCw8Oh0WgAAGvXrsX+/fuxYsUK+Pn5VbitRFWaQPQPKpVKACAMGDCgQvWTkpIEAMKoUaP0yj/88EMBgBAXF6crCwgIEAAI8fHxurL09HRBJpMJH3zwga7s+vXrAgBhwYIFetcMDw8XAgICysQwc+ZM4e//nJcsWSIAEO7fv//YuEs/Y+PGjbqyoKAgwdvbW3j48KGu7NSpU4JUKhWGDRtW5vPefPNNvWu+9NJLQo0aNR77mX9vh4uLiyAIgvDKK68IvXr1EgRBEDQajeDr6yvMnj273K9Bfn6+oNFoyrRDJpMJUVFRurJjx46VaVup7t27CwCENWvWlHuue/fuemX79u0TAAiffPKJcO3aNcHV1VUYOHDgv7aRqobSn+cT532ESym1TDpOnPcRAAgqlcrazTI79gypDLVaDQBwc3OrUP2ff/4ZADBhwgS98g8++AAAyswtNm/eHF27dtW9rlmzJpo0aYJr1649ccz/VDrX+MMPP0Crrdjgzr1795CUlIThw4fD09NTV96qVSs899xzunb+3dtvv633umvXrnj48KHua1gRQ4cOxW+//YbU1FTExcUhNTW13CFSoGSeUSot+bHVaDR4+PChbgj4xIkTFf5MmUyGESNGVKhu79698dZbbyEqKgqDBg2CXC7H2rVrK/xZVDVoBfMctorJkMpQKBQAgKysrArVv3nzJqRSKRo2bKhX7uvrC3d3d9y8eVOvvG7dumWu4eHhgUePHj1hxGW9+uqr6Ny5M0aNGgUfHx8MGTIE33zzjcHEWBpnkyZNypxr1qwZHjx4gJycHL3yf7bFw8MDAIxqS9++feHm5obt27cjJiYG7du3L/O1LKXVarFkyRI0atQIMpkMXl5eqFmzJk6fPg2VSlXhz6xdu7ZRi2UWLlwIT09PJCUlYfny5fD29q7we4mqAyZDKkOhUMDPzw9nz5416n3/XMDyOHZ2duWWCxV41NPjPqN0PquUk5MT4uPj8csvv+CNN97A6dOn8eqrr+K5554rU9cUprSllEwmw6BBg7B582bs2LHjsb1CAJg3bx4mTJiAbt264f/+7/+wb98+xMbG4qmnnqpwDxgo+foY4+TJk0hPTwcAnDlzxqj3UtWggcQsh61iMqRyvfDCC7h69SoSEhL+tW5AQAC0Wi0uX76sV56WlobMzEzdylBz8PDw0Ft5WeqfvU8AkEql6NWrFxYvXozz589j7ty5iIuLw6+//lrutUvjTE5OLnPu4sWL8PLygouLi2kNeIyhQ4fi5MmTyMrKKnfRUanvvvsOPXv2xJdffokhQ4agd+/eCAkJKfM1qegfJhWRk5ODESNGoHnz5hgzZgzmz5+PY8eOme36VDmYDA1jMqRyTZo0CS4uLhg1ahTS0tLKnL969SqWLVsGoGSYD0CZFZ+LFy8GAPTr189scTVo0AAqlQqnT5/Wld27dw87duzQq5eRkVHmvaU3n//zdo9StWrVQlBQEDZv3qyXXM6ePYv9+/fr2mkJPXv2xJw5c/D555/D19f3sfXs7OzK9Dq//fZb3LlzR6+sNGmX94eDsSZPnoxbt25h8+bNWLx4MerVq4fw8PDHfh2JqiPedE/latCgAbZu3YpXX30VzZo103sCzeHDh/Htt99i+PDhAIDWrVsjPDwc69atQ2ZmJrp3746jR49i8+bNGDhw4GOX7T+JIUOGYPLkyXjppZfw/vvvIzc3F6tXr0bjxo31FpBERUUhPj4e/fr1Q0BAANLT07Fq1SrUqVMHXbp0eez1FyxYgD59+iA4OBgjR45EXl4eVqxYAaVSiVmzZpmtHf8klUrx8ccf/2u9F154AVFRURgxYgQ6deqEM2fOICYmBvXr19er16BBA7i7u2PNmjVwc3ODi4sLOnbsiMDAQKPiiouLw6pVqzBz5kzdrR4bN25Ejx49MH36dMyfP9+o65H1aAUJtIJpPTtT31+VMRnSY7344os4ffo0FixYgB9++AGrV6+GTCZDq1atsGjRIowePVpX94svvkD9+vWxadMm7NixA76+vpg6dSpmzpxp1phq1KiBHTt2YMKECZg0aRICAwMRHR2Ny5cv6yXDF198ETdu3MCGDRvw4MEDeHl5oXv37pg9ezaUSuVjrx8SEoK9e/di5syZmDFjBhwcHNC9e3d89tlnRicSS/joo4+Qk5ODrVu3Yvv27WjTpg1++uknTJkyRa+eg4MDNm/ejKlTp+Ltt99GcXExNm7caFQbsrKy8Oabb+Lpp5/GtGnTdOVdu3bF2LFjsWjRIgwaNAjPPPOM2dpHlmOOYU5bHiaVCMbM9BMRUbWiVquhVCpx8GxtuLqZNjOWnaVF9xZ3oFKpdKvObQV7hkREIqCBFBoTl4mYbx121cNkSEQkAoIZ5gwFG54z5GpSIiISPfYMiYhEgAtoDGMyJCISAY0ghcbEx1FzP0MiIiIbVq17hlqtFnfv3oWbm5tZHz9FRGQtgiAgKysLfn5+uh1KzEELCbQm9n+0sN2uYbVOhnfv3oW/v7+1wyAiMruUlBTUqVPHbNfjnKFh1ToZlu631wV9YQ8HK0dDRJZg7+tj7RAqVbG2EL+lb6rwfqJkHtU6GZYOjdrDAfYSJkMiW2Qvrfi+i7bE3FM/5llAw2FSIiKqxkrmDE18ULcND5NyNSkREYkee4ZERCKgNcOzSbmalIiIqjXOGRrGYVIiIhI99gyJiERACylvujeAyZCISAQ0ggQaE7dgMvX9VRmHSYmIyCLi4+PRv39/+Pn5QSKRYOfOnbpzRUVFmDx5Mlq2bAkXFxf4+flh2LBhuHv3rt41MjIyEBYWBoVCAXd3d4wcORLZ2dl6dU6fPo2uXbtCLpfD398f8+fPNzpWJkMiIhEo3ene1MMYOTk5aN26NVauXFnmXG5uLk6cOIHp06fjxIkT+P7775GcnIwXX3xRr15YWBjOnTuH2NhY7N69G/Hx8RgzZozuvFqtRu/evREQEIDExEQsWLAAs2bNwrp164yKlcOkREQioBWk0Jq4mlRr5GrSPn36oE+fPuWeUyqViI2N1Sv7/PPP0aFDB9y6dQt169bFhQsXsHfvXhw7dgzt2rUDAKxYsQJ9+/bFwoUL4efnh5iYGBQWFmLDhg1wdHTEU089haSkJCxevFgvaf4b9gyJiMgoarVa7ygoKDDLdVUqFSQSCdzd3QEACQkJcHd31yVCAAgJCYFUKsWRI0d0dbp16wZHx78e2xcaGork5GQ8evSowp/NZEhEJALmHCb19/eHUqnUHdHR0SbHl5+fj8mTJ+O1116DQqEAAKSmpsLb21uvnr29PTw9PZGamqqr4+Oj/zD30teldSqCw6RERCKghemrQbX/+29KSoouYQGATCYz6bpFRUUYPHgwBEHA6tWrTbrWk2IyJCIioygUCr1kaIrSRHjz5k3ExcXpXdfX1xfp6el69YuLi5GRkQFfX19dnbS0NL06pa9L61QEh0mJiESg9KZ7Uw9zKk2Ely9fxi+//IIaNWronQ8ODkZmZiYSExN1ZXFxcdBqtejYsaOuTnx8PIqKinR1YmNj0aRJE3h4eFQ4FiZDIiIRKH02qamHMbKzs5GUlISkpCQAwPXr15GUlIRbt26hqKgIr7zyCo4fP46YmBhoNBqkpqYiNTUVhYWFAIBmzZrh+eefx+jRo3H06FH88ccfiIyMxJAhQ+Dn5wcAGDp0KBwdHTFy5EicO3cO27dvx7JlyzBhwgSjYuUwKRERWcTx48fRs2dP3evSBBUeHo5Zs2bhxx9/BAAEBQXpve/XX39Fjx49AAAxMTGIjIxEr169IJVK8fLLL2P58uW6ukqlEvv370dERATatm0LLy8vzJgxw6jbKgAmQyIiUbDG5r49evSAYODeREPnSnl6emLr1q0G67Rq1Qq///67UbH9E5MhEZEImGcLJ9udWbPdlhEREVUQe4ZERCLwJM8WLe8atorJkIhIBLSCBFpTb7q34S2cmAyN9MKwB+g37CF8/EuW/t5MliNmiQ+O/2qeG1CrqhYds/Gfd++jUctc1PAtxqw36yFhr9LaYVmcWNv9d4Mj0zDyo1TsWO+FNTNrWzscs3JyLsbr71xGp57pUHoU4lqyAmsXNsXl8yXfY3fPAox4/xKefuYhXNyKcO6EB9bMb4a7KS5WjpzMzXb7vBZy/54DNsyrhcjnG+O9Po1x6g9XzNp4AwGN860dmkXJnbW4dk6Ozz+qY+1QKpVY212qcetc9Hs9A9fOya0dikW8P/0cnu74EAunt0TEq51w4s8amLv6OGrUzAcg4ONFJ+FbOw9zJjyN94d2Qvo9J8xdfRwyebG1Qzea1gzPJTX3TfdVSZVo2cqVK1GvXj3I5XJ07NgRR48etXZIj3UkVoljcQrcvS7DnWsybPqsFvJzpGjaNsfaoVnU8V8V2Dy/Fg6LrFck1nYDgNxZg8mf38TSiXWQpbKzdjhm5yjToPOzadi4vAnOnfTEvdsu2LquIe6lOKPvKynwq5uLZq1UWBndHJfPK3HnpgtWRjeHo0yL7s9X/AHQVUXpFk6mHrbK6i3bvn07JkyYgJkzZ+LEiRNo3bo1QkNDyzyPriqSSgV0H/AIMmctLhznsAnZlsh5d3D0gAInf3ezdigWYWcnwM5eQGGB/q/BggIpmgc9goNjyWOpCwv/Oi8IEhQVSvFUUMW3BqLqwerJcPHixRg9ejRGjBiB5s2bY82aNXB2dsaGDRusHdpj1Wuah52Xz2D3jdN4/9PbiBpZD7cu2+YwEolT9wGP0LBlHjZE17J2KBaTl2uPC6fcMWTUVXh65UMqFdCzz100bZkJT68C3L7hgvR7cgyPvARXtyLY22vxSvg11PTNh4eXefbvq0waSMxy2CqrJsPCwkIkJiYiJCREVyaVShESEoKEhIQy9QsKCspsKmkNt6/K8O5zjfF+v0bYvcULHy67hbqNbHvOkMSjpl8h3om6i88i66KowOp/L1vUwhktIZEAX+07iJ0Jseg/5Cbi99WCIEigKZZi7odBqF03F9t/i8P3f/yCVu0ycOyQFwRt9UsKHCY1zKqrSR88eACNRlPuxowXL14sUz86OhqzZ8+urPAeq7hIirs3SvbvunLGGU2CcjFw1H0sn+xv5ciITNewVR48ahZj5b5LujI7e6DlMzl4ccQDvFCvFbTVMBmUJ/W2M6aM6QCZvBjOrho8eiDD5OhTSL3jBAC4clGJ94Z2grNrEeztBagzHbF485+4fN62V4+LUbW6tWLq1Kl6TyJXq9Xw97d+ApJIAAfHf3/GHlF1kPS7K8b0bKxX9sGSFKRckeOblTVtJhH+XUG+PQry7eHqVoQ2wQ+wcZl++3OzHQAAfv45aNhMha9WN7RGmCbRACYPc2rME0qVZNVk6OXlBTs7u3I3ZixvU0aZTGbyjsqmGjH1Ho7FueH+HUc4uWrQ86VMtOqUjWlD61s1LkuTO2vgF1ioe+3rX4j6T+UhK9MO9+84WjEyyxJju/Ny7HAz2UmvLD9XiqxHZcuruzbBDyCBgNs3XVDLPxcjx17C7RsuiN1Vcj9ll5BUqB454n6qHPUaZmPMhxfw52/eOPmnl5UjN545hjk5TGohjo6OaNu2LQ4cOICBAwcCALRaLQ4cOIDIyEhrhvZY7l7FmLj8Fjy9i5GbZYfrF+SYNrQ+TsTb5oq7Uo1b52HBf6/qXr89+y4AYP92DywaX9daYVmcWNstFs6uxRgeeQle3vnIUjvgjwM+2LKqETTFJb/0PbwKMGp8MtxrFODRAxkO/OSHbesbWDlqsgSJUJE9NCxo+/btCA8Px9q1a9GhQwcsXboU33zzDS5evFhmLvGf1Go1lEolemAA7CUOlRQxEVUm+1plR4lsWbG2EL+kroNKpYJCYfrcZOnvyakJz0PuatrvyfzsIkQH7zVbbFWJ1ecMX331Vdy/fx8zZsxAamoqgoKCsHfv3n9NhEREVHGCGfYzFGz41gqrJ0MAiIyMrLLDokREZPuqRDIkIiLL4ua+hjEZEhGJALdwMsx20zwREVEFsWdIRCQC3OneMCZDIiIR4DCpYbab5omIiCqIPUMiIhHQmmGnelve6Z7JkIhIBDSCBBoThzlNfX9VZrtpnoiIqILYMyQiEgEuoDGMyZCISAQEM2zhJNjwE2hst2VEREQVxJ4hEZEIaCAxw073HCYlIqJqTCuYPuenterut5bFYVIiIhI99gyJiERAa4YFNKa+vypjMiQiEgGtGXa6N/X9VZntpnkiIqIKYs+QiEgE+Dg2w5gMiYhEgHOGhtluy4iIiCqIPUMiIhHQwgzPJrXhBTRMhkREIiCYYTWpYMPJkMOkREQkeuwZElGVpnmQYe0QKpVGKLLIdbmFk2FMhkREIsDVpIbZbsuIiIgqiD1DIiIR4DCpYewZEhGJQOmzSU09jBEfH4/+/fvDz88PEokEO3fu1DsvCAJmzJiBWrVqwcnJCSEhIbh8+bJenYyMDISFhUGhUMDd3R0jR45Edna2Xp3Tp0+ja9eukMvl8Pf3x/z5843++jAZEhGRReTk5KB169ZYuXJluefnz5+P5cuXY82aNThy5AhcXFwQGhqK/Px8XZ2wsDCcO3cOsbGx2L17N+Lj4zFmzBjdebVajd69eyMgIACJiYlYsGABZs2ahXXr1hkVK4dJiYhEwBrDpH369EGfPn3KPScIApYuXYqPP/4YAwYMAABs2bIFPj4+2LlzJ4YMGYILFy5g7969OHbsGNq1awcAWLFiBfr27YuFCxfCz88PMTExKCwsxIYNG+Do6IinnnoKSUlJWLx4sV7S/DfsGRIRiUBpMjT1AEp6Y38/CgoKjI7n+vXrSE1NRUhIiK5MqVSiY8eOSEhIAAAkJCTA3d1dlwgBICQkBFKpFEeOHNHV6datGxwdHXV1QkNDkZycjEePHlU4HiZDIiIyir+/P5RKpe6Ijo42+hqpqakAAB8fH71yHx8f3bnU1FR4e3vrnbe3t4enp6denfKu8ffPqAgOkxIRiYA5h0lTUlKgUCh05TKZzKTrVgVMhkREImDOZKhQKPSS4ZPw9fUFAKSlpaFWrVq68rS0NAQFBenqpKen672vuLgYGRkZuvf7+voiLS1Nr07p69I6FcFhUiIiqnSBgYHw9fXFgQMHdGVqtRpHjhxBcHAwACA4OBiZmZlITEzU1YmLi4NWq0XHjh11deLj41FU9Ndj7GJjY9GkSRN4eHhUOB4mQyIiERBg+r2GgpGfmZ2djaSkJCQlJQEoWTSTlJSEW7duQSKRYNy4cfjkk0/w448/4syZMxg2bBj8/PwwcOBAAECzZs3w/PPPY/To0Th69Cj++OMPREZGYsiQIfDz8wMADB06FI6Ojhg5ciTOnTuH7du3Y9myZZgwYYJRsXKYlIhIBKxxa8Xx48fRs2dP3evSBBUeHo5NmzZh0qRJyMnJwZgxY5CZmYkuXbpg7969kMvluvfExMQgMjISvXr1glQqxcsvv4zly5frziuVSuzfvx8RERFo27YtvLy8MGPGDKNuqwAAiSAIxib7KkOtVkOpVKIHBsBe4mDtcIjIAiQOjv9eyYYUC0X4tehbqFQqk+flgL9+Tz7709uwdzFtoUtxTgHi+q0xW2xVCXuGREQiwGeTGsZkSEQkAkyGhnEBDRERiR57hkREIsCeoWFMhkREIiAIEggmJjNT31+VcZiUiIhEjz1DIiIReJLNecu7hq1iMiQiEgHOGRrGYVIiIhI99gyJiESAC2gMYzJ8Qv2HP8Ar76TDs2Yxrp13wqqPayM5ydnaYVkc281220q7X333Ljo//wh1GuSjMF+K84mu2PBpHdy+5qSrM3/bRbQKztJ730//VxMrptWr5GhNx2FSwzhM+gS6v/gIY2beRcxiX0SENsa183LM3XoNyhpF//7maoztZrttqd0tO2Zh1xYfjB/YHFNfbwJ7BwFzv7oEmZNGr97PW2vitXZBuuPLaH8rRUyWZNVkGB8fj/79+8PPzw8SiQQ7d+60ZjgVNmjMA+zd6on92z1x67IcyyfXQUGeBKGvZVg7NItiu9luW2r3x+FNEPudF25edsL1C85Y9EEgfOoUolHLXL16BXlSPLrvoDtys+2sFLFpSodJTT1slVWTYU5ODlq3bo2VK1daMwyj2Dto0ahVLk787qYrEwQJTv7uhuZtcw28s3pju9luW2+3s1tJjzArUz/Z9Rz4ENtPnsSa/WcxYlIKZHJNeW+v8oT/DZOacthyMrTqnGGfPn3Qp08fa4ZgNIWnBnb2QOZ9/S/dowf28G9YYKWoLI/tZrsB2223RCLg7Zm3cO6YK25e+mtO9NcfPJF+R4aHaQ4IbJaHN6ekoE6DfMx5q5EVoyVLqFYLaAoKClBQ8NcPolqttmI0RGQrIubcRL3GefjglWZ65Xu+9tb9/41kZ2SkO+Czr5NRq24+7t2S//MyVZoAwNTda6vt5rcVUK0W0ERHR0OpVOoOf//Kn8hWZ9hBUwy41yzWK/fwKsaj+9XqbwujsN1sN2Cb7X436iY69srEpNea4kGq4Y2EL550AQD41at+vePSJ9CYetiqapUMp06dCpVKpTtSUlIqPYbiIikun3bG013+Wm4tkQgI6pKN84m2seS8PGw322177RbwbtRNdAp9hMmvNUVayr/vAt/gqZL50ox0B0sHR5WsWv2JJ5PJIJP9+z9YS/t+nRc+XJqCS6eckXzSGS+Nvg+5sxb7t3laOzSLYrvZbltqd8QnN9HzxQzMHt0QeTl28KhZcstIjtoOhQVS1Kqbj54DM3A0TomsTHsENs3FmBkpOP2nG65frH5/EPCme8OqVTKsKg7+6AFlDQ2GTUyFR81iXDvnhGlhgch8YNt/LbLdbLcttbv/G/cBAAu+SdYrX/RBIGK/80JRkQRBndUY+GYq5E5a3L/niD/2eODrFX7WCNdkWkECCW+6fyyJIJg6pfrksrOzceXKFQDA008/jcWLF6Nnz57w9PRE3bp1//X9arUaSqUSPTAA9hLb+AElIn0SB8PzeLamWCjCr0XfQqVSQaFQmHy90t+TLb6ZCDtn00bWNLkFODt4gdliq0qs2jM8fvw4evbsqXs9YcIEAEB4eDg2bdpkpaiIiGyPIJhhNakNLye1ajLs0aMHrNgxJSISDc4ZGlatVpMSERFZAhfQEBGJAHuGhjEZEhGJAFeTGsZhUiIiEj32DImIRICrSQ1jMiQiEoGSZGjqnKGZgqmCOExKRESix54hEZEIcDWpYUyGREQiIMD0/QhteJSUw6RERETsGRIRiQCHSQ1jMiQiEgOOkxrEYVIiIhI99gyJiMTADMOk4DApERFVZ3wCjWEcJiUiItFjz5CISAS4mtQwJkMiIjEQJKbP+dlwMuQwKRERiR57hkREIsAFNIYxGRIRiQFvujeIw6RERGQRGo0G06dPR2BgIJycnNCgQQPMmTMHwt+6mIIgYMaMGahVqxacnJwQEhKCy5cv610nIyMDYWFhUCgUcHd3x8iRI5GdnW3WWJkMiYhEoHQ1qamHMT777DOsXr0an3/+OS5cuIDPPvsM8+fPx4oVK3R15s+fj+XLl2PNmjU4cuQIXFxcEBoaivz8fF2dsLAwnDt3DrGxsdi9ezfi4+MxZswYs31tgAoOk/74448VvuCLL774xMEQEZEFVfIw5+HDhzFgwAD069cPAFCvXj18/fXXOHr0aEk4goClS5fi448/xoABAwAAW7ZsgY+PD3bu3IkhQ4bgwoUL2Lt3L44dO4Z27doBAFasWIG+ffti4cKF8PPzM0usFUqGAwcOrNDFJBIJNBqNKfEQEemRKlytHUKlkmoLgQxrR2GYWq3Wey2TySCTycrU69SpE9atW4dLly6hcePGOHXqFA4dOoTFixcDAK5fv47U1FSEhITo3qNUKtGxY0ckJCRgyJAhSEhIgLu7uy4RAkBISAikUimOHDmCl156ySxtqlAy1Gq1ZvkwIiKyDnPedO/v769XPnPmTMyaNatM/SlTpkCtVqNp06aws7ODRqPB3LlzERYWBgBITU0FAPj4+Oi9z8fHR3cuNTUV3t7eeuft7e3h6empq2MOJq0mzc/Ph1wuN1csRERkKWZcTZqSkgKFQqErLq9XCADffPMNYmJisHXrVjz11FNISkrCuHHj4Ofnh/DwcBODMS+jF9BoNBrMmTMHtWvXhqurK65duwYAmD59Or788kuzB0hERFWLQqHQOx6XDCdOnIgpU6ZgyJAhaNmyJd544w2MHz8e0dHRAABfX18AQFpamt770tLSdOd8fX2Rnp6ud764uBgZGRm6OuZgdDKcO3cuNm3ahPnz58PR0VFX3qJFC3zxxRdmC4yIiMxJYqaj4nJzcyGV6qcZOzs73dRbYGAgfH19ceDAAd15tVqNI0eOIDg4GAAQHByMzMxMJCYm6urExcVBq9WiY8eORsVjiNHDpFu2bMG6devQq1cvvP3227ry1q1b4+LFi2YLjIiIzMgKN933798fc+fORd26dfHUU0/h5MmTWLx4Md58800AJYsux40bh08++QSNGjVCYGAgpk+fDj8/P93CzWbNmuH555/H6NGjsWbNGhQVFSEyMhJDhgwx20pS4AmS4Z07d9CwYcMy5VqtFkVFRWYJioiIqr8VK1Zg+vTpePfdd5Geng4/Pz+89dZbmDFjhq7OpEmTkJOTgzFjxiAzMxNdunTB3r179dajxMTEIDIyEr169YJUKsXLL7+M5cuXmzVWo5Nh8+bN8fvvvyMgIECv/LvvvsPTTz9ttsCIiMiMrNAzdHNzw9KlS7F06dLH1pFIJIiKikJUVNRj63h6emLr1q3GfbiRjE6GM2bMQHh4OO7cuQOtVovvv/8eycnJ2LJlC3bv3m2JGImIyFTcwskgoxfQDBgwALt27cIvv/wCFxcXzJgxAxcuXMCuXbvw3HPPWSJGIiIii3qi+wy7du2K2NhYc8dCREQWwi2cDHvim+6PHz+OCxcuACiZR2zbtq3ZgiIiIjPjFk4GGZ0Mb9++jddeew1//PEH3N3dAQCZmZno1KkTtm3bhjp16pg7RiIiIosyes5w1KhRKCoqwoULF5CRkYGMjAxcuHABWq0Wo0aNskSMRERkqtIFNKYeNsronuHBgwdx+PBhNGnSRFfWpEkTrFixAl27djVrcEREZB4SoeQw9Rq2yuieob+/f7k312s0GrM+DYCIiKiyGJ0MFyxYgPfeew/Hjx/XlR0/fhxjx47FwoULzRocERGZiWCmw0ZVaJjUw8MDEslfY8U5OTno2LEj7O1L3l5cXAx7e3u8+eabFd4ImIiIKhFvujeoQsnQ0KN0iIiIqrsKJcOqtgkjEREZifcZGmTyTveFhYV6ZX/f/ZiIiKoIJkODjF5Ak5OTg8jISHh7e8PFxQUeHh56BxERUXVjdDKcNGkS4uLisHr1ashkMnzxxReYPXs2/Pz8sGXLFkvESEREpuJqUoOMHibdtWsXtmzZgh49emDEiBHo2rUrGjZsiICAAMTExCAsLMwScRIRkSm4mtQgo3uGGRkZqF+/PoCS+cGMjAwAQJcuXRAfH2/e6IiIiCqB0T3D+vXr4/r166hbty6aNm2Kb775Bh06dMCuXbt0D+62Za9GpqFzXxX8GxagMF+K88ed8eXcWrh9VW7t0CpF/+EP8Mo76fCsWYxr552w6uPaSE5ytnZYFsd222a7N+5NgE/t/DLlu7fVxpYVgXg94jraBGegZq0CqB45ICHOC199Xh+52SatPbQKPo7NMKN7hiNGjMCpU6cAAFOmTMHKlSshl8sxfvx4TJw40ewBVjWtgnOwa5MXxr3QCFOH1IedvYB5X1+DzElj7dAsrvuLjzBm5l3ELPZFRGhjXDsvx9yt16CsUfbxfLaE7bbddo99rS3CenTSHR+Nbg0A+H1fTdTwLkCNmoX4YlFDvPNSByz5uBnadc7AuNkXrRz1E+KcoUFGJ8Px48fj/fffBwCEhITg4sWL2Lp1K06ePImxY8cada3o6Gi0b98ebm5u8Pb2xsCBA5GcnGxsSJVqWlh9xH7jiZuX5Lh23gmLxtWFT50iNGqVZ+3QLG7QmAfYu9UT+7d74tZlOZZProOCPAlCX8uwdmgWxXbbbrvVjxzx6KFMd3To9hB3bznhzHF33LziirkTWuDoQS+k3nbCqaMe2LyiPjr2eACpndbaoZOZGZ0M/ykgIACDBg1Cq1atjH7vwYMHERERgT///BOxsbEoKipC7969kZOTY2pYlcZFUdIjzMq0s3IklmXvoEWjVrk48bubrkwQJDj5uxuat821YmSWxXaLp9329lr0fCEN+3f4Aih/oYiLazFys+2h1Zj8q5OqmAoNfC9fvrzCFyztNVbE3r179V5v2rQJ3t7eSExMRLdu3Sp8HWuRSAS8PfsOzh51xs1kJ2uHY1EKTw3s7IHM+/r/ZB49sId/wwIrRWV5bLd42h3c6wFc3Yrxyw+1yj2vcC/Ea2/dwJ7vqufuPBKYYc7QLJFUTRVKhkuWLKnQxSQSiVHJ8J9UKhUAwNPTs9zzBQUFKCj46wdRrVY/8WeZQ+S8Owhomo8PBja0ahxEZLreL93F8UOeyLgvK3POyaUYs1eexq1rLohZXa/ygyOLq1AyvH79uqXjgFarxbhx49C5c2e0aNGi3DrR0dGYPXu2xWOpiIi5t9HxOTU+eKkBHtxztHY4FqfOsIOmGHCvWaxX7uFVjEf3q9/Kuopiu8XRbu9a+Qh65hHmji/7u8fJuRhz1pxCbq495oxtAU1xNR0i5X2GBlWZ72pERATOnj2Lbdu2PbbO1KlToVKpdEdKSkolRlhKQMTc2+j0vAqT/tMAaSll/4q0RcVFUlw+7Yynu2TpyiQSAUFdsnE+0XaW2v8T2y2Odj838B5UGY44Gl9Dr9zJpRifrDuF4iIpot5riaJC214bIGZV4k+8yMhI7N69G/Hx8ahTp85j68lkMshk1k0+kfPuoOdLjzBrRCDysqXwqFmyzDwnyw6F+VXmbwuL+H6dFz5cmoJLp5yRfNIZL42+D7mzFvu3lT+sbSvYbttut0Qi4LmB9/DLj756C2OcXIoxd+0pyJw0WDClOZxdiuHsUtJTVj1yhFZbzXpJfFC3QVZNhoIg4L333sOOHTvw22+/ITAw0JrhVEj/4Q8BAAu/v6pXvnCcP2K/sa1fEv908EcPKGtoMGxiKjxqFuPaOSdMCwtE5gMHa4dmUWy3bbc76JlH8PYrQOwO/YUzDZtloWnrknUJG/b8qXdueOgzSL9bzRbNMRkaJBEEwWrNe/fdd7F161b88MMPaNKkia5cqVTCyenf/6Gp1WoolUr0wADYS2zrB5SIStjVsO0/Mv+pWFuIAxmboFKpzLIlXunvyYB5cyGVm/akLG1+Pm5+NM1ssVUlVh3XW716NVQqFXr06IFatWrpju3bt1szLCIim1P6ODZTD1v1RMnw999/x+uvv47g4GDcuXMHAPDVV1/h0KFDRl1HEIRyj+HDhz9JWERE9Dh8HJtBRifD//73vwgNDYWTkxNOnjypu+9PpVJh3rx5Zg+QiIjI0oxOhp988gnWrFmD9evXw8Hhr3m6zp0748SJE2YNjoiIzIQ9Q4OMXk2anJxc7qPSlEolMjMzzRETERGZGbdwMszonqGvry+uXLlSpvzQoUO6TX+JiIiqE6OT4ejRozF27FgcOXIEEokEd+/eRUxMDD788EO88847loiRiIhMVfo4NlMPG2X0MOmUKVOg1WrRq1cv5Obmolu3bpDJZPjwww/x3nvvWSJGIiIyFW+6N8joZCiRSDBt2jRMnDgRV65cQXZ2Npo3bw5XV1dLxEdERGRxT/w4NkdHRzRv3tycsRARkYVwAY1hRifDnj17QiJ5/LhxXFycSQEREZEFcJjUIKOTYVBQkN7roqIiJCUl4ezZswgPDzdXXERERJXG6GT4uF3vZ82ahezsbJMDIiIiCzDHs0VtuGdotgd1v/7669iwYYO5LkdERObEJ9AYZLZkmJCQALmJ24MQERFZg9HDpIMGDdJ7LQgC7t27h+PHj2P69OlmC4yIiMyIC2gMMjoZKpVKvddSqRRNmjRBVFQUevfubbbAiIjIfHhrhWFGJUONRoMRI0agZcuW8PDwsFRMRERkI+7cuYPJkydjz549yM3NRcOGDbFx40a0a9cOQMno4syZM7F+/XpkZmaic+fOWL16NRo1aqS7RkZGBt577z3s2rULUqkUL7/8MpYtW2bWh70YNWdoZ2eH3r17c3cKIiL6V48ePULnzp3h4OCAPXv24Pz581i0aJFeZ2r+/PlYvnw51qxZgyNHjsDFxQWhoaHIz8/X1QkLC8O5c+cQGxuL3bt3Iz4+HmPGjDFrrEYPk7Zo0QLXrl1DYGCgWQMhIiILssKc4WeffQZ/f39s3LhRV/b33CEIApYuXYqPP/4YAwYMAABs2bIFPj4+2LlzJ4YMGYILFy5g7969OHbsmK43uWLFCvTt2xcLFy6En5+fiY0q8USb+3744YfYvXs37t27B7VarXcQEZFt++fv/YKCgnLr/fjjj2jXrh3+85//wNvbG08//TTWr1+vO3/9+nWkpqYiJCREV6ZUKtGxY0ckJCQAKLlTwd3dXZcIASAkJARSqRRHjhwxW5sqnAyjoqKQk5ODvn374tSpU3jxxRdRp04deHh4wMPDA+7u7pxHJCKqokoX0Jh6AIC/vz+USqXuiI6OLvczr127ppv/27dvH9555x28//772Lx5MwAgNTUVAODj46P3Ph8fH9251NRUeHt76523t7eHp6enro45VHiYdPbs2Xj77bfx66+/mu3DiYioEplpNWhKSgoUCoXutUwmK7eeVqtFu3btMG/ePADA008/jbNnz2LNmjVV7vGdFU6GglDyVezevbvFgiEioqpPoVDoJcPHqVWrVpndjZo1a4b//ve/AABfX18AQFpaGmrVqqWrk5aWpnsOtq+vL9LT0/WuUVxcjIyMDN37zcGoOUNDu1UQEVEVZoXHsXXu3BnJycl6ZZcuXUJAQACAksU0vr6+OHDggO68Wq3GkSNHEBwcDAAIDg5GZmYmEhMTdXXi4uKg1WrRsWNH4wIywKjVpI0bN/7XhJiRkWFSQEREZH7WuOl+/Pjx6NSpE+bNm4fBgwfj6NGjWLduHdatW1dyPYkE48aNwyeffIJGjRohMDAQ06dPh5+fHwYOHAigpCf5/PPPY/To0VizZg2KiooQGRmJIUOGmG0lKWBkMpw9e3aZJ9AQEVmSpkFta4dQqTTF+YCN9Cnat2+PHTt2YOrUqYiKikJgYCCWLl2KsLAwXZ1JkyYhJycHY8aMQWZmJrp06YK9e/fqPes6JiYGkZGR6NWrl+6m++XLl5s1VolQOhn4L6RSabmreqxJrVZDqVSiBwbAXuJg7XCIyBI6tLR2BJWquDgfvyVGQ6VSVWhe7t+U/p5sNHEe7GSmbaagKcjH5QUfmS22qqTCPUPOFxIRVV98NqlhFV5AU8EOJBERUbVT4Z6hVqu1ZBxERGRJ3MLJIKOfTUpERNUQk6FBZtvpnoiIqLpiz5CISAS4gMYwJkMiIjHgMKlBHCYlIiLRY8+QiEgM2DM0iMmQiEgEOGdoGIdJiYhI9NgzJCISAw6TGsRkSEQkAhwmNYzDpEREJHrsGRIRiQGHSQ1iMiQiEgMmQ4M4TEpERKLHniERkQhI/neYeg1bxWRIRCQGHCY1iMOkREQkeuwZEhGJAO8zNIzJkIhIDDhMahCHSYmISPTYMzTSq5Fp6NxXBf+GBSjMl+L8cWd8ObcWbl+VWzu0StF/+AO88k46PGsW49p5J6z6uDaSk5ytHZbFsd3Vv92vvnwWnZ+5Bf86ahQW2OF8ck18uflp3L6rBAC4uRbgjddOo03QXXh75UKlluHwEX9s3toaubmOetd67tmrGPTiBdTxUyM31wHxhwOwcl0HazTLODbcszMVk6GRWgXnYNcmL1xKcoadvYDhU+5h3tfXMLp7ExTk2Vk7PIvq/uIjjJl5Fyum1MHFE854afR9zN16DSO7NoHqoYO1w7MYtts22t3qqTTs2tMEly7XgJ2dgOGvn8S8WXEY/V5/FBTYw9MzDzU8c7F+U1vcSlHCu2YO3n/7CGp45uGT+d101xn04nm8POACvtjcBhcveUEuK4aPd7YVW1YxnDM0zKrDpKtXr0arVq2gUCigUCgQHByMPXv2WDOkfzUtrD5iv/HEzUtyXDvvhEXj6sKnThEatcqzdmgWN2jMA+zd6on92z1x67IcyyfXQUGeBKGvZVg7NItiu22j3dOieiE2rgFuprjj2g0PLFreCT7eOWjU4CEA4OYtd8z5rDuOHKuDe6luOHXGF5tigtCx/W1IpVoAgKtLAcLDTmHBsk74NT4Q91LdcP2mB/485m/NppEZWDUZ1qlTB59++ikSExNx/PhxPPvssxgwYADOnTtnzbCM4qLQAACyMm27V2jvoEWjVrk48bubrkwQJDj5uxuat821YmSWxXbbbrtdnIsAAFnZMgN1CpGb6wCttuRXZZugVEglArw887B+xY/4vy++x7SJ8ajplVMpMZtEMNNho6yaDPv374++ffuiUaNGaNy4MebOnQtXV1f8+eef1gyrwiQSAW/PvoOzR51xM9nJ2uFYlMJTAzt7IPO+/sj6owf28KhZbKWoLI/tts12SyQC3h55HGfP18TNW+7l1lG45WPo4LPYs7+RrszXJwsSCTDklbNY82U7fDK/K9xcCxE96wDs7TWVFP2TKR0mNfWwVVVmNalGo8G2bduQk5OD4ODgcusUFBRArVbrHdYUOe8OAprmI/qdAKvGQUTGiRxzFAEBmYhe1KXc885OhZgz/VfcSlHiq22tdOVSKeDgoMWqL9ohMckPFy/VRPSiLvCrlYXWLdIqK3yyAKsvoDlz5gyCg4ORn58PV1dX7NixA82bNy+3bnR0NGbPnl3JEZYvYu5tdHxOjQ9eaoAH9xz//Q3VnDrDDppiwP0fvQIPr2I8um/1f0YWw3bbXrsjRh9Fx/Z38MFHvfHgoUuZ807yIsydGYe8PAfM/rQ7NJq/+gwZGSUjQLdSlLoylVoOdZYM3jWr+FAp7zM0yOo9wyZNmiApKQlHjhzBO++8g/DwcJw/f77culOnToVKpdIdKSkplRwtAAiImHsbnZ5XYdJ/GiAt5fHzDbakuEiKy6ed8XSXLF2ZRCIgqEs2zidWz6X2FcF221K7BUSMPopOz6Rg0vQQpKW7lqnh7FSIebMOoKhYiplze6CoSH8twLmLNQEAdWr/NSrl5loAhVsB0u6XTaxVCYdJDbP6n3iOjo5o2LAhAKBt27Y4duwYli1bhrVr15apK5PJIJNZN/lEzruDni89wqwRgcjLlsKjZskkfE6WHQrzrf63hUV9v84LHy5NwaVTzkg+WbLUXu6sxf5tntYOzaLYbttod+Rbx9Cz23XMmtcDeXkO8HAvWQGek+uAwkL7/yXCOMhkxZj/aXc4OxfB+X+LbFRqGbRaKe7cVeDwkTp4Z+RxLFv1DHLyHPDmGydx+44Cp874WrN5ZCKrJ8N/0mq1KCgosHYYj9V/eMky7IXfX9UrXzjOH7HfVM9fEhV18EcPKGtoMGxiKjxqFuPaOSdMCwtE5oPqd8+ZMdhu22h3/z6XAAAL58bqlS9cHozYuAZo2CADzZo8AABsWvODXp1hYwbqepILlnbCWyMTETX9Vwha4PQ5H0yLelZvOLVK4jCpQRJBEKzWvKlTp6JPnz6oW7cusrKysHXrVnz22WfYt28fnnvuuX99v1qthlKpRA8MgL2kev6AEtG/6NDS2hFUquLifPyWGA2VSgWFQmHy9Up/T7YaPg92jqY9KUtTmI/Tmz4yW2xViVV7hunp6Rg2bBju3btX8s1q1arCiZCIiMhcrJoMv/zyS2t+PBGRaPBxbIZVuTlDIiKyAM4ZGlTFZ3yJiIgsjz1DIiIRkAgCJCaulzT1/VUZkyERkRhwmNQgDpMSEZHosWdIRCQCXE1qGJMhEZEYcJjUIA6TEhGR6DEZEhGJgLV3rfj0008hkUgwbtw4XVl+fj4iIiJQo0YNuLq64uWXX0Zamv6+kLdu3UK/fv3g7OwMb29vTJw4EcXF5t9gmsmQiEgMBDMdT+DYsWNYu3YtWrVqpVc+fvx47Nq1C99++y0OHjyIu3fvYtCgQbrzGo0G/fr1Q2FhIQ4fPozNmzdj06ZNmDFjxpMFYgCTIRERWUx2djbCwsKwfv16eHh46MpVKhW+/PJLLF68GM8++yzatm2LjRs34vDhw/jzzz8BAPv378f58+fxf//3fwgKCkKfPn0wZ84crFy5EoWFhWaNk8mQiEgEzDlMqlar9Q5D2+5FRESgX79+CAkJ0StPTExEUVGRXnnTpk1Rt25dJCQkAAASEhLQsmVL+Pj46OqEhoZCrVbj3LlzZvzqMBkSEYmDGYdJ/f39oVQqdUd0dHS5H7lt2zacOHGi3POpqalwdHSEu7u7XrmPjw9SU1N1df6eCEvPl54zJ95aQURERklJSdHbz1Amk5VbZ+zYsYiNjYVcbto+ipWBPUMiIpEw10pShUKhd5SXDBMTE5Geno42bdrA3t4e9vb2OHjwIJYvXw57e3v4+PigsLAQmZmZeu9LS0uDr68vAMDX17fM6tLS16V1zIXJkIhIDATBPEcF9erVC2fOnEFSUpLuaNeuHcLCwnT/7+DggAMHDujek5ycjFu3biE4OBgAEBwcjDNnziA9PV1XJzY2FgqFAs2bNzff1wYcJiUiIgtwc3NDixYt9MpcXFxQo0YNXfnIkSMxYcIEeHp6QqFQ4L333kNwcDCeeeYZAEDv3r3RvHlzvPHGG5g/fz5SU1Px8ccfIyIiotzeqCmYDImIRKAqPpt0yZIlkEqlePnll1FQUIDQ0FCsWrVKd97Ozg67d+/GO++8g+DgYLi4uCA8PBxRUVHmDQRMhkRE4lAFnk3622+/6b2Wy+VYuXIlVq5c+dj3BAQE4OeffzbtgyuAc4ZERCR67BkSEYmARFtymHoNW8VkSEQkBlVgmLQq4zApERGJHnuGREQiUBVXk1YlTIZE1YVEYu0IrGLfzq+sHUKlUmdp4dHYAhc28qb5x17DRnGYlIiIRI89QyIiEeAwqWFMhkREYsDVpAZxmJSIiESPPUMiIhHgMKlhTIZERGLA1aQGcZiUiIhEjz1DIiIR4DCpYUyGRERiwNWkBnGYlIiIRI89QyIiEeAwqWFMhkREYqAVSg5Tr2GjOExKRESix54hEZEYcAGNQUyGREQiIIEZ5gzNEknVxGFSIiISPfYMiYjEgI9jM4jJkIhIBHhrhWEcJiUiItFjz5CISAy4mtQgJkMiIhGQCAIkJs75mfr+qozDpEREJHrsGRIRiYH2f4ep17BRTIZERCLAYVLDmAyN9MKwB+g37CF8/AsBADeT5YhZ4oPjvyqsHJllteiYjf+8ex+NWuaihm8xZr1ZDwl7ldYOy+LE+v0GgBq+hRj50T20f1YNmVyLuzdkWDShLi6fdrZ2aBVy5k8XfLvKG5fPOCMjzQEzv7yOTn1UuvNfLfTFbz+44/5dBzg4CmjYMg8jptxD0za5ujq3r8qwfo4fzh9zQXGRBIHN8jBsUiqCOmfr6oT6BZX57KmrbqDHwExLNo/MjMnQSPfvOWDDvFq4c10GiQR47j8ZmLXxBiJ6N8bNS3Jrh2cxcmctrp2TY9/Xnpi54Ya1w6k0Yv1+uyqLsXjnZZw+7IaPX6+PzIf2qB1YgGyVnbVDq7D8XCnqP5WH0NcyEDUysMz52vXzETH3NmoFFKIgX4od62pi6msNsPHwebjX0AAAZoQHonZgAT779gpkci12rK+JGcMCsSnhAjy9i3XX+mDJLbTrqda9dlVoLN9AY3E1qUFVJhl++umnmDp1KsaOHYulS5daO5zHOhKr3xva9FktvDDsIZq2zbHpX47Hf1WIojf0T2L9fg9+Nx0P7jpi0YS6urK0FJkVIzJe+2ez0P7ZrMeef3ZQpt7rMbPuYO/XNXD9vBOe7poN1UM73Lkmx/hFKajfPB8A8Oa0e9i1uSZuXJTD0/uv3qGrQqOXHKskPoHGoCqxmvTYsWNYu3YtWrVqZe1QjCKVCug+4BFkzlpcOO5i7XDIwsT0/X6mtwqXTjtj2trr2H7qLFbuS0afoQ+tHZbFFBVK8PP/1YCLQoP6zfMAAApPDeo0yMcv33oiP1cKTTHw01c14O5VhEat8vTe//m02vjPUy3wXt9G2Pe1py3nDJtl9Z5hdnY2wsLCsH79enzyySfWDqdC6jXNw9JdV+Ao0yIvR4qokfVw67Lt9hLETozf71p1C/HCGw/w/fqa2LbcB42DcvFO1G0UFUnwy7ee1g7PbP6MVSD6nQAU5Enh6VOE6G1XoPzfEKlEAny6/SpmvxmIgY1aQiIF3L2KMTfmGtzc/xoGHTbxHoI6Z0PmpEXiQTes+KgO8nKkGDjqgbWaVS4+js0wqyfDiIgI9OvXDyEhIf+aDAsKClBQUKB7rVarDdS2nNtXZXj3ucZwdtOg6wsqfLjsFiYOamjzvyDFSozfb4kUuHzaCRs/9QMAXD3njHpN8tHvjQc2lQyDOmdjVWwy1Bn22BNTA3PfqoflP12Gu1cxBAH4/KM6cPcqxqIdV+Ao12Lv1zUwc3gglv98CTV8SoZFw8an6a7XsGUe8nOl+Ha1d5VLhhwmNcyqw6Tbtm3DiRMnEB0dXaH60dHRUCqVusPf39/CEZavuEiKuzdkuHLGGRuja+H6eScMHHXfKrGQ5Ynx+52Rbl9mTjTlihzefkVWisgy5M5a1A4sRLO2uZiwOAV29sDer0uSfdIhVxz9RYGpq2/gqQ45aNQqD+9F34ajXMAv3zz+D4KmbXLx4J4jCgtsefc/22O1ZJiSkoKxY8ciJiYGcnnF/sKeOnUqVCqV7khJSbFwlBUjkQAOjrb7FxPpE8P3+/wxF/g3KNArq12/AOl3HKwUUeUQtEBRQcmvxYK8kv9K//FbUioRoDXw7b96zgmu7sVwlFWtfyMSrXkOW2W1YdLExESkp6ejTZs2ujKNRoP4+Hh8/vnnKCgogJ2d/jJumUwGmcy6K9pGTL2HY3FuuH/HEU6uGvR8KROtOmVj2tD6Vo3L0uTOGvgFFupe+/oXov5TecjKtMP9O45WjMyyxPr9/n69N5b8cAlD3ktD/C53NAnKRd+wh1g6qY61Q6uwvBwp7l7/6/dFaoojrp51gpt7MRSeGmxd5oPg3ip4+hRBnWGPHzd64UGqA7r2zwQANGubA1elBgvG1kXY+FTI5AL2xNRAaoojOvQqmaL5c78Cj+7bo1nbXDjItDgR74Zty73xyttVcOSAw6QGWS0Z9urVC2fOnNErGzFiBJo2bYrJkyeXSYRVhbtXMSYuvwVP72LkZtnh+gU5pg2tjxPxbtYOzaIat87Dgv9e1b1+e/ZdAMD+7R5YNL7u495W7Yn1+33plDOiRgVixJR7CBuXitQUR6yZWRu/7qg+84WXTjlj0isNda/XzqoNAHhucAbe/zQFt6/IMOfbelBn2MPNQ4PGrXOxaMdl1GtSchuFsoYGc7dexaZPa2Hy4IbQFEkQ0CQfszZeR4OnSurYOQjYtckLa2fJIAiAX71CvDXrLvqE2e7KW1slEYSqk+p79OiBoKCgCt9nqFaroVQq0QMDYC+x7eEbIkjEOQe1785Ja4dQqdRZWng0vgaVSgWFwvR7e3W/J9tPg729aYu+iovz8duxuWaLrSqx+mpSIiKyPD6b1LAqlQx/++03a4dAREQiVKWSIRERWQgX0BjEZEhEJAYCTN+P0HZzYdV4NikREdme6OhotG/fHm5ubvD29sbAgQORnJysVyc/Px8RERGoUaMGXF1d8fLLLyMtLU2vzq1bt9CvXz84OzvD29sbEydORHGxeR+MzmRIRCQCpQtoTD2McfDgQURERODPP/9EbGwsioqK0Lt3b+Tk5OjqjB8/Hrt27cK3336LgwcP4u7duxg0aJDuvEajQb9+/VBYWIjDhw9j8+bN2LRpE2bMmGG2rw1QxW6tMBZvrSBR4a0VomCpWyueDZoCezvTHlpSrClAXNKnTxzb/fv34e3tjYMHD6Jbt25QqVSoWbMmtm7dildeeQUAcPHiRTRr1gwJCQl45plnsGfPHrzwwgu4e/cufHx8AABr1qzB5MmTcf/+fTg6muehH+wZEhGRUdRqtd7x9w0UDFGpVAAAT8+ShzckJiaiqKgIISEhujpNmzZF3bp1kZCQAABISEhAy5YtdYkQAEJDQ6FWq3Hu3DlzNYnJkIhIFEpXk5p6APD399fbNKEimy1otVqMGzcOnTt3RosWLQAAqampcHR0hLu7u15dHx8fpKam6ur8PRGWni89Zy5cTUpEJAZaAKaOtP9vNWpKSoreMGlFnhkdERGBs2fP4tChQyYGYRnsGRIRkVEUCoXe8W/JMDIyErt378avv/6KOnX+eti7r68vCgsLkZmZqVc/LS0Nvr6+ujr/XF1a+rq0jjkwGRIRiYA1VpMKgoDIyEjs2LEDcXFxCAwM1Dvftm1bODg44MCBA7qy5ORk3Lp1C8HBwQCA4OBgnDlzBunp6bo6sbGxUCgUaN68uQlfEX0cJiUiEgMrPIEmIiICW7duxQ8//AA3NzfdHJ9SqYSTkxOUSiVGjhyJCRMmwNPTEwqFAu+99x6Cg4PxzDPPAAB69+6N5s2b44033sD8+fORmpqKjz/+GBEREWbd0o/JkIiILGL16tUASnYk+ruNGzdi+PDhAIAlS5ZAKpXi5ZdfRkFBAUJDQ7Fq1SpdXTs7O+zevRvvvPMOgoOD4eLigvDwcERFRZk1ViZDIiIxsELPsCK3scvlcqxcuRIrV658bJ2AgAD8/PPPRn22sZgMiYjEgA/qNogLaIiISPTYMyQiEgMz3mdoi5gMiYhEgDvdG8ZhUiIiEj32DImIxIALaAxiMiQiEgOtAEhMTGZa202GHCYlIiLRY8+QiEgMOExqEJMhEZEomCEZgsmwSip91E8ximz5e0T0P6beJFY9qbNs+Oa2cqizS9pbkUeZkflU62SYlZUFADgEyz6zjqhKEOnvRo/G1o7AOrKysqBUKs13QQ6TGlStk6Gfnx9SUlLg5uYGiaRy/2pWq9Xw9/cvs+OzrWO72W4xsGa7BUFAVlYW/Pz8zHthrQCT/6Ky4dWk1ToZSqVSvV2TraF0p2exYbvFhe2uXGbtEVKFVOtkSEREFSRoSw5Tr2GjmAyJiMSAc4YG8ab7JySTyTBz5kzIZDJrh1Kp2G62WwzE2m4xkwhcv0tEZLPUajWUSiVCar8Ne6lpyb1YW4Bf7qyBSqWyuTlkDpMSEYkBh0kN4jApERGJHnuGRERiIMAMPUOzRFIlMRkSEYkBh0kN4jDpE1q5ciXq1asHuVyOjh074ujRo9YOyaLi4+PRv39/+Pn5QSKRYOfOndYOqVJER0ejffv2cHNzg7e3NwYOHIjk5GRrh2Vxq1evRqtWrXQ3nQcHB2PPnj3WDqtSffrpp5BIJBg3bpy1Q6FKwGT4BLZv344JEyZg5syZOHHiBFq3bo3Q0FCkp6dbOzSLycnJQevWrbFy5Uprh1KpDh48iIiICPz555+IjY1FUVERevfujZycHGuHZlF16tTBp59+isTERBw/fhzPPvssBgwYgHPnzlk7tEpx7NgxrF27Fq1atbJ2KOaj1ZrnsFG8teIJdOzYEe3bt8fnn38OANBqtfD398d7772HKVOmWDk6y5NIJNixYwcGDhxo7VAq3f379+Ht7Y2DBw+iW7du1g6nUnl6emLBggUYOXKktUOxqOzsbLRp0warVq3CJ598gqCgICxdutTaYT0x3a0VNUfCXupo0rWKtYX45f6XNnlrBXuGRiosLERiYiJCQkJ0ZVKpFCEhIUhISLBiZFQZVCoVgJLEIBYajQbbtm1DTk4OgoODrR2OxUVERKBfv356P+Nk+7iAxkgPHjyARqOBj4+PXrmPjw8uXrxopaioMmi1WowbNw6dO3dGixYtrB2OxZ05cwbBwcHIz8+Hq6srduzYgebNm1s7LIvatm0bTpw4gWPHjlk7FPPjAhqDmAyJKigiIgJnz57FoUOHrB1KpWjSpAmSkpKgUqnw3XffITw8HAcPHrTZhJiSkoKxY8ciNjYWcrnc2uGYH7dwMojJ0EheXl6ws7NDWlqaXnlaWhp8fX2tFBVZWmRkJHbv3o34+HirbxtWWRwdHdGwYUMAQNu2bXHs2DEsW7YMa9eutXJklpGYmIj09HS0adNGV6bRaBAfH4/PP/8cBQUFsLOzs2KEZEmcMzSSo6Mj2rZtiwMHDujKtFotDhw4IIr5FLERBAGRkZHYsWMH4uLiEBgYaO2QrEar1aKgoMDaYVhMr169cObMGSQlJemOdu3aISwsDElJSdU+EQqC1iyHrWLP8AlMmDAB4eHhaNeuHTp06IClS5ciJycHI0aMsHZoFpOdnY0rV67oXl+/fh1JSUnw9PRE3bp1rRiZZUVERGDr1q344Ycf4ObmhtTUVAAlm686OTlZOTrLmTp1Kvr06YO6desiKysLW7duxW+//YZ9+/ZZOzSLcXNzKzMX7OLigho1atjGHLEgmD7MyTlD+rtXX30V9+/fx4wZM5CamoqgoCDs3bu3zKIaW3L8+HH07NlT93rChAkAgPDwcGzatMlKUVne6tWrAQA9evTQK9+4cSOGDx9e+QFVkvT0dAwbNgz37t2DUqlEq1atsG/fPjz33HPWDo3IInifIRGRDSu9z7CX8g3YS0y8z1AoxAHVVzZ5nyF7hkREYqDVAhIT5/xseM6QC2iIiEj02DMkIhIDwQz3GdrwrBqTIRGRCAhaLQQTh0lt+dYKDpMSEZHosWdIRCQGHCY1iMmQiEgMtAIgYTJ8HA6TEhGR6DEZks0YPny43obDPXr0wLhx4yo9jt9++w0SiQSZmZmPrSORSLBz584KX3PWrFkICgoyKa4bN25AIpEgKSnJpOtQNSUIJfcJmnSwZ0j0RIYPHw6JRAKJRKLbBSEqKgrFxcUW/+zvv/8ec+bMqVDdiiQwoupM0ApmOWwV5wzJ4p5//nls3LgRBQUF+PnnnxEREQEHBwdMnTq1TN3CwkI4Opr2yKhSYtqNnohMw54hWZxMJoOvry8CAgLwzjvvICQkBD/++COAv4Y2586dCz8/PzRp0gRAyUargwcPhru7Ozw9PTFgwADcuHFDd02NRoMJEybA3d0dNWrUwKRJk/DPx+z+c5i0oKAAkydPhr+/P2QyGRo2bIgvv/wSN27c0D2E3MPDAxKJRPcQbq1Wi+joaAQGBsLJyQmtW7fGd999p/c5P//8Mxo3bgwnJyf07NlTL86Kmjx5Mho3bgxnZ2fUr18f06dPR1FRUZl6a9euhb+/P5ydnTF48GCoVCq981988QWaNWsGuVyOpk2bYtWqVUbHQjbK5CFS7RM9jm3lypWoV68e5HI5OnbsiKNHj1qgcaZjMqRK5+TkhMLCQt3rAwcOIDk5GbGxsdi9ezeKiooQGhoKNzc3/P777/jjjz/g6uqK559/Xve+RYsWYdOmTdiwYQMOHTqEjIwM7Nixw+DnDhs2DF9//TWWL1+OCxcuYO3atXB1dYW/vz/++9//AgCSk5Nx7949LFu2DAAQHR2NLVu2YM2aNTh37hzGjx+P119/HQcPHgRQkrQHDRqE/v37IykpCaNGjcKUKVOM/pq4ublh06ZNOH/+PJYtW4b169djyZIlenWuXLmCb775Brt27cLevXtx8uRJvPvuu7rzMTExmDFjBubOnYsLFy5g3rx5mD59OjZv3mx0PGR7rDFMun37dkyYMAEzZ87EiRMn0Lp1a4SGhiI9Pd1CrTSBQGRB4eHhwoABAwRBEAStVivExsYKMplM+PDDD3XnfXx8hIKCAt17vvrqK6FJkyaCVqvVlRUUFAhOTk7Cvn37BEEQhFq1agnz58/XnS8qKhLq1Kmj+yxBEITu3bsLY8eOFQRBEJKTkwUAQmxsbLlx/vrrrwIA4dGjR7qy/Px8wdnZWTh8+LBe3ZEjRwqvvfaaIAiCMHXqVKF58+Z65ydPnlzmWv8EQNixY8djzy9YsEBo27at7vXMmTMFOzs74fbt27qyPXv2CFKpVLh3754gCILQoEEDYevWrXrXmTNnjhAcHCwIgiBcv35dACCcPHnysZ9LtkelUgkAhB6Sl4QQ6WCTjh6SlwQAgkqlqtBnd+jQQYiIiNC91mg0gp+fnxAdHW2p5j4xzhmSxe3evRuurq4oKiqCVqvF0KFDMWvWLN35li1b6s0Tnjp1CleuXIGbm5vedfLz83H16lWoVCrcu3cPHTt21J2zt7dHu3btygyVlirdqbx79+4VjvvKlSvIzc0ts4dfYWEhnn76aQDAhQsX9OIAgODg4Ap/Rqnt27dj+fLluHr1KrKzs1FcXFxmi5y6deuidu3aep+j1WqRnJwMNzc3XL16FSNHjsTo0aN1dYqLi6FUKo2Oh2yQoAVQebtWFBYWIjExUW9tgFQqRUhICBISEkyLwwKYDMnievbsidWrV8PR0RF+fn6wt9f/Z+fi4qL3Ojs7G23btkVMTEyZa9WsWfOJYniSXemzs7MBAD/99JNeEgJK5kHNJSEhAWFhYZg9ezZCQ0OhVCqxbds2LFq0yOhY169fXyY529nZmS1Wqr6KUWTyA2iKUTKPrVar9cplMlmZn4kHDx5Ao9GU2fTcx8cHFy9eNC0QC2AyJItzcXFBw4YNK1y/TZs22L59O7y9vR+7gWitWrVw5MgRdOvWDUBJDygxMRFt2rQpt37Lli2h1Wpx8OBBhISElDlf2jPVaDS6subNm0Mmk+HWrVuP7VE2a9ZMtxio1J9//vnvjfybw4cPIyAgANOmTdOV3bx5s0y9W7du4e7du/Dz89N9jlQqRZMmTeDj4wM/Pz9cu3YNYWFhRn0+2TZHR0f4+vriUOrPZrle6Tz7382cOVNvtKc6YjKkKicsLAwLFizAgAEDEBUVhTp16uDmzZv4/vvvMWnSJNSpUwdjx47Fp59+ikaNGqFp06ZYvHixwXsE69Wrh/DwcLz55ptYvnw5WrdujZs3byI9PR2DBw9GQEAAJBIJdu/ejb59+8LJyQlubm748MMPMX78eGi1WnTp0gUqlQp//PEHFAoFwsPD8fbbb2PRokWYOHEiRo0ahcTERGzatMmo9jZq1Ai3bt3Ctm3b0L59e/z000/lLgaSy+UIDw/HwoULoVar8f7772Pw4MHw9fUFAMyePRvvv/8+lEolnn/+eRQUFOD48eN49OgRJkyYYFRMZDvkcjmuX7+ut2jNFIIgQCKR6JWVN1Li5eUFOzs7pKWl6ZWnpaXp/s1WKdaetCTb9vcFNMacv3fvnjBs2DDBy8tLkMlkQv369YXRo0frJu6LioqEsWPHCgqFQnB3dxcmTJggDBs27LELaARBEPLy8oTx48cLtWrVEhwdHYWGDRsKGzZs0J2PiooSfH19BYlEIoSHhwuCULLoZ+nSpUKTJk0EBwcHoWbNmkJoaKhw8OBB3ft27dolNGzYUJDJZELXrl2FDRs2GL2AZuLEiUKNGjUEV1dX4dVXXxWWLFkiKJVK3fmZM2cKrVu3FlatWiX4+fkJcrlceOWVV4SMjAy968bExAhBQUGCo6Oj4OHhIXTr1k34/vvvBUHgAhqqfB06dBAiIyN1rzUajVC7du0quYBGIgg2/HwdIiKymu3btyM8PBxr165Fhw4dsHTpUnzzzTe4ePFimblEa+MwKRERWcSrr76K+/fvY8aMGUhNTUVQUBD27t1b5RIhALBnSEREoscn0BARkegxGRIRkegxGRIRkegxGRIRkegxGRIRkegxGRIRkegxGRIRkegxGRIRkegxGRIRkegxGRIRkegxGRIRkegxGRIRkej9P5cPKbh5VbUXAAAAAElFTkSuQmCC",
      "text/plain": [
       "<Figure size 500x500 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "cm1 = confusion_matrix(y_test, y_pred)\n",
    "cm1_display = ConfusionMatrixDisplay(confusion_matrix = cm1)\n",
    "\n",
    "fig, ax = plt.subplots(figsize = (5,5))\n",
    "cm1_display.plot(ax=ax)\n",
    "plt.title('Confusion Matrix')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "14c54d15",
   "metadata": {
    "papermill": {
     "duration": 0.028235,
     "end_time": "2024-06-05T12:23:43.553800",
     "exception": false,
     "start_time": "2024-06-05T12:23:43.525565",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Support Vector Machines ###"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "fa8e71d1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-05T12:23:43.614250Z",
     "iopub.status.busy": "2024-06-05T12:23:43.613851Z",
     "iopub.status.idle": "2024-06-05T12:23:43.619057Z",
     "shell.execute_reply": "2024-06-05T12:23:43.617723Z"
    },
    "papermill": {
     "duration": 0.038924,
     "end_time": "2024-06-05T12:23:43.621311",
     "exception": false,
     "start_time": "2024-06-05T12:23:43.582387",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "svm = SVC()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "3b95f931",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-05T12:23:43.678755Z",
     "iopub.status.busy": "2024-06-05T12:23:43.678329Z",
     "iopub.status.idle": "2024-06-05T12:23:44.748555Z",
     "shell.execute_reply": "2024-06-05T12:23:44.747424Z"
    },
    "papermill": {
     "duration": 1.101388,
     "end_time": "2024-06-05T12:23:44.750992",
     "exception": false,
     "start_time": "2024-06-05T12:23:43.649604",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-3 {color: black;background-color: white;}#sk-container-id-3 pre{padding: 0;}#sk-container-id-3 div.sk-toggleable {background-color: white;}#sk-container-id-3 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-3 label.sk-toggleable__label-arrow:before {content: \"‚ñ∏\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-3 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-3 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-3 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-3 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-3 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-3 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"‚ñæ\";}#sk-container-id-3 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-3 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-3 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-3 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-3 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-3 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-3 div.sk-item {position: relative;z-index: 1;}#sk-container-id-3 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-3 div.sk-item::before, #sk-container-id-3 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-3 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-3 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-3 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-3 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-3 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-3 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-3 div.sk-label-container {text-align: center;}#sk-container-id-3 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-3 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-3\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>SVC()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-3\" type=\"checkbox\" checked><label for=\"sk-estimator-id-3\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">SVC</label><div class=\"sk-toggleable__content\"><pre>SVC()</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "SVC()"
      ]
     },
     "execution_count": 56,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "svm.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "90ffc238",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-05T12:23:44.808707Z",
     "iopub.status.busy": "2024-06-05T12:23:44.808287Z",
     "iopub.status.idle": "2024-06-05T12:23:45.098158Z",
     "shell.execute_reply": "2024-06-05T12:23:45.096772Z"
    },
    "papermill": {
     "duration": 0.322257,
     "end_time": "2024-06-05T12:23:45.101128",
     "exception": false,
     "start_time": "2024-06-05T12:23:44.778871",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "y_pred = svm.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "12358dd3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-05T12:23:45.161079Z",
     "iopub.status.busy": "2024-06-05T12:23:45.160680Z",
     "iopub.status.idle": "2024-06-05T12:23:45.177333Z",
     "shell.execute_reply": "2024-06-05T12:23:45.175630Z"
    },
    "papermill": {
     "duration": 0.04941,
     "end_time": "2024-06-05T12:23:45.180432",
     "exception": false,
     "start_time": "2024-06-05T12:23:45.131022",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "           1       0.00      0.00      0.00       108\n",
      "           2       0.00      0.00      0.00        25\n",
      "           3       0.00      0.00      0.00        74\n",
      "           4       0.00      0.00      0.00       228\n",
      "           5       0.76      1.00      0.87      1398\n",
      "\n",
      "    accuracy                           0.76      1833\n",
      "   macro avg       0.15      0.20      0.17      1833\n",
      "weighted avg       0.58      0.76      0.66      1833\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(classification_report(y_test, y_pred, zero_division=0))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "a82b3712",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-05T12:23:45.241268Z",
     "iopub.status.busy": "2024-06-05T12:23:45.240841Z",
     "iopub.status.idle": "2024-06-05T12:23:45.573233Z",
     "shell.execute_reply": "2024-06-05T12:23:45.571983Z"
    },
    "papermill": {
     "duration": 0.365897,
     "end_time": "2024-06-05T12:23:45.575871",
     "exception": false,
     "start_time": "2024-06-05T12:23:45.209974",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 500x500 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "cm2 = confusion_matrix(y_test, y_pred)\n",
    "cm2_display = ConfusionMatrixDisplay(confusion_matrix = cm2)\n",
    "\n",
    "fig, ax = plt.subplots(figsize = (5,5))\n",
    "cm2_display.plot(ax=ax)\n",
    "plt.title('Confusion Matrix')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e5e85136",
   "metadata": {
    "papermill": {
     "duration": 0.028455,
     "end_time": "2024-06-05T12:23:45.633041",
     "exception": false,
     "start_time": "2024-06-05T12:23:45.604586",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### KNN ###"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "id": "d3417c12",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-05T12:23:45.691603Z",
     "iopub.status.busy": "2024-06-05T12:23:45.691203Z",
     "iopub.status.idle": "2024-06-05T12:23:45.696096Z",
     "shell.execute_reply": "2024-06-05T12:23:45.694931Z"
    },
    "papermill": {
     "duration": 0.036668,
     "end_time": "2024-06-05T12:23:45.698372",
     "exception": false,
     "start_time": "2024-06-05T12:23:45.661704",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "knn = KNeighborsClassifier(n_neighbors=3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "id": "5a1574cd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-05T12:23:45.757500Z",
     "iopub.status.busy": "2024-06-05T12:23:45.757078Z",
     "iopub.status.idle": "2024-06-05T12:23:45.773750Z",
     "shell.execute_reply": "2024-06-05T12:23:45.772470Z"
    },
    "papermill": {
     "duration": 0.048561,
     "end_time": "2024-06-05T12:23:45.776202",
     "exception": false,
     "start_time": "2024-06-05T12:23:45.727641",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-4 {color: black;background-color: white;}#sk-container-id-4 pre{padding: 0;}#sk-container-id-4 div.sk-toggleable {background-color: white;}#sk-container-id-4 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-4 label.sk-toggleable__label-arrow:before {content: \"‚ñ∏\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-4 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-4 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-4 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-4 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-4 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-4 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"‚ñæ\";}#sk-container-id-4 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-4 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-4 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-4 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-4 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-4 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-4 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-4 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-4 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-4 div.sk-item {position: relative;z-index: 1;}#sk-container-id-4 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-4 div.sk-item::before, #sk-container-id-4 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-4 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-4 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-4 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-4 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-4 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-4 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-4 div.sk-label-container {text-align: center;}#sk-container-id-4 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-4 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-4\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>KNeighborsClassifier(n_neighbors=3)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-4\" type=\"checkbox\" checked><label for=\"sk-estimator-id-4\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">KNeighborsClassifier</label><div class=\"sk-toggleable__content\"><pre>KNeighborsClassifier(n_neighbors=3)</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "KNeighborsClassifier(n_neighbors=3)"
      ]
     },
     "execution_count": 61,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "knn.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "id": "a00feb34",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-05T12:23:45.838907Z",
     "iopub.status.busy": "2024-06-05T12:23:45.838492Z",
     "iopub.status.idle": "2024-06-05T12:23:45.979826Z",
     "shell.execute_reply": "2024-06-05T12:23:45.978311Z"
    },
    "papermill": {
     "duration": 0.174262,
     "end_time": "2024-06-05T12:23:45.982647",
     "exception": false,
     "start_time": "2024-06-05T12:23:45.808385",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "y_pred = knn.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "id": "67a64067",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-05T12:23:46.043871Z",
     "iopub.status.busy": "2024-06-05T12:23:46.043379Z",
     "iopub.status.idle": "2024-06-05T12:23:46.060938Z",
     "shell.execute_reply": "2024-06-05T12:23:46.059508Z"
    },
    "papermill": {
     "duration": 0.05179,
     "end_time": "2024-06-05T12:23:46.063670",
     "exception": false,
     "start_time": "2024-06-05T12:23:46.011880",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "           1       0.35      0.06      0.10       108\n",
      "           2       0.00      0.00      0.00        25\n",
      "           3       0.03      0.08      0.04        74\n",
      "           4       0.07      0.01      0.02       228\n",
      "           5       0.77      0.86      0.81      1398\n",
      "\n",
      "    accuracy                           0.67      1833\n",
      "   macro avg       0.24      0.20      0.19      1833\n",
      "weighted avg       0.62      0.67      0.63      1833\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(classification_report(y_test, y_pred, zero_division=0))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4c709dee",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-05T12:19:24.531205Z",
     "iopub.status.busy": "2024-06-05T12:19:24.529721Z",
     "iopub.status.idle": "2024-06-05T12:19:24.536399Z",
     "shell.execute_reply": "2024-06-05T12:19:24.534856Z",
     "shell.execute_reply.started": "2024-06-05T12:19:24.531152Z"
    },
    "papermill": {
     "duration": 0.028462,
     "end_time": "2024-06-05T12:23:46.123835",
     "exception": false,
     "start_time": "2024-06-05T12:23:46.095373",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "#### GridSearchCV for KNN ####"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "id": "cad7fe44",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-05T12:23:46.184275Z",
     "iopub.status.busy": "2024-06-05T12:23:46.183908Z",
     "iopub.status.idle": "2024-06-05T12:23:46.189310Z",
     "shell.execute_reply": "2024-06-05T12:23:46.188102Z"
    },
    "papermill": {
     "duration": 0.038073,
     "end_time": "2024-06-05T12:23:46.191632",
     "exception": false,
     "start_time": "2024-06-05T12:23:46.153559",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "param_grid = {'n_neighbors': [1, 3, 5, 7, 9, 12, 15, 25, 50, 75, 100]}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "id": "326cbbee",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-05T12:23:46.255989Z",
     "iopub.status.busy": "2024-06-05T12:23:46.255561Z",
     "iopub.status.idle": "2024-06-05T12:23:51.879342Z",
     "shell.execute_reply": "2024-06-05T12:23:51.878163Z"
    },
    "papermill": {
     "duration": 5.659736,
     "end_time": "2024-06-05T12:23:51.881734",
     "exception": false,
     "start_time": "2024-06-05T12:23:46.221998",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-5 {color: black;background-color: white;}#sk-container-id-5 pre{padding: 0;}#sk-container-id-5 div.sk-toggleable {background-color: white;}#sk-container-id-5 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-5 label.sk-toggleable__label-arrow:before {content: \"‚ñ∏\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-5 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-5 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-5 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-5 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-5 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-5 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"‚ñæ\";}#sk-container-id-5 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-5 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-5 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-5 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-5 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-5 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-5 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-5 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-5 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-5 div.sk-item {position: relative;z-index: 1;}#sk-container-id-5 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-5 div.sk-item::before, #sk-container-id-5 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-5 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-5 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-5 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-5 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-5 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-5 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-5 div.sk-label-container {text-align: center;}#sk-container-id-5 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-5 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-5\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>GridSearchCV(cv=5, estimator=KNeighborsClassifier(n_neighbors=3),\n",
       "             param_grid={&#x27;n_neighbors&#x27;: [1, 3, 5, 7, 9, 12, 15, 25, 50, 75,\n",
       "                                         100]},\n",
       "             scoring=&#x27;accuracy&#x27;)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-5\" type=\"checkbox\" ><label for=\"sk-estimator-id-5\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">GridSearchCV</label><div class=\"sk-toggleable__content\"><pre>GridSearchCV(cv=5, estimator=KNeighborsClassifier(n_neighbors=3),\n",
       "             param_grid={&#x27;n_neighbors&#x27;: [1, 3, 5, 7, 9, 12, 15, 25, 50, 75,\n",
       "                                         100]},\n",
       "             scoring=&#x27;accuracy&#x27;)</pre></div></div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-6\" type=\"checkbox\" ><label for=\"sk-estimator-id-6\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">estimator: KNeighborsClassifier</label><div class=\"sk-toggleable__content\"><pre>KNeighborsClassifier(n_neighbors=3)</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-7\" type=\"checkbox\" ><label for=\"sk-estimator-id-7\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">KNeighborsClassifier</label><div class=\"sk-toggleable__content\"><pre>KNeighborsClassifier(n_neighbors=3)</pre></div></div></div></div></div></div></div></div></div></div>"
      ],
      "text/plain": [
       "GridSearchCV(cv=5, estimator=KNeighborsClassifier(n_neighbors=3),\n",
       "             param_grid={'n_neighbors': [1, 3, 5, 7, 9, 12, 15, 25, 50, 75,\n",
       "                                         100]},\n",
       "             scoring='accuracy')"
      ]
     },
     "execution_count": 65,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "grid_search = GridSearchCV(knn, param_grid, cv=5, scoring='accuracy')\n",
    "grid_search.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "id": "cabce13e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-05T12:23:51.943666Z",
     "iopub.status.busy": "2024-06-05T12:23:51.943255Z",
     "iopub.status.idle": "2024-06-05T12:23:51.950188Z",
     "shell.execute_reply": "2024-06-05T12:23:51.948736Z"
    },
    "papermill": {
     "duration": 0.042297,
     "end_time": "2024-06-05T12:23:51.952987",
     "exception": false,
     "start_time": "2024-06-05T12:23:51.910690",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Best k Value: 25\n"
     ]
    }
   ],
   "source": [
    "best_k = grid_search.best_params_['n_neighbors']\n",
    "print(\"Best k Value:\", best_k)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "id": "964b2542",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-05T12:23:52.013192Z",
     "iopub.status.busy": "2024-06-05T12:23:52.012246Z",
     "iopub.status.idle": "2024-06-05T12:23:52.017506Z",
     "shell.execute_reply": "2024-06-05T12:23:52.016185Z"
    },
    "papermill": {
     "duration": 0.038104,
     "end_time": "2024-06-05T12:23:52.020020",
     "exception": false,
     "start_time": "2024-06-05T12:23:51.981916",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "knn1 = KNeighborsClassifier(n_neighbors=50)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "id": "a8467fb0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-05T12:23:52.079850Z",
     "iopub.status.busy": "2024-06-05T12:23:52.079475Z",
     "iopub.status.idle": "2024-06-05T12:23:52.096340Z",
     "shell.execute_reply": "2024-06-05T12:23:52.095173Z"
    },
    "papermill": {
     "duration": 0.050606,
     "end_time": "2024-06-05T12:23:52.099772",
     "exception": false,
     "start_time": "2024-06-05T12:23:52.049166",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-6 {color: black;background-color: white;}#sk-container-id-6 pre{padding: 0;}#sk-container-id-6 div.sk-toggleable {background-color: white;}#sk-container-id-6 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-6 label.sk-toggleable__label-arrow:before {content: \"‚ñ∏\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-6 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-6 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-6 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-6 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-6 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-6 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"‚ñæ\";}#sk-container-id-6 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-6 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-6 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-6 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-6 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-6 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-6 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-6 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-6 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-6 div.sk-item {position: relative;z-index: 1;}#sk-container-id-6 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-6 div.sk-item::before, #sk-container-id-6 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-6 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-6 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-6 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-6 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-6 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-6 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-6 div.sk-label-container {text-align: center;}#sk-container-id-6 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-6 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-6\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>KNeighborsClassifier(n_neighbors=50)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-8\" type=\"checkbox\" checked><label for=\"sk-estimator-id-8\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">KNeighborsClassifier</label><div class=\"sk-toggleable__content\"><pre>KNeighborsClassifier(n_neighbors=50)</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "KNeighborsClassifier(n_neighbors=50)"
      ]
     },
     "execution_count": 68,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "knn1.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "id": "382c488f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-05T12:23:52.161482Z",
     "iopub.status.busy": "2024-06-05T12:23:52.161049Z",
     "iopub.status.idle": "2024-06-05T12:23:52.286231Z",
     "shell.execute_reply": "2024-06-05T12:23:52.285076Z"
    },
    "papermill": {
     "duration": 0.158711,
     "end_time": "2024-06-05T12:23:52.288925",
     "exception": false,
     "start_time": "2024-06-05T12:23:52.130214",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "y_pred1 = knn1.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "id": "86223beb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-06-05T12:23:52.349274Z",
     "iopub.status.busy": "2024-06-05T12:23:52.348904Z",
     "iopub.status.idle": "2024-06-05T12:23:52.365477Z",
     "shell.execute_reply": "2024-06-05T12:23:52.363994Z"
    },
    "papermill": {
     "duration": 0.049678,
     "end_time": "2024-06-05T12:23:52.368290",
     "exception": false,
     "start_time": "2024-06-05T12:23:52.318612",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "           1       1.00      0.01      0.02       108\n",
      "           2       0.00      0.00      0.00        25\n",
      "           3       0.00      0.00      0.00        74\n",
      "           4       0.00      0.00      0.00       228\n",
      "           5       0.76      1.00      0.87      1398\n",
      "\n",
      "    accuracy                           0.76      1833\n",
      "   macro avg       0.35      0.20      0.18      1833\n",
      "weighted avg       0.64      0.76      0.66      1833\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(classification_report(y_test, y_pred1, zero_division=0))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d3385b92",
   "metadata": {
    "papermill": {
     "duration": 0.030362,
     "end_time": "2024-06-05T12:23:52.429276",
     "exception": false,
     "start_time": "2024-06-05T12:23:52.398914",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Thanks all! ##"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 4997049,
     "sourceId": 8607697,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30715,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 78.209969,
   "end_time": "2024-06-05T12:23:55.731920",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-06-05T12:22:37.521951",
   "version": "2.5.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
